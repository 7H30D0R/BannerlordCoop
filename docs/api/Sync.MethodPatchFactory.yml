### YamlMime:ManagedReference
items:
- uid: Sync.MethodPatchFactory
  commentId: T:Sync.MethodPatchFactory
  id: MethodPatchFactory
  parent: Sync
  children:
  - Sync.MethodPatchFactory.AddPrefix(Sync.MethodAccess,System.Reflection.MethodInfo,Sync.EPatchBehaviour)
  - Sync.MethodPatchFactory.AddPrefix(System.Reflection.MethodInfo,System.Reflection.MethodInfo,Sync.EPatchBehaviour)
  - Sync.MethodPatchFactory.GeneratePrefix(Sync.MethodAccess,System.Reflection.MethodInfo,Sync.EPatchBehaviour)
  - Sync.MethodPatchFactory.GetPrefix(System.Reflection.MethodBase)
  - Sync.MethodPatchFactory.Prefixes
  - Sync.MethodPatchFactory.RemovePrefix(System.Reflection.MethodInfo)
  - Sync.MethodPatchFactory.UnpatchAll
  langs:
  - csharp
  - vb
  name: MethodPatchFactory
  nameWithType: MethodPatchFactory
  fullName: Sync.MethodPatchFactory
  type: Class
  source:
    remote:
      path: source/Sync/MethodPatchFactory.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: MethodPatchFactory
    path: ../source/Sync/MethodPatchFactory.cs
    startLine: 11
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: public static class MethodPatchFactory
    content.vb: Public Module MethodPatchFactory
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Sync.MethodPatchFactory.Prefixes
  commentId: F:Sync.MethodPatchFactory.Prefixes
  id: Prefixes
  parent: Sync.MethodPatchFactory
  langs:
  - csharp
  - vb
  name: Prefixes
  nameWithType: MethodPatchFactory.Prefixes
  fullName: Sync.MethodPatchFactory.Prefixes
  type: Field
  source:
    remote:
      path: source/Sync/MethodPatchFactory.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Prefixes
    path: ../source/Sync/MethodPatchFactory.cs
    startLine: 13
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: static readonly Dictionary<MethodBase, DynamicMethod> Prefixes
    return:
      type: System.Collections.Generic.Dictionary{System.Reflection.MethodBase,System.Reflection.Emit.DynamicMethod}
    content.vb: Shared ReadOnly Prefixes As Dictionary(Of MethodBase, DynamicMethod)
  modifiers.csharp:
  - static
  - readonly
  modifiers.vb:
  - Shared
  - ReadOnly
- uid: Sync.MethodPatchFactory.AddPrefix(System.Reflection.MethodInfo,System.Reflection.MethodInfo,Sync.EPatchBehaviour)
  commentId: M:Sync.MethodPatchFactory.AddPrefix(System.Reflection.MethodInfo,System.Reflection.MethodInfo,Sync.EPatchBehaviour)
  id: AddPrefix(System.Reflection.MethodInfo,System.Reflection.MethodInfo,Sync.EPatchBehaviour)
  parent: Sync.MethodPatchFactory
  langs:
  - csharp
  - vb
  name: AddPrefix(MethodInfo, MethodInfo, EPatchBehaviour)
  nameWithType: MethodPatchFactory.AddPrefix(MethodInfo, MethodInfo, EPatchBehaviour)
  fullName: Sync.MethodPatchFactory.AddPrefix(System.Reflection.MethodInfo, System.Reflection.MethodInfo, Sync.EPatchBehaviour)
  type: Method
  source:
    remote:
      path: source/Sync/MethodPatchFactory.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: AddPrefix
    path: ../source/Sync/MethodPatchFactory.cs
    startLine: 16
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: public static MethodAccess AddPrefix(MethodInfo original, MethodInfo dispatcher, EPatchBehaviour eBehaviour)
    parameters:
    - id: original
      type: System.Reflection.MethodInfo
    - id: dispatcher
      type: System.Reflection.MethodInfo
    - id: eBehaviour
      type: Sync.EPatchBehaviour
    return:
      type: Sync.MethodAccess
    content.vb: Public Shared Function AddPrefix(original As MethodInfo, dispatcher As MethodInfo, eBehaviour As EPatchBehaviour) As MethodAccess
  overload: Sync.MethodPatchFactory.AddPrefix*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sync.MethodPatchFactory.AddPrefix(Sync.MethodAccess,System.Reflection.MethodInfo,Sync.EPatchBehaviour)
  commentId: M:Sync.MethodPatchFactory.AddPrefix(Sync.MethodAccess,System.Reflection.MethodInfo,Sync.EPatchBehaviour)
  id: AddPrefix(Sync.MethodAccess,System.Reflection.MethodInfo,Sync.EPatchBehaviour)
  parent: Sync.MethodPatchFactory
  langs:
  - csharp
  - vb
  name: AddPrefix(MethodAccess, MethodInfo, EPatchBehaviour)
  nameWithType: MethodPatchFactory.AddPrefix(MethodAccess, MethodInfo, EPatchBehaviour)
  fullName: Sync.MethodPatchFactory.AddPrefix(Sync.MethodAccess, System.Reflection.MethodInfo, Sync.EPatchBehaviour)
  type: Method
  source:
    remote:
      path: source/Sync/MethodPatchFactory.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: AddPrefix
    path: ../source/Sync/MethodPatchFactory.cs
    startLine: 29
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: public static void AddPrefix(MethodAccess access, MethodInfo dispatcher, EPatchBehaviour eBehaviour)
    parameters:
    - id: access
      type: Sync.MethodAccess
    - id: dispatcher
      type: System.Reflection.MethodInfo
    - id: eBehaviour
      type: Sync.EPatchBehaviour
    content.vb: Public Shared Sub AddPrefix(access As MethodAccess, dispatcher As MethodInfo, eBehaviour As EPatchBehaviour)
  overload: Sync.MethodPatchFactory.AddPrefix*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sync.MethodPatchFactory.RemovePrefix(System.Reflection.MethodInfo)
  commentId: M:Sync.MethodPatchFactory.RemovePrefix(System.Reflection.MethodInfo)
  id: RemovePrefix(System.Reflection.MethodInfo)
  parent: Sync.MethodPatchFactory
  langs:
  - csharp
  - vb
  name: RemovePrefix(MethodInfo)
  nameWithType: MethodPatchFactory.RemovePrefix(MethodInfo)
  fullName: Sync.MethodPatchFactory.RemovePrefix(System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: source/Sync/MethodPatchFactory.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: RemovePrefix
    path: ../source/Sync/MethodPatchFactory.cs
    startLine: 56
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: public static void RemovePrefix(MethodInfo original)
    parameters:
    - id: original
      type: System.Reflection.MethodInfo
    content.vb: Public Shared Sub RemovePrefix(original As MethodInfo)
  overload: Sync.MethodPatchFactory.RemovePrefix*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sync.MethodPatchFactory.GetPrefix(System.Reflection.MethodBase)
  commentId: M:Sync.MethodPatchFactory.GetPrefix(System.Reflection.MethodBase)
  id: GetPrefix(System.Reflection.MethodBase)
  parent: Sync.MethodPatchFactory
  langs:
  - csharp
  - vb
  name: GetPrefix(MethodBase)
  nameWithType: MethodPatchFactory.GetPrefix(MethodBase)
  fullName: Sync.MethodPatchFactory.GetPrefix(System.Reflection.MethodBase)
  type: Method
  source:
    remote:
      path: source/Sync/MethodPatchFactory.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: GetPrefix
    path: ../source/Sync/MethodPatchFactory.cs
    startLine: 66
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: public static DynamicMethod GetPrefix(MethodBase original)
    parameters:
    - id: original
      type: System.Reflection.MethodBase
    return:
      type: System.Reflection.Emit.DynamicMethod
    content.vb: Public Shared Function GetPrefix(original As MethodBase) As DynamicMethod
  overload: Sync.MethodPatchFactory.GetPrefix*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sync.MethodPatchFactory.GeneratePrefix(Sync.MethodAccess,System.Reflection.MethodInfo,Sync.EPatchBehaviour)
  commentId: M:Sync.MethodPatchFactory.GeneratePrefix(Sync.MethodAccess,System.Reflection.MethodInfo,Sync.EPatchBehaviour)
  id: GeneratePrefix(Sync.MethodAccess,System.Reflection.MethodInfo,Sync.EPatchBehaviour)
  parent: Sync.MethodPatchFactory
  langs:
  - csharp
  - vb
  name: GeneratePrefix(MethodAccess, MethodInfo, EPatchBehaviour)
  nameWithType: MethodPatchFactory.GeneratePrefix(MethodAccess, MethodInfo, EPatchBehaviour)
  fullName: Sync.MethodPatchFactory.GeneratePrefix(Sync.MethodAccess, System.Reflection.MethodInfo, Sync.EPatchBehaviour)
  type: Method
  source:
    remote:
      path: source/Sync/MethodPatchFactory.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: GeneratePrefix
    path: ../source/Sync/MethodPatchFactory.cs
    startLine: 89
  assemblies:
  - Sync
  namespace: Sync
  summary: "\nGenerates a <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref> to be used as a harmony prefix. The method\nsignature exactly matches the original method with an additional and automatically\ncaptures the instance for non-static functions.\nThe generated Prefix captures the <code data-dev-comment-type=\"paramref\" class=\"paramref\">method</code> and calls the\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">dispatcher</code> with the following arguments:\n`dispatcher(MethodAccess access, object instance, object [] args)`.\nWith `args` containing the original method arguments (excluding __instance).\n"
  example: []
  syntax:
    content: public static DynamicMethod GeneratePrefix(MethodAccess methodAccess, MethodInfo dispatcher, EPatchBehaviour eBehaviour)
    parameters:
    - id: methodAccess
      type: Sync.MethodAccess
      description: Method that is to be prefixed.
    - id: dispatcher
      type: System.Reflection.MethodInfo
      description: Dispatcher to be called in the prefix.
    - id: eBehaviour
      type: Sync.EPatchBehaviour
      description: Return value behaviour of the generated prefix.
    return:
      type: System.Reflection.Emit.DynamicMethod
      description: ''
    content.vb: Public Shared Function GeneratePrefix(methodAccess As MethodAccess, dispatcher As MethodInfo, eBehaviour As EPatchBehaviour) As DynamicMethod
  overload: Sync.MethodPatchFactory.GeneratePrefix*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sync.MethodPatchFactory.UnpatchAll
  commentId: M:Sync.MethodPatchFactory.UnpatchAll
  id: UnpatchAll
  parent: Sync.MethodPatchFactory
  langs:
  - csharp
  - vb
  name: UnpatchAll()
  nameWithType: MethodPatchFactory.UnpatchAll()
  fullName: Sync.MethodPatchFactory.UnpatchAll()
  type: Method
  source:
    remote:
      path: source/Sync/MethodPatchFactory.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: UnpatchAll
    path: ../source/Sync/MethodPatchFactory.cs
    startLine: 232
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: public static void UnpatchAll()
    content.vb: Public Shared Sub UnpatchAll
  overload: Sync.MethodPatchFactory.UnpatchAll*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Sync
  commentId: N:Sync
  name: Sync
  nameWithType: Sync
  fullName: Sync
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.Dictionary{System.Reflection.MethodBase,System.Reflection.Emit.DynamicMethod}
  commentId: T:System.Collections.Generic.Dictionary{System.Reflection.MethodBase,System.Reflection.Emit.DynamicMethod}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<MethodBase, DynamicMethod>
  nameWithType: Dictionary<MethodBase, DynamicMethod>
  fullName: System.Collections.Generic.Dictionary<System.Reflection.MethodBase, System.Reflection.Emit.DynamicMethod>
  nameWithType.vb: Dictionary(Of MethodBase, DynamicMethod)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.Reflection.MethodBase, System.Reflection.Emit.DynamicMethod)
  name.vb: Dictionary(Of MethodBase, DynamicMethod)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.MethodBase
    name: MethodBase
    nameWithType: MethodBase
    fullName: System.Reflection.MethodBase
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.Emit.DynamicMethod
    name: DynamicMethod
    nameWithType: DynamicMethod
    fullName: System.Reflection.Emit.DynamicMethod
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.MethodBase
    name: MethodBase
    nameWithType: MethodBase
    fullName: System.Reflection.MethodBase
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.Emit.DynamicMethod
    name: DynamicMethod
    nameWithType: DynamicMethod
    fullName: System.Reflection.Emit.DynamicMethod
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sync.MethodPatchFactory.AddPrefix*
  commentId: Overload:Sync.MethodPatchFactory.AddPrefix
  name: AddPrefix
  nameWithType: MethodPatchFactory.AddPrefix
  fullName: Sync.MethodPatchFactory.AddPrefix
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: Sync.EPatchBehaviour
  commentId: T:Sync.EPatchBehaviour
  parent: Sync
  name: EPatchBehaviour
  nameWithType: EPatchBehaviour
  fullName: Sync.EPatchBehaviour
- uid: Sync.MethodAccess
  commentId: T:Sync.MethodAccess
  parent: Sync
  name: MethodAccess
  nameWithType: MethodAccess
  fullName: Sync.MethodAccess
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: Sync.MethodPatchFactory.RemovePrefix*
  commentId: Overload:Sync.MethodPatchFactory.RemovePrefix
  name: RemovePrefix
  nameWithType: MethodPatchFactory.RemovePrefix
  fullName: Sync.MethodPatchFactory.RemovePrefix
- uid: Sync.MethodPatchFactory.GetPrefix*
  commentId: Overload:Sync.MethodPatchFactory.GetPrefix
  name: GetPrefix
  nameWithType: MethodPatchFactory.GetPrefix
  fullName: Sync.MethodPatchFactory.GetPrefix
- uid: System.Reflection.MethodBase
  commentId: T:System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: true
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Reflection.Emit.DynamicMethod
  commentId: T:System.Reflection.Emit.DynamicMethod
  parent: System.Reflection.Emit
  isExternal: true
  name: DynamicMethod
  nameWithType: DynamicMethod
  fullName: System.Reflection.Emit.DynamicMethod
- uid: System.Reflection.Emit
  commentId: N:System.Reflection.Emit
  isExternal: true
  name: System.Reflection.Emit
  nameWithType: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
- uid: Sync.MethodPatchFactory.GeneratePrefix*
  commentId: Overload:Sync.MethodPatchFactory.GeneratePrefix
  name: GeneratePrefix
  nameWithType: MethodPatchFactory.GeneratePrefix
  fullName: Sync.MethodPatchFactory.GeneratePrefix
- uid: Sync.MethodPatchFactory.UnpatchAll*
  commentId: Overload:Sync.MethodPatchFactory.UnpatchAll
  name: UnpatchAll
  nameWithType: MethodPatchFactory.UnpatchAll
  fullName: Sync.MethodPatchFactory.UnpatchAll
