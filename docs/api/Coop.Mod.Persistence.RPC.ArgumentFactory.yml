### YamlMime:ManagedReference
items:
- uid: Coop.Mod.Persistence.RPC.ArgumentFactory
  commentId: T:Coop.Mod.Persistence.RPC.ArgumentFactory
  id: ArgumentFactory
  parent: Coop.Mod.Persistence.RPC
  children:
  - Coop.Mod.Persistence.RPC.ArgumentFactory.Create(Sync.Store.IStore,System.Object,System.Boolean)
  - Coop.Mod.Persistence.RPC.ArgumentFactory.Logger
  - Coop.Mod.Persistence.RPC.ArgumentFactory.Resolve(Sync.Store.IStore,Coop.Mod.Persistence.RPC.Argument)
  - Coop.Mod.Persistence.RPC.ArgumentFactory.Resolve(Sync.Store.IStore,System.Collections.Generic.List{Coop.Mod.Persistence.RPC.Argument})
  langs:
  - csharp
  - vb
  name: ArgumentFactory
  nameWithType: ArgumentFactory
  fullName: Coop.Mod.Persistence.RPC.ArgumentFactory
  type: Class
  source:
    remote:
      path: source/Coop/Mod/Persistence/RPC/ArgumentFactory.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: ArgumentFactory
    path: ../source/Coop/Mod/Persistence/RPC/ArgumentFactory.cs
    startLine: 15
  assemblies:
  - Coop
  namespace: Coop.Mod.Persistence.RPC
  summary: "\nFactory to create the transfer wrapper for an argument in a RPC call.\n"
  example: []
  syntax:
    content: public static class ArgumentFactory
    content.vb: Public Module ArgumentFactory
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Coop.Mod.Persistence.RPC.ArgumentFactory.Logger
  commentId: F:Coop.Mod.Persistence.RPC.ArgumentFactory.Logger
  id: Logger
  parent: Coop.Mod.Persistence.RPC.ArgumentFactory
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: ArgumentFactory.Logger
  fullName: Coop.Mod.Persistence.RPC.ArgumentFactory.Logger
  type: Field
  source:
    remote:
      path: source/Coop/Mod/Persistence/RPC/ArgumentFactory.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Logger
    path: ../source/Coop/Mod/Persistence/RPC/ArgumentFactory.cs
    startLine: 17
  assemblies:
  - Coop
  namespace: Coop.Mod.Persistence.RPC
  syntax:
    content: static readonly Logger Logger
    return:
      type: NLog.Logger
    content.vb: Shared ReadOnly Logger As Logger
  modifiers.csharp:
  - static
  - readonly
  modifiers.vb:
  - Shared
  - ReadOnly
- uid: Coop.Mod.Persistence.RPC.ArgumentFactory.Resolve(Sync.Store.IStore,Coop.Mod.Persistence.RPC.Argument)
  commentId: M:Coop.Mod.Persistence.RPC.ArgumentFactory.Resolve(Sync.Store.IStore,Coop.Mod.Persistence.RPC.Argument)
  id: Resolve(Sync.Store.IStore,Coop.Mod.Persistence.RPC.Argument)
  parent: Coop.Mod.Persistence.RPC.ArgumentFactory
  langs:
  - csharp
  - vb
  name: Resolve(IStore, Argument)
  nameWithType: ArgumentFactory.Resolve(IStore, Argument)
  fullName: Coop.Mod.Persistence.RPC.ArgumentFactory.Resolve(Sync.Store.IStore, Coop.Mod.Persistence.RPC.Argument)
  type: Method
  source:
    remote:
      path: source/Coop/Mod/Persistence/RPC/ArgumentFactory.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Resolve
    path: ../source/Coop/Mod/Persistence/RPC/ArgumentFactory.cs
    startLine: 30
  assemblies:
  - Coop
  namespace: Coop.Mod.Persistence.RPC
  summary: "\nResolves the transferred RPC argument to be used in the local function call.\n"
  example: []
  syntax:
    content: public static object Resolve(IStore store, Argument arg)
    parameters:
    - id: store
      type: Sync.Store.IStore
      description: Clients remote store instance.
    - id: arg
      type: Coop.Mod.Persistence.RPC.Argument
      description: Argument to be resolved.
    return:
      type: System.Object
      description: The unwrapped argument.
    content.vb: Public Shared Function Resolve(store As IStore, arg As Argument) As Object
  overload: Coop.Mod.Persistence.RPC.ArgumentFactory.Resolve*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf the argument references an object in the store,\nbut the reference cannot be resolved.\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: If the argument type is unknown.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Coop.Mod.Persistence.RPC.ArgumentFactory.Resolve(Sync.Store.IStore,System.Collections.Generic.List{Coop.Mod.Persistence.RPC.Argument})
  commentId: M:Coop.Mod.Persistence.RPC.ArgumentFactory.Resolve(Sync.Store.IStore,System.Collections.Generic.List{Coop.Mod.Persistence.RPC.Argument})
  id: Resolve(Sync.Store.IStore,System.Collections.Generic.List{Coop.Mod.Persistence.RPC.Argument})
  parent: Coop.Mod.Persistence.RPC.ArgumentFactory
  langs:
  - csharp
  - vb
  name: Resolve(IStore, List<Argument>)
  nameWithType: ArgumentFactory.Resolve(IStore, List<Argument>)
  fullName: Coop.Mod.Persistence.RPC.ArgumentFactory.Resolve(Sync.Store.IStore, System.Collections.Generic.List<Coop.Mod.Persistence.RPC.Argument>)
  type: Method
  source:
    remote:
      path: source/Coop/Mod/Persistence/RPC/ArgumentFactory.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Resolve
    path: ../source/Coop/Mod/Persistence/RPC/ArgumentFactory.cs
    startLine: 77
  assemblies:
  - Coop
  namespace: Coop.Mod.Persistence.RPC
  summary: "\nResolves a list of transferred RPC arguments to be used in the local function call.\n"
  example: []
  syntax:
    content: public static object[] Resolve(IStore store, List<Argument> args)
    parameters:
    - id: store
      type: Sync.Store.IStore
      description: Clients remote store instance.
    - id: args
      type: System.Collections.Generic.List{Coop.Mod.Persistence.RPC.Argument}
      description: Argument to be resolved.
    return:
      type: System.Object[]
      description: A list of the unwrapped arguments.
    content.vb: Public Shared Function Resolve(store As IStore, args As List(Of Argument)) As Object()
  overload: Coop.Mod.Persistence.RPC.ArgumentFactory.Resolve*
  nameWithType.vb: ArgumentFactory.Resolve(IStore, List(Of Argument))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Coop.Mod.Persistence.RPC.ArgumentFactory.Resolve(Sync.Store.IStore, System.Collections.Generic.List(Of Coop.Mod.Persistence.RPC.Argument))
  name.vb: Resolve(IStore, List(Of Argument))
- uid: Coop.Mod.Persistence.RPC.ArgumentFactory.Create(Sync.Store.IStore,System.Object,System.Boolean)
  commentId: M:Coop.Mod.Persistence.RPC.ArgumentFactory.Create(Sync.Store.IStore,System.Object,System.Boolean)
  id: Create(Sync.Store.IStore,System.Object,System.Boolean)
  parent: Coop.Mod.Persistence.RPC.ArgumentFactory
  langs:
  - csharp
  - vb
  name: Create(IStore, Object, Boolean)
  nameWithType: ArgumentFactory.Create(IStore, Object, Boolean)
  fullName: Coop.Mod.Persistence.RPC.ArgumentFactory.Create(Sync.Store.IStore, System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: source/Coop/Mod/Persistence/RPC/ArgumentFactory.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Create
    path: ../source/Coop/Mod/Persistence/RPC/ArgumentFactory.cs
    startLine: 94
  assemblies:
  - Coop
  namespace: Coop.Mod.Persistence.RPC
  summary: "\nCreates a RPC transfer wrapper for a function call argument.\n"
  example: []
  syntax:
    content: public static Argument Create([NotNull] IStore store, [CanBeNull] object obj, bool bTransferByValue)
    parameters:
    - id: store
      type: Sync.Store.IStore
      description: Clients remote store instance.
      attributes:
      - type: JetBrains.Annotations.NotNullAttribute
        ctor: JetBrains.Annotations.NotNullAttribute.#ctor
        arguments: []
    - id: obj
      type: System.Object
      description: The object to be wrapped.
      attributes:
      - type: JetBrains.Annotations.CanBeNullAttribute
        ctor: JetBrains.Annotations.CanBeNullAttribute.#ctor
        arguments: []
    - id: bTransferByValue
      type: System.Boolean
      description: "\nIf true, the object will always be transferred by\nvalue. If the argument is too large to fit in an <see cref=\"!:RailEvent\"></see>,\nthe argument will be shared to all receivers using the <code data-dev-comment-type=\"paramref\" class=\"paramref\">store</code>.\nIf false, the argument may be, depending on the type, transferred by reference.\n"
    return:
      type: Coop.Mod.Persistence.RPC.Argument
      description: The wrapped argument.
    content.vb: Public Shared Function Create(store As IStore, obj As Object, bTransferByValue As Boolean) As Argument
  overload: Coop.Mod.Persistence.RPC.ArgumentFactory.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Coop.Mod.Persistence.RPC
  commentId: N:Coop.Mod.Persistence.RPC
  name: Coop.Mod.Persistence.RPC
  nameWithType: Coop.Mod.Persistence.RPC
  fullName: Coop.Mod.Persistence.RPC
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NLog.Logger
  commentId: T:NLog.Logger
  parent: NLog
  isExternal: true
  name: Logger
  nameWithType: Logger
  fullName: NLog.Logger
- uid: NLog
  commentId: N:NLog
  isExternal: true
  name: NLog
  nameWithType: NLog
  fullName: NLog
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
- uid: Coop.Mod.Persistence.RPC.ArgumentFactory.Resolve*
  commentId: Overload:Coop.Mod.Persistence.RPC.ArgumentFactory.Resolve
  name: Resolve
  nameWithType: ArgumentFactory.Resolve
  fullName: Coop.Mod.Persistence.RPC.ArgumentFactory.Resolve
- uid: Sync.Store.IStore
  commentId: T:Sync.Store.IStore
  parent: Sync.Store
  name: IStore
  nameWithType: IStore
  fullName: Sync.Store.IStore
- uid: Coop.Mod.Persistence.RPC.Argument
  commentId: T:Coop.Mod.Persistence.RPC.Argument
  parent: Coop.Mod.Persistence.RPC
  name: Argument
  nameWithType: Argument
  fullName: Coop.Mod.Persistence.RPC.Argument
- uid: Sync.Store
  commentId: N:Sync.Store
  name: Sync.Store
  nameWithType: Sync.Store
  fullName: Sync.Store
- uid: System.Collections.Generic.List{Coop.Mod.Persistence.RPC.Argument}
  commentId: T:System.Collections.Generic.List{Coop.Mod.Persistence.RPC.Argument}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Argument>
  nameWithType: List<Argument>
  fullName: System.Collections.Generic.List<Coop.Mod.Persistence.RPC.Argument>
  nameWithType.vb: List(Of Argument)
  fullName.vb: System.Collections.Generic.List(Of Coop.Mod.Persistence.RPC.Argument)
  name.vb: List(Of Argument)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Coop.Mod.Persistence.RPC.Argument
    name: Argument
    nameWithType: Argument
    fullName: Coop.Mod.Persistence.RPC.Argument
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Coop.Mod.Persistence.RPC.Argument
    name: Argument
    nameWithType: Argument
    fullName: Coop.Mod.Persistence.RPC.Argument
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Coop.Mod.Persistence.RPC.ArgumentFactory.Create*
  commentId: Overload:Coop.Mod.Persistence.RPC.ArgumentFactory.Create
  name: Create
  nameWithType: ArgumentFactory.Create
  fullName: Coop.Mod.Persistence.RPC.ArgumentFactory.Create
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
