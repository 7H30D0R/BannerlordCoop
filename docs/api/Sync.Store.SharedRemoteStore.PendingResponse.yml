### YamlMime:ManagedReference
items:
- uid: Sync.Store.SharedRemoteStore.PendingResponse
  commentId: T:Sync.Store.SharedRemoteStore.PendingResponse
  id: SharedRemoteStore.PendingResponse
  parent: Sync.Store
  children:
  - Sync.Store.SharedRemoteStore.PendingResponse.#ctor(Sync.Store.RemoteStore,System.Collections.Generic.List{Sync.Store.RemoteStore})
  - Sync.Store.SharedRemoteStore.PendingResponse.AllDone
  - Sync.Store.SharedRemoteStore.PendingResponse.m_Pending
  - Sync.Store.SharedRemoteStore.PendingResponse.OnAckFrom(Sync.Store.RemoteStore)
  - Sync.Store.SharedRemoteStore.PendingResponse.Origin
  langs:
  - csharp
  - vb
  name: SharedRemoteStore.PendingResponse
  nameWithType: SharedRemoteStore.PendingResponse
  fullName: Sync.Store.SharedRemoteStore.PendingResponse
  type: Class
  source:
    remote:
      path: source/Sync/Store/SharedRemoteStore.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: PendingResponse
    path: ../source/Sync/Store/SharedRemoteStore.cs
    startLine: 146
  assemblies:
  - Sync
  namespace: Sync.Store
  syntax:
    content: class PendingResponse
    content.vb: Class PendingResponse
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - class
  modifiers.vb:
  - Class
- uid: Sync.Store.SharedRemoteStore.PendingResponse.m_Pending
  commentId: F:Sync.Store.SharedRemoteStore.PendingResponse.m_Pending
  id: m_Pending
  parent: Sync.Store.SharedRemoteStore.PendingResponse
  langs:
  - csharp
  - vb
  name: m_Pending
  nameWithType: SharedRemoteStore.PendingResponse.m_Pending
  fullName: Sync.Store.SharedRemoteStore.PendingResponse.m_Pending
  type: Field
  source:
    remote:
      path: source/Sync/Store/SharedRemoteStore.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: m_Pending
    path: ../source/Sync/Store/SharedRemoteStore.cs
    startLine: 148
  assemblies:
  - Sync
  namespace: Sync.Store
  syntax:
    content: readonly List<RemoteStore> m_Pending
    return:
      type: System.Collections.Generic.List{Sync.Store.RemoteStore}
    content.vb: ReadOnly m_Pending As List(Of RemoteStore)
  modifiers.csharp:
  - readonly
  modifiers.vb:
  - ReadOnly
- uid: Sync.Store.SharedRemoteStore.PendingResponse.#ctor(Sync.Store.RemoteStore,System.Collections.Generic.List{Sync.Store.RemoteStore})
  commentId: M:Sync.Store.SharedRemoteStore.PendingResponse.#ctor(Sync.Store.RemoteStore,System.Collections.Generic.List{Sync.Store.RemoteStore})
  id: '#ctor(Sync.Store.RemoteStore,System.Collections.Generic.List{Sync.Store.RemoteStore})'
  parent: Sync.Store.SharedRemoteStore.PendingResponse
  langs:
  - csharp
  - vb
  name: PendingResponse(RemoteStore, List<RemoteStore>)
  nameWithType: SharedRemoteStore.PendingResponse.PendingResponse(RemoteStore, List<RemoteStore>)
  fullName: Sync.Store.SharedRemoteStore.PendingResponse.PendingResponse(Sync.Store.RemoteStore, System.Collections.Generic.List<Sync.Store.RemoteStore>)
  type: Constructor
  source:
    remote:
      path: source/Sync/Store/SharedRemoteStore.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: .ctor
    path: ../source/Sync/Store/SharedRemoteStore.cs
    startLine: 150
  assemblies:
  - Sync
  namespace: Sync.Store
  syntax:
    content: public PendingResponse([CanBeNull] RemoteStore origin, [NotNull] List<RemoteStore> storesToWaitFor)
    parameters:
    - id: origin
      type: Sync.Store.RemoteStore
      attributes:
      - type: JetBrains.Annotations.CanBeNullAttribute
        ctor: JetBrains.Annotations.CanBeNullAttribute.#ctor
        arguments: []
    - id: storesToWaitFor
      type: System.Collections.Generic.List{Sync.Store.RemoteStore}
      attributes:
      - type: JetBrains.Annotations.NotNullAttribute
        ctor: JetBrains.Annotations.NotNullAttribute.#ctor
        arguments: []
    content.vb: Public Sub New(origin As RemoteStore, storesToWaitFor As List(Of RemoteStore))
  overload: Sync.Store.SharedRemoteStore.PendingResponse.#ctor*
  nameWithType.vb: SharedRemoteStore.PendingResponse.PendingResponse(RemoteStore, List(Of RemoteStore))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sync.Store.SharedRemoteStore.PendingResponse.PendingResponse(Sync.Store.RemoteStore, System.Collections.Generic.List(Of Sync.Store.RemoteStore))
  name.vb: PendingResponse(RemoteStore, List(Of RemoteStore))
- uid: Sync.Store.SharedRemoteStore.PendingResponse.Origin
  commentId: P:Sync.Store.SharedRemoteStore.PendingResponse.Origin
  id: Origin
  parent: Sync.Store.SharedRemoteStore.PendingResponse
  langs:
  - csharp
  - vb
  name: Origin
  nameWithType: SharedRemoteStore.PendingResponse.Origin
  fullName: Sync.Store.SharedRemoteStore.PendingResponse.Origin
  type: Property
  source:
    remote:
      path: source/Sync/Store/SharedRemoteStore.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Origin
    path: ../source/Sync/Store/SharedRemoteStore.cs
    startLine: 158
  assemblies:
  - Sync
  namespace: Sync.Store
  syntax:
    content: >-
      [CanBeNull]

      public RemoteStore Origin { get; }
    parameters: []
    return:
      type: Sync.Store.RemoteStore
    content.vb: >-
      <CanBeNull>

      Public ReadOnly Property Origin As RemoteStore
  overload: Sync.Store.SharedRemoteStore.PendingResponse.Origin*
  attributes:
  - type: JetBrains.Annotations.CanBeNullAttribute
    ctor: JetBrains.Annotations.CanBeNullAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sync.Store.SharedRemoteStore.PendingResponse.OnAckFrom(Sync.Store.RemoteStore)
  commentId: M:Sync.Store.SharedRemoteStore.PendingResponse.OnAckFrom(Sync.Store.RemoteStore)
  id: OnAckFrom(Sync.Store.RemoteStore)
  parent: Sync.Store.SharedRemoteStore.PendingResponse
  langs:
  - csharp
  - vb
  name: OnAckFrom(RemoteStore)
  nameWithType: SharedRemoteStore.PendingResponse.OnAckFrom(RemoteStore)
  fullName: Sync.Store.SharedRemoteStore.PendingResponse.OnAckFrom(Sync.Store.RemoteStore)
  type: Method
  source:
    remote:
      path: source/Sync/Store/SharedRemoteStore.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: OnAckFrom
    path: ../source/Sync/Store/SharedRemoteStore.cs
    startLine: 160
  assemblies:
  - Sync
  namespace: Sync.Store
  syntax:
    content: public void OnAckFrom(RemoteStore store)
    parameters:
    - id: store
      type: Sync.Store.RemoteStore
    content.vb: Public Sub OnAckFrom(store As RemoteStore)
  overload: Sync.Store.SharedRemoteStore.PendingResponse.OnAckFrom*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sync.Store.SharedRemoteStore.PendingResponse.AllDone
  commentId: M:Sync.Store.SharedRemoteStore.PendingResponse.AllDone
  id: AllDone
  parent: Sync.Store.SharedRemoteStore.PendingResponse
  langs:
  - csharp
  - vb
  name: AllDone()
  nameWithType: SharedRemoteStore.PendingResponse.AllDone()
  fullName: Sync.Store.SharedRemoteStore.PendingResponse.AllDone()
  type: Method
  source:
    remote:
      path: source/Sync/Store/SharedRemoteStore.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: AllDone
    path: ../source/Sync/Store/SharedRemoteStore.cs
    startLine: 165
  assemblies:
  - Sync
  namespace: Sync.Store
  syntax:
    content: public bool AllDone()
    return:
      type: System.Boolean
    content.vb: Public Function AllDone As Boolean
  overload: Sync.Store.SharedRemoteStore.PendingResponse.AllDone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Sync.Store
  commentId: N:Sync.Store
  name: Sync.Store
  nameWithType: Sync.Store
  fullName: Sync.Store
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.List{Sync.Store.RemoteStore}
  commentId: T:System.Collections.Generic.List{Sync.Store.RemoteStore}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<RemoteStore>
  nameWithType: List<RemoteStore>
  fullName: System.Collections.Generic.List<Sync.Store.RemoteStore>
  nameWithType.vb: List(Of RemoteStore)
  fullName.vb: System.Collections.Generic.List(Of Sync.Store.RemoteStore)
  name.vb: List(Of RemoteStore)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sync.Store.RemoteStore
    name: RemoteStore
    nameWithType: RemoteStore
    fullName: Sync.Store.RemoteStore
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sync.Store.RemoteStore
    name: RemoteStore
    nameWithType: RemoteStore
    fullName: Sync.Store.RemoteStore
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sync.Store.SharedRemoteStore.PendingResponse.#ctor*
  commentId: Overload:Sync.Store.SharedRemoteStore.PendingResponse.#ctor
  name: PendingResponse
  nameWithType: SharedRemoteStore.PendingResponse.PendingResponse
  fullName: Sync.Store.SharedRemoteStore.PendingResponse.PendingResponse
- uid: Sync.Store.RemoteStore
  commentId: T:Sync.Store.RemoteStore
  parent: Sync.Store
  name: RemoteStore
  nameWithType: RemoteStore
  fullName: Sync.Store.RemoteStore
- uid: Sync.Store.SharedRemoteStore.PendingResponse.Origin*
  commentId: Overload:Sync.Store.SharedRemoteStore.PendingResponse.Origin
  name: Origin
  nameWithType: SharedRemoteStore.PendingResponse.Origin
  fullName: Sync.Store.SharedRemoteStore.PendingResponse.Origin
- uid: Sync.Store.SharedRemoteStore.PendingResponse.OnAckFrom*
  commentId: Overload:Sync.Store.SharedRemoteStore.PendingResponse.OnAckFrom
  name: OnAckFrom
  nameWithType: SharedRemoteStore.PendingResponse.OnAckFrom
  fullName: Sync.Store.SharedRemoteStore.PendingResponse.OnAckFrom
- uid: Sync.Store.SharedRemoteStore.PendingResponse.AllDone*
  commentId: Overload:Sync.Store.SharedRemoteStore.PendingResponse.AllDone
  name: AllDone
  nameWithType: SharedRemoteStore.PendingResponse.AllDone
  fullName: Sync.Store.SharedRemoteStore.PendingResponse.AllDone
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
