### YamlMime:ManagedReference
items:
- uid: Sync.FieldChangeBuffer
  commentId: T:Sync.FieldChangeBuffer
  id: FieldChangeBuffer
  parent: Sync
  children:
  - Sync.FieldChangeBuffer.ActiveFields
  - Sync.FieldChangeBuffer.BufferedChanges
  - Sync.FieldChangeBuffer.Intercept(Sync.ValueAccess,System.Collections.Generic.IEnumerable{Sync.MethodAccess},System.Func{System.Boolean})
  - Sync.FieldChangeBuffer.OnBeforeExpectedChange(Sync.ValueAccess,System.Object)
  - Sync.FieldChangeBuffer.PatchPostfix
  - Sync.FieldChangeBuffer.PatchPrefix
  - Sync.FieldChangeBuffer.PopActiveFields
  - Sync.FieldChangeBuffer.PushActiveFields
  langs:
  - csharp
  - vb
  name: FieldChangeBuffer
  nameWithType: FieldChangeBuffer
  fullName: Sync.FieldChangeBuffer
  type: Class
  source:
    remote:
      path: source/Sync/FieldChangeBuffer.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: FieldChangeBuffer
    path: ../source/Sync/FieldChangeBuffer.cs
    startLine: 14
  assemblies:
  - Sync
  namespace: Sync
  summary: "\nBuffer for pending changes to a value. The changes are detected by creating a snapshot\nof the value in a prefix to the trigger function and restoring that snapshot in a\npostfix to the trigger function.\nThe buffer <xref href=\"Sync.FieldChangeBuffer.BufferedChanges\" data-throw-if-not-resolved=\"false\"></xref> will never be cleared internally. The game\nloop is responsible to process the buffered changes and apply or discard them.\n"
  example: []
  syntax:
    content: public static class FieldChangeBuffer
    content.vb: Public Module FieldChangeBuffer
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Sync.FieldChangeBuffer.ActiveFields
  commentId: F:Sync.FieldChangeBuffer.ActiveFields
  id: ActiveFields
  parent: Sync.FieldChangeBuffer
  langs:
  - csharp
  - vb
  name: ActiveFields
  nameWithType: FieldChangeBuffer.ActiveFields
  fullName: Sync.FieldChangeBuffer.ActiveFields
  type: Field
  source:
    remote:
      path: source/Sync/FieldChangeBuffer.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: ActiveFields
    path: ../source/Sync/FieldChangeBuffer.cs
    startLine: 16
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: static readonly Stack<ValueData> ActiveFields
    return:
      type: System.Collections.Generic.Stack{Sync.ValueData}
    content.vb: Shared ReadOnly ActiveFields As Stack(Of ValueData)
  modifiers.csharp:
  - static
  - readonly
  modifiers.vb:
  - Shared
  - ReadOnly
- uid: Sync.FieldChangeBuffer.PatchPrefix
  commentId: F:Sync.FieldChangeBuffer.PatchPrefix
  id: PatchPrefix
  parent: Sync.FieldChangeBuffer
  langs:
  - csharp
  - vb
  name: PatchPrefix
  nameWithType: FieldChangeBuffer.PatchPrefix
  fullName: Sync.FieldChangeBuffer.PatchPrefix
  type: Field
  source:
    remote:
      path: source/Sync/FieldChangeBuffer.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: PatchPrefix
    path: ../source/Sync/FieldChangeBuffer.cs
    startLine: 18
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: static readonly HarmonyMethod PatchPrefix
    return:
      type: HarmonyLib.HarmonyMethod
    content.vb: Shared ReadOnly PatchPrefix As HarmonyMethod
  modifiers.csharp:
  - static
  - readonly
  modifiers.vb:
  - Shared
  - ReadOnly
- uid: Sync.FieldChangeBuffer.PatchPostfix
  commentId: F:Sync.FieldChangeBuffer.PatchPostfix
  id: PatchPostfix
  parent: Sync.FieldChangeBuffer
  langs:
  - csharp
  - vb
  name: PatchPostfix
  nameWithType: FieldChangeBuffer.PatchPostfix
  fullName: Sync.FieldChangeBuffer.PatchPostfix
  type: Field
  source:
    remote:
      path: source/Sync/FieldChangeBuffer.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: PatchPostfix
    path: ../source/Sync/FieldChangeBuffer.cs
    startLine: 24
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: static readonly HarmonyMethod PatchPostfix
    return:
      type: HarmonyLib.HarmonyMethod
    content.vb: Shared ReadOnly PatchPostfix As HarmonyMethod
  modifiers.csharp:
  - static
  - readonly
  modifiers.vb:
  - Shared
  - ReadOnly
- uid: Sync.FieldChangeBuffer.BufferedChanges
  commentId: P:Sync.FieldChangeBuffer.BufferedChanges
  id: BufferedChanges
  parent: Sync.FieldChangeBuffer
  langs:
  - csharp
  - vb
  name: BufferedChanges
  nameWithType: FieldChangeBuffer.BufferedChanges
  fullName: Sync.FieldChangeBuffer.BufferedChanges
  type: Property
  source:
    remote:
      path: source/Sync/FieldChangeBuffer.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: BufferedChanges
    path: ../source/Sync/FieldChangeBuffer.cs
    startLine: 30
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: public static Dictionary<ValueAccess, Dictionary<object, ValueChangeRequest>> BufferedChanges { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{Sync.ValueAccess,System.Collections.Generic.Dictionary{System.Object,Sync.ValueChangeRequest}}
    content.vb: Public Shared ReadOnly Property BufferedChanges As Dictionary(Of ValueAccess, Dictionary(Of Object, ValueChangeRequest))
  overload: Sync.FieldChangeBuffer.BufferedChanges*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Sync.FieldChangeBuffer.PushActiveFields
  commentId: M:Sync.FieldChangeBuffer.PushActiveFields
  id: PushActiveFields
  parent: Sync.FieldChangeBuffer
  langs:
  - csharp
  - vb
  name: PushActiveFields()
  nameWithType: FieldChangeBuffer.PushActiveFields()
  fullName: Sync.FieldChangeBuffer.PushActiveFields()
  type: Method
  source:
    remote:
      path: source/Sync/FieldChangeBuffer.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: PushActiveFields
    path: ../source/Sync/FieldChangeBuffer.cs
    startLine: 34
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: static void PushActiveFields()
    content.vb: Shared Sub PushActiveFields
  overload: Sync.FieldChangeBuffer.PushActiveFields*
  modifiers.csharp:
  - static
  modifiers.vb:
  - Shared
- uid: Sync.FieldChangeBuffer.OnBeforeExpectedChange(Sync.ValueAccess,System.Object)
  commentId: M:Sync.FieldChangeBuffer.OnBeforeExpectedChange(Sync.ValueAccess,System.Object)
  id: OnBeforeExpectedChange(Sync.ValueAccess,System.Object)
  isExtensionMethod: true
  parent: Sync.FieldChangeBuffer
  langs:
  - csharp
  - vb
  name: OnBeforeExpectedChange(ValueAccess, Object)
  nameWithType: FieldChangeBuffer.OnBeforeExpectedChange(ValueAccess, Object)
  fullName: Sync.FieldChangeBuffer.OnBeforeExpectedChange(Sync.ValueAccess, System.Object)
  type: Method
  source:
    remote:
      path: source/Sync/FieldChangeBuffer.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: OnBeforeExpectedChange
    path: ../source/Sync/FieldChangeBuffer.cs
    startLine: 39
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: static void OnBeforeExpectedChange(this ValueAccess access, object target)
    parameters:
    - id: access
      type: Sync.ValueAccess
    - id: target
      type: System.Object
    content.vb: >-
      <ExtensionAttribute>

      Shared Sub OnBeforeExpectedChange(access As ValueAccess, target As Object)
  overload: Sync.FieldChangeBuffer.OnBeforeExpectedChange*
  modifiers.csharp:
  - static
  modifiers.vb:
  - Shared
- uid: Sync.FieldChangeBuffer.Intercept(Sync.ValueAccess,System.Collections.Generic.IEnumerable{Sync.MethodAccess},System.Func{System.Boolean})
  commentId: M:Sync.FieldChangeBuffer.Intercept(Sync.ValueAccess,System.Collections.Generic.IEnumerable{Sync.MethodAccess},System.Func{System.Boolean})
  id: Intercept(Sync.ValueAccess,System.Collections.Generic.IEnumerable{Sync.MethodAccess},System.Func{System.Boolean})
  parent: Sync.FieldChangeBuffer
  langs:
  - csharp
  - vb
  name: Intercept(ValueAccess, IEnumerable<MethodAccess>, Func<Boolean>)
  nameWithType: FieldChangeBuffer.Intercept(ValueAccess, IEnumerable<MethodAccess>, Func<Boolean>)
  fullName: Sync.FieldChangeBuffer.Intercept(Sync.ValueAccess, System.Collections.Generic.IEnumerable<Sync.MethodAccess>, System.Func<System.Boolean>)
  type: Method
  source:
    remote:
      path: source/Sync/FieldChangeBuffer.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Intercept
    path: ../source/Sync/FieldChangeBuffer.cs
    startLine: 67
  assemblies:
  - Sync
  namespace: Sync
  summary: "\nDuring the execution of any of the <code data-dev-comment-type=\"paramref\" class=\"paramref\">triggers</code> methods, any change to the\nvalue will not be applied but instead written to the change buffer\n<xref href=\"Sync.FieldChangeBuffer.BufferedChanges\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static void Intercept(ValueAccess value, IEnumerable<MethodAccess> triggers, Func<bool> condition)
    parameters:
    - id: value
      type: Sync.ValueAccess
      description: Accessor to the value
    - id: triggers
      type: System.Collections.Generic.IEnumerable{Sync.MethodAccess}
      description: "\nTrigger methods during which the changes to the value are written to the\nbuffer instead\n"
    - id: condition
      type: System.Func{System.Boolean}
      description: The buffer is only active if the condition evaluates to true
    content.vb: Public Shared Sub Intercept(value As ValueAccess, triggers As IEnumerable(Of MethodAccess), condition As Func(Of Boolean))
  overload: Sync.FieldChangeBuffer.Intercept*
  nameWithType.vb: FieldChangeBuffer.Intercept(ValueAccess, IEnumerable(Of MethodAccess), Func(Of Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sync.FieldChangeBuffer.Intercept(Sync.ValueAccess, System.Collections.Generic.IEnumerable(Of Sync.MethodAccess), System.Func(Of System.Boolean))
  name.vb: Intercept(ValueAccess, IEnumerable(Of MethodAccess), Func(Of Boolean))
- uid: Sync.FieldChangeBuffer.PopActiveFields
  commentId: M:Sync.FieldChangeBuffer.PopActiveFields
  id: PopActiveFields
  parent: Sync.FieldChangeBuffer
  langs:
  - csharp
  - vb
  name: PopActiveFields()
  nameWithType: FieldChangeBuffer.PopActiveFields()
  fullName: Sync.FieldChangeBuffer.PopActiveFields()
  type: Method
  source:
    remote:
      path: source/Sync/FieldChangeBuffer.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: PopActiveFields
    path: ../source/Sync/FieldChangeBuffer.cs
    startLine: 89
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: static void PopActiveFields()
    content.vb: Shared Sub PopActiveFields
  overload: Sync.FieldChangeBuffer.PopActiveFields*
  modifiers.csharp:
  - static
  modifiers.vb:
  - Shared
references:
- uid: Sync.FieldChangeBuffer.BufferedChanges
  commentId: P:Sync.FieldChangeBuffer.BufferedChanges
  isExternal: true
- uid: Sync
  commentId: N:Sync
  name: Sync
  nameWithType: Sync
  fullName: Sync
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.Stack{Sync.ValueData}
  commentId: T:System.Collections.Generic.Stack{Sync.ValueData}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Stack`1
  name: Stack<ValueData>
  nameWithType: Stack<ValueData>
  fullName: System.Collections.Generic.Stack<Sync.ValueData>
  nameWithType.vb: Stack(Of ValueData)
  fullName.vb: System.Collections.Generic.Stack(Of Sync.ValueData)
  name.vb: Stack(Of ValueData)
  spec.csharp:
  - uid: System.Collections.Generic.Stack`1
    name: Stack
    nameWithType: Stack
    fullName: System.Collections.Generic.Stack
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sync.ValueData
    name: ValueData
    nameWithType: ValueData
    fullName: Sync.ValueData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Stack`1
    name: Stack
    nameWithType: Stack
    fullName: System.Collections.Generic.Stack
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sync.ValueData
    name: ValueData
    nameWithType: ValueData
    fullName: Sync.ValueData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Stack`1
  commentId: T:System.Collections.Generic.Stack`1
  isExternal: true
  name: Stack<T>
  nameWithType: Stack<T>
  fullName: System.Collections.Generic.Stack<T>
  nameWithType.vb: Stack(Of T)
  fullName.vb: System.Collections.Generic.Stack(Of T)
  name.vb: Stack(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.Stack`1
    name: Stack
    nameWithType: Stack
    fullName: System.Collections.Generic.Stack
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Stack`1
    name: Stack
    nameWithType: Stack
    fullName: System.Collections.Generic.Stack
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: HarmonyLib.HarmonyMethod
  commentId: T:HarmonyLib.HarmonyMethod
  parent: HarmonyLib
  isExternal: true
  name: HarmonyMethod
  nameWithType: HarmonyMethod
  fullName: HarmonyLib.HarmonyMethod
- uid: HarmonyLib
  commentId: N:HarmonyLib
  isExternal: true
  name: HarmonyLib
  nameWithType: HarmonyLib
  fullName: HarmonyLib
- uid: Sync.FieldChangeBuffer.BufferedChanges*
  commentId: Overload:Sync.FieldChangeBuffer.BufferedChanges
  name: BufferedChanges
  nameWithType: FieldChangeBuffer.BufferedChanges
  fullName: Sync.FieldChangeBuffer.BufferedChanges
- uid: System.Collections.Generic.Dictionary{Sync.ValueAccess,System.Collections.Generic.Dictionary{System.Object,Sync.ValueChangeRequest}}
  commentId: T:System.Collections.Generic.Dictionary{Sync.ValueAccess,System.Collections.Generic.Dictionary{System.Object,Sync.ValueChangeRequest}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<ValueAccess, Dictionary<Object, ValueChangeRequest>>
  nameWithType: Dictionary<ValueAccess, Dictionary<Object, ValueChangeRequest>>
  fullName: System.Collections.Generic.Dictionary<Sync.ValueAccess, System.Collections.Generic.Dictionary<System.Object, Sync.ValueChangeRequest>>
  nameWithType.vb: Dictionary(Of ValueAccess, Dictionary(Of Object, ValueChangeRequest))
  fullName.vb: System.Collections.Generic.Dictionary(Of Sync.ValueAccess, System.Collections.Generic.Dictionary(Of System.Object, Sync.ValueChangeRequest))
  name.vb: Dictionary(Of ValueAccess, Dictionary(Of Object, ValueChangeRequest))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sync.ValueAccess
    name: ValueAccess
    nameWithType: ValueAccess
    fullName: Sync.ValueAccess
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sync.ValueChangeRequest
    name: ValueChangeRequest
    nameWithType: ValueChangeRequest
    fullName: Sync.ValueChangeRequest
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sync.ValueAccess
    name: ValueAccess
    nameWithType: ValueAccess
    fullName: Sync.ValueAccess
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sync.ValueChangeRequest
    name: ValueChangeRequest
    nameWithType: ValueChangeRequest
    fullName: Sync.ValueChangeRequest
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Sync.FieldChangeBuffer.PushActiveFields*
  commentId: Overload:Sync.FieldChangeBuffer.PushActiveFields
  name: PushActiveFields
  nameWithType: FieldChangeBuffer.PushActiveFields
  fullName: Sync.FieldChangeBuffer.PushActiveFields
- uid: Sync.FieldChangeBuffer.OnBeforeExpectedChange*
  commentId: Overload:Sync.FieldChangeBuffer.OnBeforeExpectedChange
  name: OnBeforeExpectedChange
  nameWithType: FieldChangeBuffer.OnBeforeExpectedChange
  fullName: Sync.FieldChangeBuffer.OnBeforeExpectedChange
- uid: Sync.ValueAccess
  commentId: T:Sync.ValueAccess
  parent: Sync
  name: ValueAccess
  nameWithType: ValueAccess
  fullName: Sync.ValueAccess
- uid: Sync.FieldChangeBuffer.Intercept*
  commentId: Overload:Sync.FieldChangeBuffer.Intercept
  name: Intercept
  nameWithType: FieldChangeBuffer.Intercept
  fullName: Sync.FieldChangeBuffer.Intercept
- uid: System.Collections.Generic.IEnumerable{Sync.MethodAccess}
  commentId: T:System.Collections.Generic.IEnumerable{Sync.MethodAccess}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<MethodAccess>
  nameWithType: IEnumerable<MethodAccess>
  fullName: System.Collections.Generic.IEnumerable<Sync.MethodAccess>
  nameWithType.vb: IEnumerable(Of MethodAccess)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Sync.MethodAccess)
  name.vb: IEnumerable(Of MethodAccess)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sync.MethodAccess
    name: MethodAccess
    nameWithType: MethodAccess
    fullName: Sync.MethodAccess
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sync.MethodAccess
    name: MethodAccess
    nameWithType: MethodAccess
    fullName: Sync.MethodAccess
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.Boolean}
  commentId: T:System.Func{System.Boolean}
  parent: System
  definition: System.Func`1
  name: Func<Boolean>
  nameWithType: Func<Boolean>
  fullName: System.Func<System.Boolean>
  nameWithType.vb: Func(Of Boolean)
  fullName.vb: System.Func(Of System.Boolean)
  name.vb: Func(Of Boolean)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Sync.FieldChangeBuffer.PopActiveFields*
  commentId: Overload:Sync.FieldChangeBuffer.PopActiveFields
  name: PopActiveFields
  nameWithType: FieldChangeBuffer.PopActiveFields
  fullName: Sync.FieldChangeBuffer.PopActiveFields
