### YamlMime:ManagedReference
items:
- uid: Network.Protocol.OwnerHandlerPair
  commentId: T:Network.Protocol.OwnerHandlerPair
  id: OwnerHandlerPair
  parent: Network.Protocol
  children:
  - Network.Protocol.OwnerHandlerPair.#ctor(System.Object,System.Action{Network.Infrastructure.ConnectionBase,Network.Protocol.Packet})
  - Network.Protocol.OwnerHandlerPair.Equals(System.Object)
  - Network.Protocol.OwnerHandlerPair.GetHashCode
  - Network.Protocol.OwnerHandlerPair.Handler
  - Network.Protocol.OwnerHandlerPair.op_Equality(Network.Protocol.OwnerHandlerPair,Network.Protocol.OwnerHandlerPair)
  - Network.Protocol.OwnerHandlerPair.op_Inequality(Network.Protocol.OwnerHandlerPair,Network.Protocol.OwnerHandlerPair)
  - Network.Protocol.OwnerHandlerPair.Owner
  langs:
  - csharp
  - vb
  name: OwnerHandlerPair
  nameWithType: OwnerHandlerPair
  fullName: Network.Protocol.OwnerHandlerPair
  type: Class
  source:
    remote:
      path: source/Network/Protocol/PacketDispatcher.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: OwnerHandlerPair
    path: ../source/Network/Protocol/PacketDispatcher.cs
    startLine: 154
  assemblies:
  - Network
  namespace: Network.Protocol
  syntax:
    content: class OwnerHandlerPair
    content.vb: Class OwnerHandlerPair
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - class
  modifiers.vb:
  - Class
- uid: Network.Protocol.OwnerHandlerPair.Owner
  commentId: F:Network.Protocol.OwnerHandlerPair.Owner
  id: Owner
  parent: Network.Protocol.OwnerHandlerPair
  langs:
  - csharp
  - vb
  name: Owner
  nameWithType: OwnerHandlerPair.Owner
  fullName: Network.Protocol.OwnerHandlerPair.Owner
  type: Field
  source:
    remote:
      path: source/Network/Protocol/PacketDispatcher.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Owner
    path: ../source/Network/Protocol/PacketDispatcher.cs
    startLine: 156
  assemblies:
  - Network
  namespace: Network.Protocol
  syntax:
    content: public readonly object Owner
    return:
      type: System.Object
    content.vb: Public ReadOnly Owner As Object
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Network.Protocol.OwnerHandlerPair.Handler
  commentId: F:Network.Protocol.OwnerHandlerPair.Handler
  id: Handler
  parent: Network.Protocol.OwnerHandlerPair
  langs:
  - csharp
  - vb
  name: Handler
  nameWithType: OwnerHandlerPair.Handler
  fullName: Network.Protocol.OwnerHandlerPair.Handler
  type: Field
  source:
    remote:
      path: source/Network/Protocol/PacketDispatcher.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Handler
    path: ../source/Network/Protocol/PacketDispatcher.cs
    startLine: 157
  assemblies:
  - Network
  namespace: Network.Protocol
  syntax:
    content: public readonly Action<ConnectionBase, Packet> Handler
    return:
      type: System.Action{Network.Infrastructure.ConnectionBase,Network.Protocol.Packet}
    content.vb: Public ReadOnly Handler As Action(Of ConnectionBase, Packet)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Network.Protocol.OwnerHandlerPair.#ctor(System.Object,System.Action{Network.Infrastructure.ConnectionBase,Network.Protocol.Packet})
  commentId: M:Network.Protocol.OwnerHandlerPair.#ctor(System.Object,System.Action{Network.Infrastructure.ConnectionBase,Network.Protocol.Packet})
  id: '#ctor(System.Object,System.Action{Network.Infrastructure.ConnectionBase,Network.Protocol.Packet})'
  parent: Network.Protocol.OwnerHandlerPair
  langs:
  - csharp
  - vb
  name: OwnerHandlerPair(Object, Action<ConnectionBase, Packet>)
  nameWithType: OwnerHandlerPair.OwnerHandlerPair(Object, Action<ConnectionBase, Packet>)
  fullName: Network.Protocol.OwnerHandlerPair.OwnerHandlerPair(System.Object, System.Action<Network.Infrastructure.ConnectionBase, Network.Protocol.Packet>)
  type: Constructor
  source:
    remote:
      path: source/Network/Protocol/PacketDispatcher.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: .ctor
    path: ../source/Network/Protocol/PacketDispatcher.cs
    startLine: 158
  assemblies:
  - Network
  namespace: Network.Protocol
  syntax:
    content: public OwnerHandlerPair(object owner, Action<ConnectionBase, Packet> handler)
    parameters:
    - id: owner
      type: System.Object
    - id: handler
      type: System.Action{Network.Infrastructure.ConnectionBase,Network.Protocol.Packet}
    content.vb: Public Sub New(owner As Object, handler As Action(Of ConnectionBase, Packet))
  overload: Network.Protocol.OwnerHandlerPair.#ctor*
  nameWithType.vb: OwnerHandlerPair.OwnerHandlerPair(Object, Action(Of ConnectionBase, Packet))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Network.Protocol.OwnerHandlerPair.OwnerHandlerPair(System.Object, System.Action(Of Network.Infrastructure.ConnectionBase, Network.Protocol.Packet))
  name.vb: OwnerHandlerPair(Object, Action(Of ConnectionBase, Packet))
- uid: Network.Protocol.OwnerHandlerPair.Equals(System.Object)
  commentId: M:Network.Protocol.OwnerHandlerPair.Equals(System.Object)
  id: Equals(System.Object)
  parent: Network.Protocol.OwnerHandlerPair
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: OwnerHandlerPair.Equals(Object)
  fullName: Network.Protocol.OwnerHandlerPair.Equals(System.Object)
  type: Method
  source:
    remote:
      path: source/Network/Protocol/PacketDispatcher.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Equals
    path: ../source/Network/Protocol/PacketDispatcher.cs
    startLine: 164
  assemblies:
  - Network
  namespace: Network.Protocol
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Network.Protocol.OwnerHandlerPair.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Network.Protocol.OwnerHandlerPair.GetHashCode
  commentId: M:Network.Protocol.OwnerHandlerPair.GetHashCode
  id: GetHashCode
  parent: Network.Protocol.OwnerHandlerPair
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: OwnerHandlerPair.GetHashCode()
  fullName: Network.Protocol.OwnerHandlerPair.GetHashCode()
  type: Method
  source:
    remote:
      path: source/Network/Protocol/PacketDispatcher.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: GetHashCode
    path: ../source/Network/Protocol/PacketDispatcher.cs
    startLine: 171
  assemblies:
  - Network
  namespace: Network.Protocol
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: Network.Protocol.OwnerHandlerPair.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Network.Protocol.OwnerHandlerPair.op_Equality(Network.Protocol.OwnerHandlerPair,Network.Protocol.OwnerHandlerPair)
  commentId: M:Network.Protocol.OwnerHandlerPair.op_Equality(Network.Protocol.OwnerHandlerPair,Network.Protocol.OwnerHandlerPair)
  id: op_Equality(Network.Protocol.OwnerHandlerPair,Network.Protocol.OwnerHandlerPair)
  parent: Network.Protocol.OwnerHandlerPair
  langs:
  - csharp
  - vb
  name: Equality(OwnerHandlerPair, OwnerHandlerPair)
  nameWithType: OwnerHandlerPair.Equality(OwnerHandlerPair, OwnerHandlerPair)
  fullName: Network.Protocol.OwnerHandlerPair.Equality(Network.Protocol.OwnerHandlerPair, Network.Protocol.OwnerHandlerPair)
  type: Operator
  source:
    remote:
      path: source/Network/Protocol/PacketDispatcher.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: op_Equality
    path: ../source/Network/Protocol/PacketDispatcher.cs
    startLine: 178
  assemblies:
  - Network
  namespace: Network.Protocol
  syntax:
    content: public static bool operator ==(OwnerHandlerPair lhs, OwnerHandlerPair rhs)
    parameters:
    - id: lhs
      type: Network.Protocol.OwnerHandlerPair
    - id: rhs
      type: Network.Protocol.OwnerHandlerPair
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(lhs As OwnerHandlerPair, rhs As OwnerHandlerPair) As Boolean
  overload: Network.Protocol.OwnerHandlerPair.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Network.Protocol.OwnerHandlerPair.op_Inequality(Network.Protocol.OwnerHandlerPair,Network.Protocol.OwnerHandlerPair)
  commentId: M:Network.Protocol.OwnerHandlerPair.op_Inequality(Network.Protocol.OwnerHandlerPair,Network.Protocol.OwnerHandlerPair)
  id: op_Inequality(Network.Protocol.OwnerHandlerPair,Network.Protocol.OwnerHandlerPair)
  parent: Network.Protocol.OwnerHandlerPair
  langs:
  - csharp
  - vb
  name: Inequality(OwnerHandlerPair, OwnerHandlerPair)
  nameWithType: OwnerHandlerPair.Inequality(OwnerHandlerPair, OwnerHandlerPair)
  fullName: Network.Protocol.OwnerHandlerPair.Inequality(Network.Protocol.OwnerHandlerPair, Network.Protocol.OwnerHandlerPair)
  type: Operator
  source:
    remote:
      path: source/Network/Protocol/PacketDispatcher.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: op_Inequality
    path: ../source/Network/Protocol/PacketDispatcher.cs
    startLine: 183
  assemblies:
  - Network
  namespace: Network.Protocol
  syntax:
    content: public static bool operator !=(OwnerHandlerPair lhs, OwnerHandlerPair rhs)
    parameters:
    - id: lhs
      type: Network.Protocol.OwnerHandlerPair
    - id: rhs
      type: Network.Protocol.OwnerHandlerPair
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(lhs As OwnerHandlerPair, rhs As OwnerHandlerPair) As Boolean
  overload: Network.Protocol.OwnerHandlerPair.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Network.Protocol
  commentId: N:Network.Protocol
  name: Network.Protocol
  nameWithType: Network.Protocol
  fullName: Network.Protocol
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Action{Network.Infrastructure.ConnectionBase,Network.Protocol.Packet}
  commentId: T:System.Action{Network.Infrastructure.ConnectionBase,Network.Protocol.Packet}
  parent: System
  definition: System.Action`2
  name: Action<ConnectionBase, Packet>
  nameWithType: Action<ConnectionBase, Packet>
  fullName: System.Action<Network.Infrastructure.ConnectionBase, Network.Protocol.Packet>
  nameWithType.vb: Action(Of ConnectionBase, Packet)
  fullName.vb: System.Action(Of Network.Infrastructure.ConnectionBase, Network.Protocol.Packet)
  name.vb: Action(Of ConnectionBase, Packet)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Network.Infrastructure.ConnectionBase
    name: ConnectionBase
    nameWithType: ConnectionBase
    fullName: Network.Infrastructure.ConnectionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Network.Protocol.Packet
    name: Packet
    nameWithType: Packet
    fullName: Network.Protocol.Packet
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Network.Infrastructure.ConnectionBase
    name: ConnectionBase
    nameWithType: ConnectionBase
    fullName: Network.Infrastructure.ConnectionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Network.Protocol.Packet
    name: Packet
    nameWithType: Packet
    fullName: Network.Protocol.Packet
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Network.Protocol.OwnerHandlerPair.#ctor*
  commentId: Overload:Network.Protocol.OwnerHandlerPair.#ctor
  name: OwnerHandlerPair
  nameWithType: OwnerHandlerPair.OwnerHandlerPair
  fullName: Network.Protocol.OwnerHandlerPair.OwnerHandlerPair
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Network.Protocol.OwnerHandlerPair.Equals*
  commentId: Overload:Network.Protocol.OwnerHandlerPair.Equals
  name: Equals
  nameWithType: OwnerHandlerPair.Equals
  fullName: Network.Protocol.OwnerHandlerPair.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Network.Protocol.OwnerHandlerPair.GetHashCode*
  commentId: Overload:Network.Protocol.OwnerHandlerPair.GetHashCode
  name: GetHashCode
  nameWithType: OwnerHandlerPair.GetHashCode
  fullName: Network.Protocol.OwnerHandlerPair.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Network.Protocol.OwnerHandlerPair.op_Equality*
  commentId: Overload:Network.Protocol.OwnerHandlerPair.op_Equality
  name: Equality
  nameWithType: OwnerHandlerPair.Equality
  fullName: Network.Protocol.OwnerHandlerPair.Equality
- uid: Network.Protocol.OwnerHandlerPair
  commentId: T:Network.Protocol.OwnerHandlerPair
  parent: Network.Protocol
  name: OwnerHandlerPair
  nameWithType: OwnerHandlerPair
  fullName: Network.Protocol.OwnerHandlerPair
- uid: Network.Protocol.OwnerHandlerPair.op_Inequality*
  commentId: Overload:Network.Protocol.OwnerHandlerPair.op_Inequality
  name: Inequality
  nameWithType: OwnerHandlerPair.Inequality
  fullName: Network.Protocol.OwnerHandlerPair.Inequality
