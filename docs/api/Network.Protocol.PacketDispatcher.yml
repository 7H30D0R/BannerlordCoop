### YamlMime:ManagedReference
items:
- uid: Network.Protocol.PacketDispatcher
  commentId: T:Network.Protocol.PacketDispatcher
  id: PacketDispatcher
  parent: Network.Protocol
  children:
  - Network.Protocol.PacketDispatcher.Dispatch(Network.Infrastructure.ConnectionBase,Network.Protocol.Packet)
  - Network.Protocol.PacketDispatcher.m_PacketHandlers
  - Network.Protocol.PacketDispatcher.OnDispatch
  - Network.Protocol.PacketDispatcher.RegisterPacketHandler(System.Action{Network.Infrastructure.ConnectionBase,Network.Protocol.Packet})
  - Network.Protocol.PacketDispatcher.RegisterStateMachine(System.Object,Common.CoopStateMachine)
  - Network.Protocol.PacketDispatcher.StateMachines
  - Network.Protocol.PacketDispatcher.UnregisterPacketHandler(System.Action{Network.Infrastructure.ConnectionBase,Network.Protocol.Packet})
  - Network.Protocol.PacketDispatcher.UnregisterPacketHandlers(System.Object)
  langs:
  - csharp
  - vb
  name: PacketDispatcher
  nameWithType: PacketDispatcher
  fullName: Network.Protocol.PacketDispatcher
  type: Class
  source:
    remote:
      path: source/Network/Protocol/PacketDispatcher.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: PacketDispatcher
    path: ../source/Network/Protocol/PacketDispatcher.cs
    startLine: 11
  assemblies:
  - Network
  namespace: Network.Protocol
  syntax:
    content: public class PacketDispatcher
    content.vb: Public Class PacketDispatcher
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Network.Protocol.PacketDispatcher.m_PacketHandlers
  commentId: F:Network.Protocol.PacketDispatcher.m_PacketHandlers
  id: m_PacketHandlers
  parent: Network.Protocol.PacketDispatcher
  langs:
  - csharp
  - vb
  name: m_PacketHandlers
  nameWithType: PacketDispatcher.m_PacketHandlers
  fullName: Network.Protocol.PacketDispatcher.m_PacketHandlers
  type: Field
  source:
    remote:
      path: source/Network/Protocol/PacketDispatcher.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: m_PacketHandlers
    path: ../source/Network/Protocol/PacketDispatcher.cs
    startLine: 14
  assemblies:
  - Network
  namespace: Network.Protocol
  syntax:
    content: readonly Dictionary<StatePacketPair, List<OwnerHandlerPair>> m_PacketHandlers
    return:
      type: System.Collections.Generic.Dictionary{Network.Protocol.StatePacketPair,System.Collections.Generic.List{Network.Protocol.OwnerHandlerPair}}
    content.vb: ReadOnly m_PacketHandlers As Dictionary(Of StatePacketPair, List(Of OwnerHandlerPair))
  modifiers.csharp:
  - readonly
  modifiers.vb:
  - ReadOnly
- uid: Network.Protocol.PacketDispatcher.StateMachines
  commentId: F:Network.Protocol.PacketDispatcher.StateMachines
  id: StateMachines
  parent: Network.Protocol.PacketDispatcher
  langs:
  - csharp
  - vb
  name: StateMachines
  nameWithType: PacketDispatcher.StateMachines
  fullName: Network.Protocol.PacketDispatcher.StateMachines
  type: Field
  source:
    remote:
      path: source/Network/Protocol/PacketDispatcher.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: StateMachines
    path: ../source/Network/Protocol/PacketDispatcher.cs
    startLine: 16
  assemblies:
  - Network
  namespace: Network.Protocol
  syntax:
    content: readonly Dictionary<object, List<CoopStateMachine>> StateMachines
    return:
      type: System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{Common.CoopStateMachine}}
    content.vb: ReadOnly StateMachines As Dictionary(Of Object, List(Of CoopStateMachine))
  modifiers.csharp:
  - readonly
  modifiers.vb:
  - ReadOnly
- uid: Network.Protocol.PacketDispatcher.OnDispatch
  commentId: E:Network.Protocol.PacketDispatcher.OnDispatch
  id: OnDispatch
  parent: Network.Protocol.PacketDispatcher
  langs:
  - csharp
  - vb
  name: OnDispatch
  nameWithType: PacketDispatcher.OnDispatch
  fullName: Network.Protocol.PacketDispatcher.OnDispatch
  type: Event
  source:
    remote:
      path: source/Network/Protocol/PacketDispatcher.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: OnDispatch
    path: ../source/Network/Protocol/PacketDispatcher.cs
    startLine: 18
  assemblies:
  - Network
  namespace: Network.Protocol
  syntax:
    content: public event EventHandler<PacketDispatcher.PacketEventArgs> OnDispatch
    return:
      type: System.EventHandler{Network.Protocol.PacketDispatcher.PacketEventArgs}
    content.vb: Public Event OnDispatch As EventHandler(Of PacketDispatcher.PacketEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Network.Protocol.PacketDispatcher.RegisterPacketHandler(System.Action{Network.Infrastructure.ConnectionBase,Network.Protocol.Packet})
  commentId: M:Network.Protocol.PacketDispatcher.RegisterPacketHandler(System.Action{Network.Infrastructure.ConnectionBase,Network.Protocol.Packet})
  id: RegisterPacketHandler(System.Action{Network.Infrastructure.ConnectionBase,Network.Protocol.Packet})
  parent: Network.Protocol.PacketDispatcher
  langs:
  - csharp
  - vb
  name: RegisterPacketHandler(Action<ConnectionBase, Packet>)
  nameWithType: PacketDispatcher.RegisterPacketHandler(Action<ConnectionBase, Packet>)
  fullName: Network.Protocol.PacketDispatcher.RegisterPacketHandler(System.Action<Network.Infrastructure.ConnectionBase, Network.Protocol.Packet>)
  type: Method
  source:
    remote:
      path: source/Network/Protocol/PacketDispatcher.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: RegisterPacketHandler
    path: ../source/Network/Protocol/PacketDispatcher.cs
    startLine: 20
  assemblies:
  - Network
  namespace: Network.Protocol
  syntax:
    content: public void RegisterPacketHandler(Action<ConnectionBase, Packet> handler)
    parameters:
    - id: handler
      type: System.Action{Network.Infrastructure.ConnectionBase,Network.Protocol.Packet}
    content.vb: Public Sub RegisterPacketHandler(handler As Action(Of ConnectionBase, Packet))
  overload: Network.Protocol.PacketDispatcher.RegisterPacketHandler*
  nameWithType.vb: PacketDispatcher.RegisterPacketHandler(Action(Of ConnectionBase, Packet))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Network.Protocol.PacketDispatcher.RegisterPacketHandler(System.Action(Of Network.Infrastructure.ConnectionBase, Network.Protocol.Packet))
  name.vb: RegisterPacketHandler(Action(Of ConnectionBase, Packet))
- uid: Network.Protocol.PacketDispatcher.RegisterStateMachine(System.Object,Common.CoopStateMachine)
  commentId: M:Network.Protocol.PacketDispatcher.RegisterStateMachine(System.Object,Common.CoopStateMachine)
  id: RegisterStateMachine(System.Object,Common.CoopStateMachine)
  parent: Network.Protocol.PacketDispatcher
  langs:
  - csharp
  - vb
  name: RegisterStateMachine(Object, CoopStateMachine)
  nameWithType: PacketDispatcher.RegisterStateMachine(Object, CoopStateMachine)
  fullName: Network.Protocol.PacketDispatcher.RegisterStateMachine(System.Object, Common.CoopStateMachine)
  type: Method
  source:
    remote:
      path: source/Network/Protocol/PacketDispatcher.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: RegisterStateMachine
    path: ../source/Network/Protocol/PacketDispatcher.cs
    startLine: 56
  assemblies:
  - Network
  namespace: Network.Protocol
  summary: "\nRegisters <xref href=\"Common.CoopStateMachine\" data-throw-if-not-resolved=\"false\"></xref> to reference state\n"
  example: []
  syntax:
    content: public void RegisterStateMachine(object owner, CoopStateMachine stateMachine)
    parameters:
    - id: owner
      type: System.Object
      description: Assign owner
    - id: stateMachine
      type: Common.CoopStateMachine
      description: State machine to register
    content.vb: Public Sub RegisterStateMachine(owner As Object, stateMachine As CoopStateMachine)
  overload: Network.Protocol.PacketDispatcher.RegisterStateMachine*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Network.Protocol.PacketDispatcher.UnregisterPacketHandler(System.Action{Network.Infrastructure.ConnectionBase,Network.Protocol.Packet})
  commentId: M:Network.Protocol.PacketDispatcher.UnregisterPacketHandler(System.Action{Network.Infrastructure.ConnectionBase,Network.Protocol.Packet})
  id: UnregisterPacketHandler(System.Action{Network.Infrastructure.ConnectionBase,Network.Protocol.Packet})
  parent: Network.Protocol.PacketDispatcher
  langs:
  - csharp
  - vb
  name: UnregisterPacketHandler(Action<ConnectionBase, Packet>)
  nameWithType: PacketDispatcher.UnregisterPacketHandler(Action<ConnectionBase, Packet>)
  fullName: Network.Protocol.PacketDispatcher.UnregisterPacketHandler(System.Action<Network.Infrastructure.ConnectionBase, Network.Protocol.Packet>)
  type: Method
  source:
    remote:
      path: source/Network/Protocol/PacketDispatcher.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: UnregisterPacketHandler
    path: ../source/Network/Protocol/PacketDispatcher.cs
    startLine: 68
  assemblies:
  - Network
  namespace: Network.Protocol
  syntax:
    content: public void UnregisterPacketHandler(Action<ConnectionBase, Packet> handler)
    parameters:
    - id: handler
      type: System.Action{Network.Infrastructure.ConnectionBase,Network.Protocol.Packet}
    content.vb: Public Sub UnregisterPacketHandler(handler As Action(Of ConnectionBase, Packet))
  overload: Network.Protocol.PacketDispatcher.UnregisterPacketHandler*
  nameWithType.vb: PacketDispatcher.UnregisterPacketHandler(Action(Of ConnectionBase, Packet))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Network.Protocol.PacketDispatcher.UnregisterPacketHandler(System.Action(Of Network.Infrastructure.ConnectionBase, Network.Protocol.Packet))
  name.vb: UnregisterPacketHandler(Action(Of ConnectionBase, Packet))
- uid: Network.Protocol.PacketDispatcher.UnregisterPacketHandlers(System.Object)
  commentId: M:Network.Protocol.PacketDispatcher.UnregisterPacketHandlers(System.Object)
  id: UnregisterPacketHandlers(System.Object)
  parent: Network.Protocol.PacketDispatcher
  langs:
  - csharp
  - vb
  name: UnregisterPacketHandlers(Object)
  nameWithType: PacketDispatcher.UnregisterPacketHandlers(Object)
  fullName: Network.Protocol.PacketDispatcher.UnregisterPacketHandlers(System.Object)
  type: Method
  source:
    remote:
      path: source/Network/Protocol/PacketDispatcher.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: UnregisterPacketHandlers
    path: ../source/Network/Protocol/PacketDispatcher.cs
    startLine: 76
  assemblies:
  - Network
  namespace: Network.Protocol
  syntax:
    content: public void UnregisterPacketHandlers(object owner)
    parameters:
    - id: owner
      type: System.Object
    content.vb: Public Sub UnregisterPacketHandlers(owner As Object)
  overload: Network.Protocol.PacketDispatcher.UnregisterPacketHandlers*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Network.Protocol.PacketDispatcher.Dispatch(Network.Infrastructure.ConnectionBase,Network.Protocol.Packet)
  commentId: M:Network.Protocol.PacketDispatcher.Dispatch(Network.Infrastructure.ConnectionBase,Network.Protocol.Packet)
  id: Dispatch(Network.Infrastructure.ConnectionBase,Network.Protocol.Packet)
  parent: Network.Protocol.PacketDispatcher
  langs:
  - csharp
  - vb
  name: Dispatch(ConnectionBase, Packet)
  nameWithType: PacketDispatcher.Dispatch(ConnectionBase, Packet)
  fullName: Network.Protocol.PacketDispatcher.Dispatch(Network.Infrastructure.ConnectionBase, Network.Protocol.Packet)
  type: Method
  source:
    remote:
      path: source/Network/Protocol/PacketDispatcher.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Dispatch
    path: ../source/Network/Protocol/PacketDispatcher.cs
    startLine: 85
  assemblies:
  - Network
  namespace: Network.Protocol
  syntax:
    content: public void Dispatch(ConnectionBase connection, Packet packet)
    parameters:
    - id: connection
      type: Network.Infrastructure.ConnectionBase
    - id: packet
      type: Network.Protocol.Packet
    content.vb: Public Sub Dispatch(connection As ConnectionBase, packet As Packet)
  overload: Network.Protocol.PacketDispatcher.Dispatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Network.Protocol
  commentId: N:Network.Protocol
  name: Network.Protocol
  nameWithType: Network.Protocol
  fullName: Network.Protocol
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.Dictionary{Network.Protocol.StatePacketPair,System.Collections.Generic.List{Network.Protocol.OwnerHandlerPair}}
  commentId: T:System.Collections.Generic.Dictionary{Network.Protocol.StatePacketPair,System.Collections.Generic.List{Network.Protocol.OwnerHandlerPair}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<StatePacketPair, List<OwnerHandlerPair>>
  nameWithType: Dictionary<StatePacketPair, List<OwnerHandlerPair>>
  fullName: System.Collections.Generic.Dictionary<Network.Protocol.StatePacketPair, System.Collections.Generic.List<Network.Protocol.OwnerHandlerPair>>
  nameWithType.vb: Dictionary(Of StatePacketPair, List(Of OwnerHandlerPair))
  fullName.vb: System.Collections.Generic.Dictionary(Of Network.Protocol.StatePacketPair, System.Collections.Generic.List(Of Network.Protocol.OwnerHandlerPair))
  name.vb: Dictionary(Of StatePacketPair, List(Of OwnerHandlerPair))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Network.Protocol.StatePacketPair
    name: StatePacketPair
    nameWithType: StatePacketPair
    fullName: Network.Protocol.StatePacketPair
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Network.Protocol.OwnerHandlerPair
    name: OwnerHandlerPair
    nameWithType: OwnerHandlerPair
    fullName: Network.Protocol.OwnerHandlerPair
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Network.Protocol.StatePacketPair
    name: StatePacketPair
    nameWithType: StatePacketPair
    fullName: Network.Protocol.StatePacketPair
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Network.Protocol.OwnerHandlerPair
    name: OwnerHandlerPair
    nameWithType: OwnerHandlerPair
    fullName: Network.Protocol.OwnerHandlerPair
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{Common.CoopStateMachine}}
  commentId: T:System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{Common.CoopStateMachine}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Object, List<CoopStateMachine>>
  nameWithType: Dictionary<Object, List<CoopStateMachine>>
  fullName: System.Collections.Generic.Dictionary<System.Object, System.Collections.Generic.List<Common.CoopStateMachine>>
  nameWithType.vb: Dictionary(Of Object, List(Of CoopStateMachine))
  fullName.vb: System.Collections.Generic.Dictionary(Of System.Object, System.Collections.Generic.List(Of Common.CoopStateMachine))
  name.vb: Dictionary(Of Object, List(Of CoopStateMachine))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Common.CoopStateMachine
    name: CoopStateMachine
    nameWithType: CoopStateMachine
    fullName: Common.CoopStateMachine
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Common.CoopStateMachine
    name: CoopStateMachine
    nameWithType: CoopStateMachine
    fullName: Common.CoopStateMachine
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler{Network.Protocol.PacketDispatcher.PacketEventArgs}
  commentId: T:System.EventHandler{Network.Protocol.PacketDispatcher.PacketEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<PacketDispatcher.PacketEventArgs>
  nameWithType: EventHandler<PacketDispatcher.PacketEventArgs>
  fullName: System.EventHandler<Network.Protocol.PacketDispatcher.PacketEventArgs>
  nameWithType.vb: EventHandler(Of PacketDispatcher.PacketEventArgs)
  fullName.vb: System.EventHandler(Of Network.Protocol.PacketDispatcher.PacketEventArgs)
  name.vb: EventHandler(Of PacketDispatcher.PacketEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Network.Protocol.PacketDispatcher.PacketEventArgs
    name: PacketDispatcher.PacketEventArgs
    nameWithType: PacketDispatcher.PacketEventArgs
    fullName: Network.Protocol.PacketDispatcher.PacketEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Network.Protocol.PacketDispatcher.PacketEventArgs
    name: PacketDispatcher.PacketEventArgs
    nameWithType: PacketDispatcher.PacketEventArgs
    fullName: Network.Protocol.PacketDispatcher.PacketEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Network.Protocol.PacketDispatcher.RegisterPacketHandler*
  commentId: Overload:Network.Protocol.PacketDispatcher.RegisterPacketHandler
  name: RegisterPacketHandler
  nameWithType: PacketDispatcher.RegisterPacketHandler
  fullName: Network.Protocol.PacketDispatcher.RegisterPacketHandler
- uid: System.Action{Network.Infrastructure.ConnectionBase,Network.Protocol.Packet}
  commentId: T:System.Action{Network.Infrastructure.ConnectionBase,Network.Protocol.Packet}
  parent: System
  definition: System.Action`2
  name: Action<ConnectionBase, Packet>
  nameWithType: Action<ConnectionBase, Packet>
  fullName: System.Action<Network.Infrastructure.ConnectionBase, Network.Protocol.Packet>
  nameWithType.vb: Action(Of ConnectionBase, Packet)
  fullName.vb: System.Action(Of Network.Infrastructure.ConnectionBase, Network.Protocol.Packet)
  name.vb: Action(Of ConnectionBase, Packet)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Network.Infrastructure.ConnectionBase
    name: ConnectionBase
    nameWithType: ConnectionBase
    fullName: Network.Infrastructure.ConnectionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Network.Protocol.Packet
    name: Packet
    nameWithType: Packet
    fullName: Network.Protocol.Packet
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Network.Infrastructure.ConnectionBase
    name: ConnectionBase
    nameWithType: ConnectionBase
    fullName: Network.Infrastructure.ConnectionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Network.Protocol.Packet
    name: Packet
    nameWithType: Packet
    fullName: Network.Protocol.Packet
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Common.CoopStateMachine
  commentId: T:Common.CoopStateMachine
  parent: Common
  name: CoopStateMachine
  nameWithType: CoopStateMachine
  fullName: Common.CoopStateMachine
- uid: Network.Protocol.PacketDispatcher.RegisterStateMachine*
  commentId: Overload:Network.Protocol.PacketDispatcher.RegisterStateMachine
  name: RegisterStateMachine
  nameWithType: PacketDispatcher.RegisterStateMachine
  fullName: Network.Protocol.PacketDispatcher.RegisterStateMachine
- uid: Common
  commentId: N:Common
  name: Common
  nameWithType: Common
  fullName: Common
- uid: Network.Protocol.PacketDispatcher.UnregisterPacketHandler*
  commentId: Overload:Network.Protocol.PacketDispatcher.UnregisterPacketHandler
  name: UnregisterPacketHandler
  nameWithType: PacketDispatcher.UnregisterPacketHandler
  fullName: Network.Protocol.PacketDispatcher.UnregisterPacketHandler
- uid: Network.Protocol.PacketDispatcher.UnregisterPacketHandlers*
  commentId: Overload:Network.Protocol.PacketDispatcher.UnregisterPacketHandlers
  name: UnregisterPacketHandlers
  nameWithType: PacketDispatcher.UnregisterPacketHandlers
  fullName: Network.Protocol.PacketDispatcher.UnregisterPacketHandlers
- uid: Network.Protocol.PacketDispatcher.Dispatch*
  commentId: Overload:Network.Protocol.PacketDispatcher.Dispatch
  name: Dispatch
  nameWithType: PacketDispatcher.Dispatch
  fullName: Network.Protocol.PacketDispatcher.Dispatch
- uid: Network.Infrastructure.ConnectionBase
  commentId: T:Network.Infrastructure.ConnectionBase
  parent: Network.Infrastructure
  name: ConnectionBase
  nameWithType: ConnectionBase
  fullName: Network.Infrastructure.ConnectionBase
- uid: Network.Protocol.Packet
  commentId: T:Network.Protocol.Packet
  parent: Network.Protocol
  name: Packet
  nameWithType: Packet
  fullName: Network.Protocol.Packet
- uid: Network.Infrastructure
  commentId: N:Network.Infrastructure
  name: Network.Infrastructure
  nameWithType: Network.Infrastructure
  fullName: Network.Infrastructure
