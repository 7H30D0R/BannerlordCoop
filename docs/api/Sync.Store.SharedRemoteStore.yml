### YamlMime:ManagedReference
items:
- uid: Sync.Store.SharedRemoteStore
  commentId: T:Sync.Store.SharedRemoteStore
  id: SharedRemoteStore
  parent: Sync.Store
  children:
  - Sync.Store.SharedRemoteStore.#ctor(Sync.Store.ISerializableFactory)
  - Sync.Store.SharedRemoteStore.AddConnection(Network.Infrastructure.ConnectionBase)
  - Sync.Store.SharedRemoteStore.Data
  - Sync.Store.SharedRemoteStore.Insert(System.Object)
  - Sync.Store.SharedRemoteStore.Logger
  - Sync.Store.SharedRemoteStore.m_Data
  - Sync.Store.SharedRemoteStore.m_PendingAcks
  - Sync.Store.SharedRemoteStore.m_Serializer
  - Sync.Store.SharedRemoteStore.m_Stores
  - Sync.Store.SharedRemoteStore.ObjectAcknowledged(Network.Infrastructure.ConnectionBase,Sync.Store.ObjectId)
  - Sync.Store.SharedRemoteStore.OnObjectDistributed
  - Sync.Store.SharedRemoteStore.RemoteObjectAdded(Network.Infrastructure.ConnectionBase,Sync.Store.ObjectId,System.Byte[],System.Object)
  - Sync.Store.SharedRemoteStore.Remove(Sync.Store.ObjectId)
  - Sync.Store.SharedRemoteStore.RemoveConnection(Network.Infrastructure.ConnectionBase)
  langs:
  - csharp
  - vb
  name: SharedRemoteStore
  nameWithType: SharedRemoteStore
  fullName: Sync.Store.SharedRemoteStore
  type: Class
  source:
    remote:
      path: source/Sync/Store/SharedRemoteStore.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: SharedRemoteStore
    path: ../source/Sync/Store/SharedRemoteStore.cs
    startLine: 13
  assemblies:
  - Sync
  namespace: Sync.Store
  summary: "\nImplements a store that is synchronized to multiple remote stores trough different connections.\n"
  example: []
  syntax:
    content: 'public class SharedRemoteStore : IStore'
    content.vb: >-
      Public Class SharedRemoteStore

          Implements IStore
  inheritance:
  - System.Object
  implements:
  - Sync.Store.IStore
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sync.Store.SharedRemoteStore.Logger
  commentId: F:Sync.Store.SharedRemoteStore.Logger
  id: Logger
  parent: Sync.Store.SharedRemoteStore
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: SharedRemoteStore.Logger
  fullName: Sync.Store.SharedRemoteStore.Logger
  type: Field
  source:
    remote:
      path: source/Sync/Store/SharedRemoteStore.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Logger
    path: ../source/Sync/Store/SharedRemoteStore.cs
    startLine: 15
  assemblies:
  - Sync
  namespace: Sync.Store
  syntax:
    content: static readonly Logger Logger
    return:
      type: NLog.Logger
    content.vb: Shared ReadOnly Logger As Logger
  modifiers.csharp:
  - static
  - readonly
  modifiers.vb:
  - Shared
  - ReadOnly
- uid: Sync.Store.SharedRemoteStore.m_Data
  commentId: F:Sync.Store.SharedRemoteStore.m_Data
  id: m_Data
  parent: Sync.Store.SharedRemoteStore
  langs:
  - csharp
  - vb
  name: m_Data
  nameWithType: SharedRemoteStore.m_Data
  fullName: Sync.Store.SharedRemoteStore.m_Data
  type: Field
  source:
    remote:
      path: source/Sync/Store/SharedRemoteStore.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: m_Data
    path: ../source/Sync/Store/SharedRemoteStore.cs
    startLine: 16
  assemblies:
  - Sync
  namespace: Sync.Store
  syntax:
    content: readonly Dictionary<ObjectId, object> m_Data
    return:
      type: System.Collections.Generic.Dictionary{Sync.Store.ObjectId,System.Object}
    content.vb: ReadOnly m_Data As Dictionary(Of ObjectId, Object)
  modifiers.csharp:
  - readonly
  modifiers.vb:
  - ReadOnly
- uid: Sync.Store.SharedRemoteStore.m_PendingAcks
  commentId: F:Sync.Store.SharedRemoteStore.m_PendingAcks
  id: m_PendingAcks
  parent: Sync.Store.SharedRemoteStore
  langs:
  - csharp
  - vb
  name: m_PendingAcks
  nameWithType: SharedRemoteStore.m_PendingAcks
  fullName: Sync.Store.SharedRemoteStore.m_PendingAcks
  type: Field
  source:
    remote:
      path: source/Sync/Store/SharedRemoteStore.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: m_PendingAcks
    path: ../source/Sync/Store/SharedRemoteStore.cs
    startLine: 18
  assemblies:
  - Sync
  namespace: Sync.Store
  syntax:
    content: readonly Dictionary<ObjectId, SharedRemoteStore.PendingResponse> m_PendingAcks
    return:
      type: System.Collections.Generic.Dictionary{Sync.Store.ObjectId,Sync.Store.SharedRemoteStore.PendingResponse}
    content.vb: ReadOnly m_PendingAcks As Dictionary(Of ObjectId, SharedRemoteStore.PendingResponse)
  modifiers.csharp:
  - readonly
  modifiers.vb:
  - ReadOnly
- uid: Sync.Store.SharedRemoteStore.m_Serializer
  commentId: F:Sync.Store.SharedRemoteStore.m_Serializer
  id: m_Serializer
  parent: Sync.Store.SharedRemoteStore
  langs:
  - csharp
  - vb
  name: m_Serializer
  nameWithType: SharedRemoteStore.m_Serializer
  fullName: Sync.Store.SharedRemoteStore.m_Serializer
  type: Field
  source:
    remote:
      path: source/Sync/Store/SharedRemoteStore.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: m_Serializer
    path: ../source/Sync/Store/SharedRemoteStore.cs
    startLine: 21
  assemblies:
  - Sync
  namespace: Sync.Store
  syntax:
    content: readonly StoreSerializer m_Serializer
    return:
      type: Sync.Store.StoreSerializer
    content.vb: ReadOnly m_Serializer As StoreSerializer
  modifiers.csharp:
  - readonly
  modifiers.vb:
  - ReadOnly
- uid: Sync.Store.SharedRemoteStore.m_Stores
  commentId: F:Sync.Store.SharedRemoteStore.m_Stores
  id: m_Stores
  parent: Sync.Store.SharedRemoteStore
  langs:
  - csharp
  - vb
  name: m_Stores
  nameWithType: SharedRemoteStore.m_Stores
  fullName: Sync.Store.SharedRemoteStore.m_Stores
  type: Field
  source:
    remote:
      path: source/Sync/Store/SharedRemoteStore.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: m_Stores
    path: ../source/Sync/Store/SharedRemoteStore.cs
    startLine: 23
  assemblies:
  - Sync
  namespace: Sync.Store
  syntax:
    content: readonly Dictionary<ConnectionBase, RemoteStore> m_Stores
    return:
      type: System.Collections.Generic.Dictionary{Network.Infrastructure.ConnectionBase,Sync.Store.RemoteStore}
    content.vb: ReadOnly m_Stores As Dictionary(Of ConnectionBase, RemoteStore)
  modifiers.csharp:
  - readonly
  modifiers.vb:
  - ReadOnly
- uid: Sync.Store.SharedRemoteStore.OnObjectDistributed
  commentId: F:Sync.Store.SharedRemoteStore.OnObjectDistributed
  id: OnObjectDistributed
  parent: Sync.Store.SharedRemoteStore
  langs:
  - csharp
  - vb
  name: OnObjectDistributed
  nameWithType: SharedRemoteStore.OnObjectDistributed
  fullName: Sync.Store.SharedRemoteStore.OnObjectDistributed
  type: Field
  source:
    remote:
      path: source/Sync/Store/SharedRemoteStore.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: OnObjectDistributed
    path: ../source/Sync/Store/SharedRemoteStore.cs
    startLine: 29
  assemblies:
  - Sync
  namespace: Sync.Store
  summary: "\nTriggered when an object has been distributed to all clients.\n"
  example: []
  syntax:
    content: public Action<ObjectId> OnObjectDistributed
    return:
      type: System.Action{Sync.Store.ObjectId}
    content.vb: Public OnObjectDistributed As Action(Of ObjectId)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sync.Store.SharedRemoteStore.#ctor(Sync.Store.ISerializableFactory)
  commentId: M:Sync.Store.SharedRemoteStore.#ctor(Sync.Store.ISerializableFactory)
  id: '#ctor(Sync.Store.ISerializableFactory)'
  parent: Sync.Store.SharedRemoteStore
  langs:
  - csharp
  - vb
  name: SharedRemoteStore(ISerializableFactory)
  nameWithType: SharedRemoteStore.SharedRemoteStore(ISerializableFactory)
  fullName: Sync.Store.SharedRemoteStore.SharedRemoteStore(Sync.Store.ISerializableFactory)
  type: Constructor
  source:
    remote:
      path: source/Sync/Store/SharedRemoteStore.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: .ctor
    path: ../source/Sync/Store/SharedRemoteStore.cs
    startLine: 31
  assemblies:
  - Sync
  namespace: Sync.Store
  syntax:
    content: public SharedRemoteStore([NotNull] ISerializableFactory serializableFactory)
    parameters:
    - id: serializableFactory
      type: Sync.Store.ISerializableFactory
      attributes:
      - type: JetBrains.Annotations.NotNullAttribute
        ctor: JetBrains.Annotations.NotNullAttribute.#ctor
        arguments: []
    content.vb: Public Sub New(serializableFactory As ISerializableFactory)
  overload: Sync.Store.SharedRemoteStore.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sync.Store.SharedRemoteStore.Insert(System.Object)
  commentId: M:Sync.Store.SharedRemoteStore.Insert(System.Object)
  id: Insert(System.Object)
  parent: Sync.Store.SharedRemoteStore
  langs:
  - csharp
  - vb
  name: Insert(Object)
  nameWithType: SharedRemoteStore.Insert(Object)
  fullName: Sync.Store.SharedRemoteStore.Insert(System.Object)
  type: Method
  source:
    remote:
      path: source/Sync/Store/SharedRemoteStore.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Insert
    path: ../source/Sync/Store/SharedRemoteStore.cs
    startLine: 36
  assemblies:
  - Sync
  namespace: Sync.Store
  syntax:
    content: public ObjectId Insert(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: Sync.Store.ObjectId
    content.vb: Public Function Insert(obj As Object) As ObjectId
  overload: Sync.Store.SharedRemoteStore.Insert*
  implements:
  - Sync.Store.IStore.Insert(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sync.Store.SharedRemoteStore.Remove(Sync.Store.ObjectId)
  commentId: M:Sync.Store.SharedRemoteStore.Remove(Sync.Store.ObjectId)
  id: Remove(Sync.Store.ObjectId)
  parent: Sync.Store.SharedRemoteStore
  langs:
  - csharp
  - vb
  name: Remove(ObjectId)
  nameWithType: SharedRemoteStore.Remove(ObjectId)
  fullName: Sync.Store.SharedRemoteStore.Remove(Sync.Store.ObjectId)
  type: Method
  source:
    remote:
      path: source/Sync/Store/SharedRemoteStore.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Remove
    path: ../source/Sync/Store/SharedRemoteStore.cs
    startLine: 52
  assemblies:
  - Sync
  namespace: Sync.Store
  syntax:
    content: public bool Remove(ObjectId id)
    parameters:
    - id: id
      type: Sync.Store.ObjectId
    return:
      type: System.Boolean
    content.vb: Public Function Remove(id As ObjectId) As Boolean
  overload: Sync.Store.SharedRemoteStore.Remove*
  implements:
  - Sync.Store.IStore.Remove(Sync.Store.ObjectId)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sync.Store.SharedRemoteStore.Data
  commentId: P:Sync.Store.SharedRemoteStore.Data
  id: Data
  parent: Sync.Store.SharedRemoteStore
  langs:
  - csharp
  - vb
  name: Data
  nameWithType: SharedRemoteStore.Data
  fullName: Sync.Store.SharedRemoteStore.Data
  type: Property
  source:
    remote:
      path: source/Sync/Store/SharedRemoteStore.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Data
    path: ../source/Sync/Store/SharedRemoteStore.cs
    startLine: 65
  assemblies:
  - Sync
  namespace: Sync.Store
  syntax:
    content: public IReadOnlyDictionary<ObjectId, object> Data { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyDictionary{Sync.Store.ObjectId,System.Object}
    content.vb: Public ReadOnly Property Data As IReadOnlyDictionary(Of ObjectId, Object)
  overload: Sync.Store.SharedRemoteStore.Data*
  implements:
  - Sync.Store.IStore.Data
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sync.Store.SharedRemoteStore.AddConnection(Network.Infrastructure.ConnectionBase)
  commentId: M:Sync.Store.SharedRemoteStore.AddConnection(Network.Infrastructure.ConnectionBase)
  id: AddConnection(Network.Infrastructure.ConnectionBase)
  parent: Sync.Store.SharedRemoteStore
  langs:
  - csharp
  - vb
  name: AddConnection(ConnectionBase)
  nameWithType: SharedRemoteStore.AddConnection(ConnectionBase)
  fullName: Sync.Store.SharedRemoteStore.AddConnection(Network.Infrastructure.ConnectionBase)
  type: Method
  source:
    remote:
      path: source/Sync/Store/SharedRemoteStore.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: AddConnection
    path: ../source/Sync/Store/SharedRemoteStore.cs
    startLine: 67
  assemblies:
  - Sync
  namespace: Sync.Store
  syntax:
    content: public void AddConnection(ConnectionBase connection)
    parameters:
    - id: connection
      type: Network.Infrastructure.ConnectionBase
    content.vb: Public Sub AddConnection(connection As ConnectionBase)
  overload: Sync.Store.SharedRemoteStore.AddConnection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sync.Store.SharedRemoteStore.ObjectAcknowledged(Network.Infrastructure.ConnectionBase,Sync.Store.ObjectId)
  commentId: M:Sync.Store.SharedRemoteStore.ObjectAcknowledged(Network.Infrastructure.ConnectionBase,Sync.Store.ObjectId)
  id: ObjectAcknowledged(Network.Infrastructure.ConnectionBase,Sync.Store.ObjectId)
  parent: Sync.Store.SharedRemoteStore
  langs:
  - csharp
  - vb
  name: ObjectAcknowledged(ConnectionBase, ObjectId)
  nameWithType: SharedRemoteStore.ObjectAcknowledged(ConnectionBase, ObjectId)
  fullName: Sync.Store.SharedRemoteStore.ObjectAcknowledged(Network.Infrastructure.ConnectionBase, Sync.Store.ObjectId)
  type: Method
  source:
    remote:
      path: source/Sync/Store/SharedRemoteStore.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: ObjectAcknowledged
    path: ../source/Sync/Store/SharedRemoteStore.cs
    startLine: 82
  assemblies:
  - Sync
  namespace: Sync.Store
  syntax:
    content: void ObjectAcknowledged(ConnectionBase sender, ObjectId id)
    parameters:
    - id: sender
      type: Network.Infrastructure.ConnectionBase
    - id: id
      type: Sync.Store.ObjectId
    content.vb: Sub ObjectAcknowledged(sender As ConnectionBase, id As ObjectId)
  overload: Sync.Store.SharedRemoteStore.ObjectAcknowledged*
- uid: Sync.Store.SharedRemoteStore.RemoteObjectAdded(Network.Infrastructure.ConnectionBase,Sync.Store.ObjectId,System.Byte[],System.Object)
  commentId: M:Sync.Store.SharedRemoteStore.RemoteObjectAdded(Network.Infrastructure.ConnectionBase,Sync.Store.ObjectId,System.Byte[],System.Object)
  id: RemoteObjectAdded(Network.Infrastructure.ConnectionBase,Sync.Store.ObjectId,System.Byte[],System.Object)
  parent: Sync.Store.SharedRemoteStore
  langs:
  - csharp
  - vb
  name: RemoteObjectAdded(ConnectionBase, ObjectId, Byte[], Object)
  nameWithType: SharedRemoteStore.RemoteObjectAdded(ConnectionBase, ObjectId, Byte[], Object)
  fullName: Sync.Store.SharedRemoteStore.RemoteObjectAdded(Network.Infrastructure.ConnectionBase, Sync.Store.ObjectId, System.Byte[], System.Object)
  type: Method
  source:
    remote:
      path: source/Sync/Store/SharedRemoteStore.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: RemoteObjectAdded
    path: ../source/Sync/Store/SharedRemoteStore.cs
    startLine: 110
  assemblies:
  - Sync
  namespace: Sync.Store
  syntax:
    content: bool RemoteObjectAdded(ConnectionBase sender, ObjectId id, byte[] payload, object obj)
    parameters:
    - id: sender
      type: Network.Infrastructure.ConnectionBase
    - id: id
      type: Sync.Store.ObjectId
    - id: payload
      type: System.Byte[]
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Function RemoteObjectAdded(sender As ConnectionBase, id As ObjectId, payload As Byte(), obj As Object) As Boolean
  overload: Sync.Store.SharedRemoteStore.RemoteObjectAdded*
  nameWithType.vb: SharedRemoteStore.RemoteObjectAdded(ConnectionBase, ObjectId, Byte(), Object)
  fullName.vb: Sync.Store.SharedRemoteStore.RemoteObjectAdded(Network.Infrastructure.ConnectionBase, Sync.Store.ObjectId, System.Byte(), System.Object)
  name.vb: RemoteObjectAdded(ConnectionBase, ObjectId, Byte(), Object)
- uid: Sync.Store.SharedRemoteStore.RemoveConnection(Network.Infrastructure.ConnectionBase)
  commentId: M:Sync.Store.SharedRemoteStore.RemoveConnection(Network.Infrastructure.ConnectionBase)
  id: RemoveConnection(Network.Infrastructure.ConnectionBase)
  parent: Sync.Store.SharedRemoteStore
  langs:
  - csharp
  - vb
  name: RemoveConnection(ConnectionBase)
  nameWithType: SharedRemoteStore.RemoveConnection(ConnectionBase)
  fullName: Sync.Store.SharedRemoteStore.RemoveConnection(Network.Infrastructure.ConnectionBase)
  type: Method
  source:
    remote:
      path: source/Sync/Store/SharedRemoteStore.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: RemoveConnection
    path: ../source/Sync/Store/SharedRemoteStore.cs
    startLine: 141
  assemblies:
  - Sync
  namespace: Sync.Store
  syntax:
    content: public void RemoveConnection(ConnectionBase connection)
    parameters:
    - id: connection
      type: Network.Infrastructure.ConnectionBase
    content.vb: Public Sub RemoveConnection(connection As ConnectionBase)
  overload: Sync.Store.SharedRemoteStore.RemoveConnection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Sync.Store
  commentId: N:Sync.Store
  name: Sync.Store
  nameWithType: Sync.Store
  fullName: Sync.Store
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Sync.Store.IStore
  commentId: T:Sync.Store.IStore
  parent: Sync.Store
  name: IStore
  nameWithType: IStore
  fullName: Sync.Store.IStore
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NLog.Logger
  commentId: T:NLog.Logger
  parent: NLog
  isExternal: true
  name: Logger
  nameWithType: Logger
  fullName: NLog.Logger
- uid: NLog
  commentId: N:NLog
  isExternal: true
  name: NLog
  nameWithType: NLog
  fullName: NLog
- uid: System.Collections.Generic.Dictionary{Sync.Store.ObjectId,System.Object}
  commentId: T:System.Collections.Generic.Dictionary{Sync.Store.ObjectId,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<ObjectId, Object>
  nameWithType: Dictionary<ObjectId, Object>
  fullName: System.Collections.Generic.Dictionary<Sync.Store.ObjectId, System.Object>
  nameWithType.vb: Dictionary(Of ObjectId, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of Sync.Store.ObjectId, System.Object)
  name.vb: Dictionary(Of ObjectId, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sync.Store.ObjectId
    name: ObjectId
    nameWithType: ObjectId
    fullName: Sync.Store.ObjectId
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sync.Store.ObjectId
    name: ObjectId
    nameWithType: ObjectId
    fullName: Sync.Store.ObjectId
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.Dictionary{Sync.Store.ObjectId,Sync.Store.SharedRemoteStore.PendingResponse}
  commentId: T:System.Collections.Generic.Dictionary{Sync.Store.ObjectId,Sync.Store.SharedRemoteStore.PendingResponse}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<ObjectId, SharedRemoteStore.PendingResponse>
  nameWithType: Dictionary<ObjectId, SharedRemoteStore.PendingResponse>
  fullName: System.Collections.Generic.Dictionary<Sync.Store.ObjectId, Sync.Store.SharedRemoteStore.PendingResponse>
  nameWithType.vb: Dictionary(Of ObjectId, SharedRemoteStore.PendingResponse)
  fullName.vb: System.Collections.Generic.Dictionary(Of Sync.Store.ObjectId, Sync.Store.SharedRemoteStore.PendingResponse)
  name.vb: Dictionary(Of ObjectId, SharedRemoteStore.PendingResponse)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sync.Store.ObjectId
    name: ObjectId
    nameWithType: ObjectId
    fullName: Sync.Store.ObjectId
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sync.Store.SharedRemoteStore.PendingResponse
    name: SharedRemoteStore.PendingResponse
    nameWithType: SharedRemoteStore.PendingResponse
    fullName: Sync.Store.SharedRemoteStore.PendingResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sync.Store.ObjectId
    name: ObjectId
    nameWithType: ObjectId
    fullName: Sync.Store.ObjectId
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sync.Store.SharedRemoteStore.PendingResponse
    name: SharedRemoteStore.PendingResponse
    nameWithType: SharedRemoteStore.PendingResponse
    fullName: Sync.Store.SharedRemoteStore.PendingResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Sync.Store.StoreSerializer
  commentId: T:Sync.Store.StoreSerializer
  parent: Sync.Store
  name: StoreSerializer
  nameWithType: StoreSerializer
  fullName: Sync.Store.StoreSerializer
- uid: System.Collections.Generic.Dictionary{Network.Infrastructure.ConnectionBase,Sync.Store.RemoteStore}
  commentId: T:System.Collections.Generic.Dictionary{Network.Infrastructure.ConnectionBase,Sync.Store.RemoteStore}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<ConnectionBase, RemoteStore>
  nameWithType: Dictionary<ConnectionBase, RemoteStore>
  fullName: System.Collections.Generic.Dictionary<Network.Infrastructure.ConnectionBase, Sync.Store.RemoteStore>
  nameWithType.vb: Dictionary(Of ConnectionBase, RemoteStore)
  fullName.vb: System.Collections.Generic.Dictionary(Of Network.Infrastructure.ConnectionBase, Sync.Store.RemoteStore)
  name.vb: Dictionary(Of ConnectionBase, RemoteStore)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Network.Infrastructure.ConnectionBase
    name: ConnectionBase
    nameWithType: ConnectionBase
    fullName: Network.Infrastructure.ConnectionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sync.Store.RemoteStore
    name: RemoteStore
    nameWithType: RemoteStore
    fullName: Sync.Store.RemoteStore
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Network.Infrastructure.ConnectionBase
    name: ConnectionBase
    nameWithType: ConnectionBase
    fullName: Network.Infrastructure.ConnectionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sync.Store.RemoteStore
    name: RemoteStore
    nameWithType: RemoteStore
    fullName: Sync.Store.RemoteStore
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{Sync.Store.ObjectId}
  commentId: T:System.Action{Sync.Store.ObjectId}
  parent: System
  definition: System.Action`1
  name: Action<ObjectId>
  nameWithType: Action<ObjectId>
  fullName: System.Action<Sync.Store.ObjectId>
  nameWithType.vb: Action(Of ObjectId)
  fullName.vb: System.Action(Of Sync.Store.ObjectId)
  name.vb: Action(Of ObjectId)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sync.Store.ObjectId
    name: ObjectId
    nameWithType: ObjectId
    fullName: Sync.Store.ObjectId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sync.Store.ObjectId
    name: ObjectId
    nameWithType: ObjectId
    fullName: Sync.Store.ObjectId
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sync.Store.SharedRemoteStore.#ctor*
  commentId: Overload:Sync.Store.SharedRemoteStore.#ctor
  name: SharedRemoteStore
  nameWithType: SharedRemoteStore.SharedRemoteStore
  fullName: Sync.Store.SharedRemoteStore.SharedRemoteStore
- uid: Sync.Store.ISerializableFactory
  commentId: T:Sync.Store.ISerializableFactory
  parent: Sync.Store
  name: ISerializableFactory
  nameWithType: ISerializableFactory
  fullName: Sync.Store.ISerializableFactory
- uid: Sync.Store.SharedRemoteStore.Insert*
  commentId: Overload:Sync.Store.SharedRemoteStore.Insert
  name: Insert
  nameWithType: SharedRemoteStore.Insert
  fullName: Sync.Store.SharedRemoteStore.Insert
- uid: Sync.Store.IStore.Insert(System.Object)
  commentId: M:Sync.Store.IStore.Insert(System.Object)
  parent: Sync.Store.IStore
  isExternal: true
  name: Insert(Object)
  nameWithType: IStore.Insert(Object)
  fullName: Sync.Store.IStore.Insert(System.Object)
  spec.csharp:
  - uid: Sync.Store.IStore.Insert(System.Object)
    name: Insert
    nameWithType: IStore.Insert
    fullName: Sync.Store.IStore.Insert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sync.Store.IStore.Insert(System.Object)
    name: Insert
    nameWithType: IStore.Insert
    fullName: Sync.Store.IStore.Insert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sync.Store.ObjectId
  commentId: T:Sync.Store.ObjectId
  parent: Sync.Store
  name: ObjectId
  nameWithType: ObjectId
  fullName: Sync.Store.ObjectId
- uid: Sync.Store.SharedRemoteStore.Remove*
  commentId: Overload:Sync.Store.SharedRemoteStore.Remove
  name: Remove
  nameWithType: SharedRemoteStore.Remove
  fullName: Sync.Store.SharedRemoteStore.Remove
- uid: Sync.Store.IStore.Remove(Sync.Store.ObjectId)
  commentId: M:Sync.Store.IStore.Remove(Sync.Store.ObjectId)
  parent: Sync.Store.IStore
  name: Remove(ObjectId)
  nameWithType: IStore.Remove(ObjectId)
  fullName: Sync.Store.IStore.Remove(Sync.Store.ObjectId)
  spec.csharp:
  - uid: Sync.Store.IStore.Remove(Sync.Store.ObjectId)
    name: Remove
    nameWithType: IStore.Remove
    fullName: Sync.Store.IStore.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sync.Store.ObjectId
    name: ObjectId
    nameWithType: ObjectId
    fullName: Sync.Store.ObjectId
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sync.Store.IStore.Remove(Sync.Store.ObjectId)
    name: Remove
    nameWithType: IStore.Remove
    fullName: Sync.Store.IStore.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sync.Store.ObjectId
    name: ObjectId
    nameWithType: ObjectId
    fullName: Sync.Store.ObjectId
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sync.Store.SharedRemoteStore.Data*
  commentId: Overload:Sync.Store.SharedRemoteStore.Data
  name: Data
  nameWithType: SharedRemoteStore.Data
  fullName: Sync.Store.SharedRemoteStore.Data
- uid: Sync.Store.IStore.Data
  commentId: P:Sync.Store.IStore.Data
  parent: Sync.Store.IStore
  name: Data
  nameWithType: IStore.Data
  fullName: Sync.Store.IStore.Data
- uid: System.Collections.Generic.IReadOnlyDictionary{Sync.Store.ObjectId,System.Object}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{Sync.Store.ObjectId,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<ObjectId, Object>
  nameWithType: IReadOnlyDictionary<ObjectId, Object>
  fullName: System.Collections.Generic.IReadOnlyDictionary<Sync.Store.ObjectId, System.Object>
  nameWithType.vb: IReadOnlyDictionary(Of ObjectId, Object)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of Sync.Store.ObjectId, System.Object)
  name.vb: IReadOnlyDictionary(Of ObjectId, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sync.Store.ObjectId
    name: ObjectId
    nameWithType: ObjectId
    fullName: Sync.Store.ObjectId
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sync.Store.ObjectId
    name: ObjectId
    nameWithType: ObjectId
    fullName: Sync.Store.ObjectId
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Sync.Store.SharedRemoteStore.AddConnection*
  commentId: Overload:Sync.Store.SharedRemoteStore.AddConnection
  name: AddConnection
  nameWithType: SharedRemoteStore.AddConnection
  fullName: Sync.Store.SharedRemoteStore.AddConnection
- uid: Network.Infrastructure.ConnectionBase
  commentId: T:Network.Infrastructure.ConnectionBase
  parent: Network.Infrastructure
  name: ConnectionBase
  nameWithType: ConnectionBase
  fullName: Network.Infrastructure.ConnectionBase
- uid: Network.Infrastructure
  commentId: N:Network.Infrastructure
  name: Network.Infrastructure
  nameWithType: Network.Infrastructure
  fullName: Network.Infrastructure
- uid: Sync.Store.SharedRemoteStore.ObjectAcknowledged*
  commentId: Overload:Sync.Store.SharedRemoteStore.ObjectAcknowledged
  name: ObjectAcknowledged
  nameWithType: SharedRemoteStore.ObjectAcknowledged
  fullName: Sync.Store.SharedRemoteStore.ObjectAcknowledged
- uid: Sync.Store.SharedRemoteStore.RemoteObjectAdded*
  commentId: Overload:Sync.Store.SharedRemoteStore.RemoteObjectAdded
  name: RemoteObjectAdded
  nameWithType: SharedRemoteStore.RemoteObjectAdded
  fullName: Sync.Store.SharedRemoteStore.RemoteObjectAdded
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Sync.Store.SharedRemoteStore.RemoveConnection*
  commentId: Overload:Sync.Store.SharedRemoteStore.RemoveConnection
  name: RemoveConnection
  nameWithType: SharedRemoteStore.RemoveConnection
  fullName: Sync.Store.SharedRemoteStore.RemoveConnection
