### YamlMime:ManagedReference
items:
- uid: Common.CoopStateMachine`2
  commentId: T:Common.CoopStateMachine`2
  id: CoopStateMachine`2
  parent: Common
  children:
  - Common.CoopStateMachine`2.#ctor(`0)
  - Common.CoopStateMachine`2.Logger
  - Common.CoopStateMachine`2.StateMachine
  langs:
  - csharp
  - vb
  name: CoopStateMachine<T, U>
  nameWithType: CoopStateMachine<T, U>
  fullName: Common.CoopStateMachine<T, U>
  type: Class
  source:
    remote:
      path: source/Common/CoopStateMachine.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: CoopStateMachine
    path: ../source/Common/CoopStateMachine.cs
    startLine: 9
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: 'public class CoopStateMachine<T, U> : CoopStateMachine where T : Enum where U : Enum'
    typeParameters:
    - id: T
    - id: U
    content.vb: >-
      Public Class CoopStateMachine(Of T As  Enum, U As  Enum)

          Inherits CoopStateMachine
  inheritance:
  - System.Object
  - Common.CoopStateMachine
  derivedClasses:
  - Coop.Mod.CoopClientSM
  - Coop.Mod.CoopServerSM
  - Network.Infrastructure.ConnectionClientSM
  - Network.Infrastructure.ConnectionServerSM
  - Network.Infrastructure.ServerSM
  inheritedMembers:
  - Common.CoopStateMachine.State
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: CoopStateMachine(Of T, U)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Common.CoopStateMachine(Of T, U)
  name.vb: CoopStateMachine(Of T, U)
- uid: Common.CoopStateMachine`2.Logger
  commentId: F:Common.CoopStateMachine`2.Logger
  id: Logger
  parent: Common.CoopStateMachine`2
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: CoopStateMachine<T, U>.Logger
  fullName: Common.CoopStateMachine<T, U>.Logger
  type: Field
  source:
    remote:
      path: source/Common/CoopStateMachine.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Logger
    path: ../source/Common/CoopStateMachine.cs
    startLine: 11
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: protected static readonly Logger Logger
    return:
      type: NLog.Logger
    content.vb: Protected Shared ReadOnly Logger As Logger
  nameWithType.vb: CoopStateMachine(Of T, U).Logger
  modifiers.csharp:
  - protected
  - static
  - readonly
  modifiers.vb:
  - Protected
  - Shared
  - ReadOnly
  fullName.vb: Common.CoopStateMachine(Of T, U).Logger
- uid: Common.CoopStateMachine`2.StateMachine
  commentId: F:Common.CoopStateMachine`2.StateMachine
  id: StateMachine
  parent: Common.CoopStateMachine`2
  langs:
  - csharp
  - vb
  name: StateMachine
  nameWithType: CoopStateMachine<T, U>.StateMachine
  fullName: Common.CoopStateMachine<T, U>.StateMachine
  type: Field
  source:
    remote:
      path: source/Common/CoopStateMachine.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: StateMachine
    path: ../source/Common/CoopStateMachine.cs
    startLine: 12
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: public readonly StateMachine<T, U> StateMachine
    return:
      type: Stateless.StateMachine{{T},{U}}
    content.vb: Public ReadOnly StateMachine As StateMachine(Of T, U)
  nameWithType.vb: CoopStateMachine(Of T, U).StateMachine
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Common.CoopStateMachine(Of T, U).StateMachine
- uid: Common.CoopStateMachine`2.#ctor(`0)
  commentId: M:Common.CoopStateMachine`2.#ctor(`0)
  id: '#ctor(`0)'
  parent: Common.CoopStateMachine`2
  langs:
  - csharp
  - vb
  name: CoopStateMachine(T)
  nameWithType: CoopStateMachine<T, U>.CoopStateMachine(T)
  fullName: Common.CoopStateMachine<T, U>.CoopStateMachine(T)
  type: Constructor
  source:
    remote:
      path: source/Common/CoopStateMachine.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: .ctor
    path: ../source/Common/CoopStateMachine.cs
    startLine: 14
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: public CoopStateMachine(T StartingState)
    parameters:
    - id: StartingState
      type: '{T}'
    content.vb: Public Sub New(StartingState As T)
  overload: Common.CoopStateMachine`2.#ctor*
  nameWithType.vb: CoopStateMachine(Of T, U).CoopStateMachine(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Common.CoopStateMachine(Of T, U).CoopStateMachine(T)
references:
- uid: Common
  commentId: N:Common
  name: Common
  nameWithType: Common
  fullName: Common
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Common.CoopStateMachine
  commentId: T:Common.CoopStateMachine
  parent: Common
  name: CoopStateMachine
  nameWithType: CoopStateMachine
  fullName: Common.CoopStateMachine
- uid: Common.CoopStateMachine.State
  commentId: P:Common.CoopStateMachine.State
  parent: Common.CoopStateMachine
  name: State
  nameWithType: CoopStateMachine.State
  fullName: Common.CoopStateMachine.State
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NLog.Logger
  commentId: T:NLog.Logger
  parent: NLog
  isExternal: true
  name: Logger
  nameWithType: Logger
  fullName: NLog.Logger
- uid: NLog
  commentId: N:NLog
  isExternal: true
  name: NLog
  nameWithType: NLog
  fullName: NLog
- uid: Stateless.StateMachine{{T},{U}}
  commentId: T:Stateless.StateMachine{`0,`1}
  parent: Stateless
  definition: Stateless.StateMachine`2
  name: StateMachine<T, U>
  nameWithType: StateMachine<T, U>
  fullName: Stateless.StateMachine<T, U>
  nameWithType.vb: StateMachine(Of T, U)
  fullName.vb: Stateless.StateMachine(Of T, U)
  name.vb: StateMachine(Of T, U)
  spec.csharp:
  - uid: Stateless.StateMachine`2
    name: StateMachine
    nameWithType: StateMachine
    fullName: Stateless.StateMachine
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: U
    nameWithType: U
    fullName: U
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Stateless.StateMachine`2
    name: StateMachine
    nameWithType: StateMachine
    fullName: Stateless.StateMachine
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: U
    nameWithType: U
    fullName: U
  - name: )
    nameWithType: )
    fullName: )
- uid: Stateless.StateMachine`2
  commentId: T:Stateless.StateMachine`2
  isExternal: true
  name: StateMachine<TState, TTrigger>
  nameWithType: StateMachine<TState, TTrigger>
  fullName: Stateless.StateMachine<TState, TTrigger>
  nameWithType.vb: StateMachine(Of TState, TTrigger)
  fullName.vb: Stateless.StateMachine(Of TState, TTrigger)
  name.vb: StateMachine(Of TState, TTrigger)
  spec.csharp:
  - uid: Stateless.StateMachine`2
    name: StateMachine
    nameWithType: StateMachine
    fullName: Stateless.StateMachine
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTrigger
    nameWithType: TTrigger
    fullName: TTrigger
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Stateless.StateMachine`2
    name: StateMachine
    nameWithType: StateMachine
    fullName: Stateless.StateMachine
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTrigger
    nameWithType: TTrigger
    fullName: TTrigger
  - name: )
    nameWithType: )
    fullName: )
- uid: Stateless
  commentId: N:Stateless
  isExternal: true
  name: Stateless
  nameWithType: Stateless
  fullName: Stateless
- uid: Common.CoopStateMachine`2.#ctor*
  commentId: Overload:Common.CoopStateMachine`2.#ctor
  name: CoopStateMachine
  nameWithType: CoopStateMachine<T, U>.CoopStateMachine
  fullName: Common.CoopStateMachine<T, U>.CoopStateMachine
  nameWithType.vb: CoopStateMachine(Of T, U).CoopStateMachine
  fullName.vb: Common.CoopStateMachine(Of T, U).CoopStateMachine
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
