### YamlMime:ManagedReference
items:
- uid: Common.OrderedHashSet`1
  commentId: T:Common.OrderedHashSet`1
  id: OrderedHashSet`1
  parent: Common
  children:
  - Common.OrderedHashSet`1.#ctor
  - Common.OrderedHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - Common.OrderedHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  - Common.OrderedHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  - Common.OrderedHashSet`1.#ctor(System.Int32)
  - Common.OrderedHashSet`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - Common.OrderedHashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - Common.OrderedHashSet`1.Add(`0)
  - Common.OrderedHashSet`1.CapacityName
  - Common.OrderedHashSet`1.Clear
  - Common.OrderedHashSet`1.Comparer
  - Common.OrderedHashSet`1.ComparerName
  - Common.OrderedHashSet`1.Contains(`0)
  - Common.OrderedHashSet`1.CopyTo(`0[])
  - Common.OrderedHashSet`1.CopyTo(`0[],System.Int32)
  - Common.OrderedHashSet`1.CopyTo(`0[],System.Int32,System.Int32)
  - Common.OrderedHashSet`1.Count
  - Common.OrderedHashSet`1.ElementsName
  - Common.OrderedHashSet`1.GetEnumerator
  - Common.OrderedHashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - Common.OrderedHashSet`1.GrowthFactor
  - Common.OrderedHashSet`1.IncreaseCapacity
  - Common.OrderedHashSet`1.Initialize(System.Int32)
  - Common.OrderedHashSet`1.InternalGetHashCode(`0)
  - Common.OrderedHashSet`1.InternalIndexOf(`0)
  - Common.OrderedHashSet`1.IsNullable
  - Common.OrderedHashSet`1.IsValueType
  - Common.OrderedHashSet`1.Items
  - Common.OrderedHashSet`1.Lower31BitMask
  - Common.OrderedHashSet`1.m_buckets
  - Common.OrderedHashSet`1.m_firstOrderIndex
  - Common.OrderedHashSet`1.m_freeList
  - Common.OrderedHashSet`1.m_lastIndex
  - Common.OrderedHashSet`1.m_lastOrderIndex
  - Common.OrderedHashSet`1.m_siInfo
  - Common.OrderedHashSet`1.m_slots
  - Common.OrderedHashSet`1.m_version
  - Common.OrderedHashSet`1.MoveAfter(`0,`0)
  - Common.OrderedHashSet`1.MoveBefore(`0,`0)
  - Common.OrderedHashSet`1.MoveFirst(`0)
  - Common.OrderedHashSet`1.MoveLast(`0)
  - Common.OrderedHashSet`1.OnDeserialization(System.Object)
  - Common.OrderedHashSet`1.Remove(`0)
  - Common.OrderedHashSet`1.RemoveRange(System.Int32,System.Int32)
  - Common.OrderedHashSet`1.RemoveWhere(System.Predicate{`0})
  - Common.OrderedHashSet`1.Reversed
  - Common.OrderedHashSet`1.ShrinkThreshold
  - Common.OrderedHashSet`1.StartWith(`0)
  - Common.OrderedHashSet`1.StartWithReversed(`0)
  - Common.OrderedHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - Common.OrderedHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - Common.OrderedHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - Common.OrderedHashSet`1.System#Collections#IEnumerable#GetEnumerator
  - Common.OrderedHashSet`1.TrimExcess
  - Common.OrderedHashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  - Common.OrderedHashSet`1.VersionName
  langs:
  - csharp
  - vb
  name: OrderedHashSet<T>
  nameWithType: OrderedHashSet<T>
  fullName: Common.OrderedHashSet<T>
  type: Class
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: OrderedHashSet
    path: ../source/Common/OrderedHashSet.cs
    startLine: 46
  assemblies:
  - Common
  namespace: Common
  summary: "\nRepresents an ordered set of values.\n"
  remarks: "\nValues are kept in order in which they are added.\nOrder can be modified by <xref href=\"Common.OrderedHashSet%601.MoveFirst(%600)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Common.OrderedHashSet%601.MoveLast(%600)\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"Common.OrderedHashSet%601.MoveBefore(%600%2c%600)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Common.OrderedHashSet%601.MoveAfter(%600%2c%600)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public class OrderedHashSet<T> : ICollection<T>, IEnumerable<T>, IEnumerable, ISerializable, IDeserializationCallback
    typeParameters:
    - id: T
    content.vb: >-
      <Serializable>

      Public Class OrderedHashSet(Of T)

          Implements ICollection(Of T), IEnumerable(Of T), IEnumerable, ISerializable, IDeserializationCallback
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  - System.Runtime.Serialization.ISerializable
  - System.Runtime.Serialization.IDeserializationCallback
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  nameWithType.vb: OrderedHashSet(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Common.OrderedHashSet(Of T)
  name.vb: OrderedHashSet(Of T)
- uid: Common.OrderedHashSet`1.Lower31BitMask
  commentId: F:Common.OrderedHashSet`1.Lower31BitMask
  id: Lower31BitMask
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: Lower31BitMask
  nameWithType: OrderedHashSet<T>.Lower31BitMask
  fullName: Common.OrderedHashSet<T>.Lower31BitMask
  type: Field
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Lower31BitMask
    path: ../source/Common/OrderedHashSet.cs
    startLine: 55
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: const int Lower31BitMask = 2147483647
    return:
      type: System.Int32
    content.vb: Const Lower31BitMask As Integer = 2147483647
  nameWithType.vb: OrderedHashSet(Of T).Lower31BitMask
  modifiers.csharp:
  - const
  modifiers.vb:
  - Const
  fullName.vb: Common.OrderedHashSet(Of T).Lower31BitMask
- uid: Common.OrderedHashSet`1.GrowthFactor
  commentId: F:Common.OrderedHashSet`1.GrowthFactor
  id: GrowthFactor
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: GrowthFactor
  nameWithType: OrderedHashSet<T>.GrowthFactor
  fullName: Common.OrderedHashSet<T>.GrowthFactor
  type: Field
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: GrowthFactor
    path: ../source/Common/OrderedHashSet.cs
    startLine: 58
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: const int GrowthFactor = 2
    return:
      type: System.Int32
    content.vb: Const GrowthFactor As Integer = 2
  nameWithType.vb: OrderedHashSet(Of T).GrowthFactor
  modifiers.csharp:
  - const
  modifiers.vb:
  - Const
  fullName.vb: Common.OrderedHashSet(Of T).GrowthFactor
- uid: Common.OrderedHashSet`1.ShrinkThreshold
  commentId: F:Common.OrderedHashSet`1.ShrinkThreshold
  id: ShrinkThreshold
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: ShrinkThreshold
  nameWithType: OrderedHashSet<T>.ShrinkThreshold
  fullName: Common.OrderedHashSet<T>.ShrinkThreshold
  type: Field
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: ShrinkThreshold
    path: ../source/Common/OrderedHashSet.cs
    startLine: 65
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: const int ShrinkThreshold = 3
    return:
      type: System.Int32
    content.vb: Const ShrinkThreshold As Integer = 3
  nameWithType.vb: OrderedHashSet(Of T).ShrinkThreshold
  modifiers.csharp:
  - const
  modifiers.vb:
  - Const
  fullName.vb: Common.OrderedHashSet(Of T).ShrinkThreshold
- uid: Common.OrderedHashSet`1.CapacityName
  commentId: F:Common.OrderedHashSet`1.CapacityName
  id: CapacityName
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: CapacityName
  nameWithType: OrderedHashSet<T>.CapacityName
  fullName: Common.OrderedHashSet<T>.CapacityName
  type: Field
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: CapacityName
    path: ../source/Common/OrderedHashSet.cs
    startLine: 68
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: const string CapacityName = "Capacity"
    return:
      type: System.String
    content.vb: Const CapacityName As String = "Capacity"
  nameWithType.vb: OrderedHashSet(Of T).CapacityName
  modifiers.csharp:
  - const
  modifiers.vb:
  - Const
  fullName.vb: Common.OrderedHashSet(Of T).CapacityName
- uid: Common.OrderedHashSet`1.ElementsName
  commentId: F:Common.OrderedHashSet`1.ElementsName
  id: ElementsName
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: ElementsName
  nameWithType: OrderedHashSet<T>.ElementsName
  fullName: Common.OrderedHashSet<T>.ElementsName
  type: Field
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: ElementsName
    path: ../source/Common/OrderedHashSet.cs
    startLine: 69
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: const string ElementsName = "Elements"
    return:
      type: System.String
    content.vb: Const ElementsName As String = "Elements"
  nameWithType.vb: OrderedHashSet(Of T).ElementsName
  modifiers.csharp:
  - const
  modifiers.vb:
  - Const
  fullName.vb: Common.OrderedHashSet(Of T).ElementsName
- uid: Common.OrderedHashSet`1.ComparerName
  commentId: F:Common.OrderedHashSet`1.ComparerName
  id: ComparerName
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: ComparerName
  nameWithType: OrderedHashSet<T>.ComparerName
  fullName: Common.OrderedHashSet<T>.ComparerName
  type: Field
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: ComparerName
    path: ../source/Common/OrderedHashSet.cs
    startLine: 70
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: const string ComparerName = "Comparer"
    return:
      type: System.String
    content.vb: Const ComparerName As String = "Comparer"
  nameWithType.vb: OrderedHashSet(Of T).ComparerName
  modifiers.csharp:
  - const
  modifiers.vb:
  - Const
  fullName.vb: Common.OrderedHashSet(Of T).ComparerName
- uid: Common.OrderedHashSet`1.VersionName
  commentId: F:Common.OrderedHashSet`1.VersionName
  id: VersionName
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: VersionName
  nameWithType: OrderedHashSet<T>.VersionName
  fullName: Common.OrderedHashSet<T>.VersionName
  type: Field
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: VersionName
    path: ../source/Common/OrderedHashSet.cs
    startLine: 71
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: const string VersionName = "Version"
    return:
      type: System.String
    content.vb: Const VersionName As String = "Version"
  nameWithType.vb: OrderedHashSet(Of T).VersionName
  modifiers.csharp:
  - const
  modifiers.vb:
  - Const
  fullName.vb: Common.OrderedHashSet(Of T).VersionName
- uid: Common.OrderedHashSet`1.IsValueType
  commentId: F:Common.OrderedHashSet`1.IsValueType
  id: IsValueType
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: IsValueType
  nameWithType: OrderedHashSet<T>.IsValueType
  fullName: Common.OrderedHashSet<T>.IsValueType
  type: Field
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: IsValueType
    path: ../source/Common/OrderedHashSet.cs
    startLine: 72
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: static bool IsValueType
    return:
      type: System.Boolean
    content.vb: Shared IsValueType As Boolean
  nameWithType.vb: OrderedHashSet(Of T).IsValueType
  modifiers.csharp:
  - static
  modifiers.vb:
  - Shared
  fullName.vb: Common.OrderedHashSet(Of T).IsValueType
- uid: Common.OrderedHashSet`1.IsNullable
  commentId: F:Common.OrderedHashSet`1.IsNullable
  id: IsNullable
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: IsNullable
  nameWithType: OrderedHashSet<T>.IsNullable
  fullName: Common.OrderedHashSet<T>.IsNullable
  type: Field
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: IsNullable
    path: ../source/Common/OrderedHashSet.cs
    startLine: 74
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: static bool IsNullable
    return:
      type: System.Boolean
    content.vb: Shared IsNullable As Boolean
  nameWithType.vb: OrderedHashSet(Of T).IsNullable
  modifiers.csharp:
  - static
  modifiers.vb:
  - Shared
  fullName.vb: Common.OrderedHashSet(Of T).IsNullable
- uid: Common.OrderedHashSet`1.m_buckets
  commentId: F:Common.OrderedHashSet`1.m_buckets
  id: m_buckets
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: m_buckets
  nameWithType: OrderedHashSet<T>.m_buckets
  fullName: Common.OrderedHashSet<T>.m_buckets
  type: Field
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: m_buckets
    path: ../source/Common/OrderedHashSet.cs
    startLine: 78
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: int[] m_buckets
    return:
      type: System.Int32[]
    content.vb: m_buckets As Integer()
  nameWithType.vb: OrderedHashSet(Of T).m_buckets
  fullName.vb: Common.OrderedHashSet(Of T).m_buckets
- uid: Common.OrderedHashSet`1.m_firstOrderIndex
  commentId: F:Common.OrderedHashSet`1.m_firstOrderIndex
  id: m_firstOrderIndex
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: m_firstOrderIndex
  nameWithType: OrderedHashSet<T>.m_firstOrderIndex
  fullName: Common.OrderedHashSet<T>.m_firstOrderIndex
  type: Field
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: m_firstOrderIndex
    path: ../source/Common/OrderedHashSet.cs
    startLine: 79
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: int m_firstOrderIndex
    return:
      type: System.Int32
    content.vb: m_firstOrderIndex As Integer
  nameWithType.vb: OrderedHashSet(Of T).m_firstOrderIndex
  fullName.vb: Common.OrderedHashSet(Of T).m_firstOrderIndex
- uid: Common.OrderedHashSet`1.m_freeList
  commentId: F:Common.OrderedHashSet`1.m_freeList
  id: m_freeList
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: m_freeList
  nameWithType: OrderedHashSet<T>.m_freeList
  fullName: Common.OrderedHashSet<T>.m_freeList
  type: Field
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: m_freeList
    path: ../source/Common/OrderedHashSet.cs
    startLine: 80
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: int m_freeList
    return:
      type: System.Int32
    content.vb: m_freeList As Integer
  nameWithType.vb: OrderedHashSet(Of T).m_freeList
  fullName.vb: Common.OrderedHashSet(Of T).m_freeList
- uid: Common.OrderedHashSet`1.m_lastIndex
  commentId: F:Common.OrderedHashSet`1.m_lastIndex
  id: m_lastIndex
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: m_lastIndex
  nameWithType: OrderedHashSet<T>.m_lastIndex
  fullName: Common.OrderedHashSet<T>.m_lastIndex
  type: Field
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: m_lastIndex
    path: ../source/Common/OrderedHashSet.cs
    startLine: 81
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: int m_lastIndex
    return:
      type: System.Int32
    content.vb: m_lastIndex As Integer
  nameWithType.vb: OrderedHashSet(Of T).m_lastIndex
  fullName.vb: Common.OrderedHashSet(Of T).m_lastIndex
- uid: Common.OrderedHashSet`1.m_lastOrderIndex
  commentId: F:Common.OrderedHashSet`1.m_lastOrderIndex
  id: m_lastOrderIndex
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: m_lastOrderIndex
  nameWithType: OrderedHashSet<T>.m_lastOrderIndex
  fullName: Common.OrderedHashSet<T>.m_lastOrderIndex
  type: Field
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: m_lastOrderIndex
    path: ../source/Common/OrderedHashSet.cs
    startLine: 82
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: int m_lastOrderIndex
    return:
      type: System.Int32
    content.vb: m_lastOrderIndex As Integer
  nameWithType.vb: OrderedHashSet(Of T).m_lastOrderIndex
  fullName.vb: Common.OrderedHashSet(Of T).m_lastOrderIndex
- uid: Common.OrderedHashSet`1.m_siInfo
  commentId: F:Common.OrderedHashSet`1.m_siInfo
  id: m_siInfo
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: m_siInfo
  nameWithType: OrderedHashSet<T>.m_siInfo
  fullName: Common.OrderedHashSet<T>.m_siInfo
  type: Field
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: m_siInfo
    path: ../source/Common/OrderedHashSet.cs
    startLine: 85
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: SerializationInfo m_siInfo
    return:
      type: System.Runtime.Serialization.SerializationInfo
    content.vb: m_siInfo As SerializationInfo
  nameWithType.vb: OrderedHashSet(Of T).m_siInfo
  fullName.vb: Common.OrderedHashSet(Of T).m_siInfo
- uid: Common.OrderedHashSet`1.m_slots
  commentId: F:Common.OrderedHashSet`1.m_slots
  id: m_slots
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: m_slots
  nameWithType: OrderedHashSet<T>.m_slots
  fullName: Common.OrderedHashSet<T>.m_slots
  type: Field
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: m_slots
    path: ../source/Common/OrderedHashSet.cs
    startLine: 86
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: OrderedHashSet<T>.Slot[] m_slots
    return:
      type: Common.OrderedHashSet`1.Slot[]
    content.vb: m_slots As OrderedHashSet(Of T).Slot()
  nameWithType.vb: OrderedHashSet(Of T).m_slots
  fullName.vb: Common.OrderedHashSet(Of T).m_slots
- uid: Common.OrderedHashSet`1.m_version
  commentId: F:Common.OrderedHashSet`1.m_version
  id: m_version
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: m_version
  nameWithType: OrderedHashSet<T>.m_version
  fullName: Common.OrderedHashSet<T>.m_version
  type: Field
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: m_version
    path: ../source/Common/OrderedHashSet.cs
    startLine: 87
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: int m_version
    return:
      type: System.Int32
    content.vb: m_version As Integer
  nameWithType.vb: OrderedHashSet(Of T).m_version
  fullName.vb: Common.OrderedHashSet(Of T).m_version
- uid: Common.OrderedHashSet`1.Items
  commentId: P:Common.OrderedHashSet`1.Items
  id: Items
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: Items
  nameWithType: OrderedHashSet<T>.Items
  fullName: Common.OrderedHashSet<T>.Items
  type: Property
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Items
    path: ../source/Common/OrderedHashSet.cs
    startLine: 92
  assemblies:
  - Common
  namespace: Common
  summary: "\nGets collection reader.\n"
  example: []
  syntax:
    content: public OrderedHashSet<T>.Reader Items { get; }
    parameters: []
    return:
      type: Common.OrderedHashSet`1.Reader
    content.vb: Public ReadOnly Property Items As OrderedHashSet(Of T).Reader
  overload: Common.OrderedHashSet`1.Items*
  nameWithType.vb: OrderedHashSet(Of T).Items
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Common.OrderedHashSet(Of T).Items
- uid: Common.OrderedHashSet`1.Reversed
  commentId: P:Common.OrderedHashSet`1.Reversed
  id: Reversed
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: Reversed
  nameWithType: OrderedHashSet<T>.Reversed
  fullName: Common.OrderedHashSet<T>.Reversed
  type: Property
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Reversed
    path: ../source/Common/OrderedHashSet.cs
    startLine: 97
  assemblies:
  - Common
  namespace: Common
  summary: "\nGets reversed collection reader.\n"
  example: []
  syntax:
    content: public OrderedHashSet<T>.ReverseReader Reversed { get; }
    parameters: []
    return:
      type: Common.OrderedHashSet`1.ReverseReader
    content.vb: Public ReadOnly Property Reversed As OrderedHashSet(Of T).ReverseReader
  overload: Common.OrderedHashSet`1.Reversed*
  nameWithType.vb: OrderedHashSet(Of T).Reversed
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Common.OrderedHashSet(Of T).Reversed
- uid: Common.OrderedHashSet`1.Count
  commentId: P:Common.OrderedHashSet`1.Count
  id: Count
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: OrderedHashSet<T>.Count
  fullName: Common.OrderedHashSet<T>.Count
  type: Property
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Count
    path: ../source/Common/OrderedHashSet.cs
    startLine: 102
  assemblies:
  - Common
  namespace: Common
  summary: "\nNumber of elements in this hashset\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Common.OrderedHashSet`1.Count*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Count
  nameWithType.vb: OrderedHashSet(Of T).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Common.OrderedHashSet(Of T).Count
- uid: Common.OrderedHashSet`1.OnDeserialization(System.Object)
  commentId: M:Common.OrderedHashSet`1.OnDeserialization(System.Object)
  id: OnDeserialization(System.Object)
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: OnDeserialization(Object)
  nameWithType: OrderedHashSet<T>.OnDeserialization(Object)
  fullName: Common.OrderedHashSet<T>.OnDeserialization(System.Object)
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: OnDeserialization
    path: ../source/Common/OrderedHashSet.cs
    startLine: 105
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: public virtual void OnDeserialization(object sender)
    parameters:
    - id: sender
      type: System.Object
    content.vb: Public Overridable Sub OnDeserialization(sender As Object)
  overload: Common.OrderedHashSet`1.OnDeserialization*
  implements:
  - System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)
  nameWithType.vb: OrderedHashSet(Of T).OnDeserialization(Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Common.OrderedHashSet(Of T).OnDeserialization(System.Object)
- uid: Common.OrderedHashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:Common.OrderedHashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: OrderedHashSet<T>.GetObjectData(SerializationInfo, StreamingContext)
  fullName: Common.OrderedHashSet<T>.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: GetObjectData
    path: ../source/Common/OrderedHashSet.cs
    startLine: 153
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
    - id: context
      type: System.Runtime.Serialization.StreamingContext
    content.vb: Public Overridable Sub GetObjectData(info As SerializationInfo, context As StreamingContext)
  overload: Common.OrderedHashSet`1.GetObjectData*
  implements:
  - System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  nameWithType.vb: OrderedHashSet(Of T).GetObjectData(SerializationInfo, StreamingContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Common.OrderedHashSet(Of T).GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
- uid: Common.OrderedHashSet`1.#ctor
  commentId: M:Common.OrderedHashSet`1.#ctor
  id: '#ctor'
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: OrderedHashSet()
  nameWithType: OrderedHashSet<T>.OrderedHashSet()
  fullName: Common.OrderedHashSet<T>.OrderedHashSet()
  type: Constructor
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: .ctor
    path: ../source/Common/OrderedHashSet.cs
    startLine: 445
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: public OrderedHashSet()
    content.vb: Public Sub New
  overload: Common.OrderedHashSet`1.#ctor*
  nameWithType.vb: OrderedHashSet(Of T).OrderedHashSet()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Common.OrderedHashSet(Of T).OrderedHashSet()
- uid: Common.OrderedHashSet`1.#ctor(System.Int32)
  commentId: M:Common.OrderedHashSet`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: OrderedHashSet(Int32)
  nameWithType: OrderedHashSet<T>.OrderedHashSet(Int32)
  fullName: Common.OrderedHashSet<T>.OrderedHashSet(System.Int32)
  type: Constructor
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: .ctor
    path: ../source/Common/OrderedHashSet.cs
    startLine: 449
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: public OrderedHashSet(int capacity)
    parameters:
    - id: capacity
      type: System.Int32
    content.vb: Public Sub New(capacity As Integer)
  overload: Common.OrderedHashSet`1.#ctor*
  nameWithType.vb: OrderedHashSet(Of T).OrderedHashSet(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Common.OrderedHashSet(Of T).OrderedHashSet(System.Int32)
- uid: Common.OrderedHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:Common.OrderedHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0})'
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: OrderedHashSet(IEqualityComparer<T>)
  nameWithType: OrderedHashSet<T>.OrderedHashSet(IEqualityComparer<T>)
  fullName: Common.OrderedHashSet<T>.OrderedHashSet(System.Collections.Generic.IEqualityComparer<T>)
  type: Constructor
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: .ctor
    path: ../source/Common/OrderedHashSet.cs
    startLine: 453
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: public OrderedHashSet(IEqualityComparer<T> comparer)
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
    content.vb: Public Sub New(comparer As IEqualityComparer(Of T))
  overload: Common.OrderedHashSet`1.#ctor*
  nameWithType.vb: OrderedHashSet(Of T).OrderedHashSet(IEqualityComparer(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Common.OrderedHashSet(Of T).OrderedHashSet(System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: OrderedHashSet(IEqualityComparer(Of T))
- uid: Common.OrderedHashSet`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:Common.OrderedHashSet`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})'
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: OrderedHashSet(Int32, IEqualityComparer<T>)
  nameWithType: OrderedHashSet<T>.OrderedHashSet(Int32, IEqualityComparer<T>)
  fullName: Common.OrderedHashSet<T>.OrderedHashSet(System.Int32, System.Collections.Generic.IEqualityComparer<T>)
  type: Constructor
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: .ctor
    path: ../source/Common/OrderedHashSet.cs
    startLine: 457
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: public OrderedHashSet(int capacity, IEqualityComparer<T> comparer)
    parameters:
    - id: capacity
      type: System.Int32
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
    content.vb: Public Sub New(capacity As Integer, comparer As IEqualityComparer(Of T))
  overload: Common.OrderedHashSet`1.#ctor*
  nameWithType.vb: OrderedHashSet(Of T).OrderedHashSet(Int32, IEqualityComparer(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Common.OrderedHashSet(Of T).OrderedHashSet(System.Int32, System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: OrderedHashSet(Int32, IEqualityComparer(Of T))
- uid: Common.OrderedHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Common.OrderedHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: OrderedHashSet(IEnumerable<T>)
  nameWithType: OrderedHashSet<T>.OrderedHashSet(IEnumerable<T>)
  fullName: Common.OrderedHashSet<T>.OrderedHashSet(System.Collections.Generic.IEnumerable<T>)
  type: Constructor
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: .ctor
    path: ../source/Common/OrderedHashSet.cs
    startLine: 478
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: public OrderedHashSet(IEnumerable<T> collection)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Sub New(collection As IEnumerable(Of T))
  overload: Common.OrderedHashSet`1.#ctor*
  nameWithType.vb: OrderedHashSet(Of T).OrderedHashSet(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Common.OrderedHashSet(Of T).OrderedHashSet(System.Collections.Generic.IEnumerable(Of T))
  name.vb: OrderedHashSet(IEnumerable(Of T))
- uid: Common.OrderedHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:Common.OrderedHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})'
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: OrderedHashSet(IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: OrderedHashSet<T>.OrderedHashSet(IEnumerable<T>, IEqualityComparer<T>)
  fullName: Common.OrderedHashSet<T>.OrderedHashSet(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Constructor
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: .ctor
    path: ../source/Common/OrderedHashSet.cs
    startLine: 491
  assemblies:
  - Common
  namespace: Common
  summary: "\nImplementation Notes:\nSince resizes are relatively expensive (require rehashing), this attempts to minimize\nthe need to resize by setting the initial capacity based on size of collection.\n"
  example: []
  syntax:
    content: public OrderedHashSet(IEnumerable<T> collection, IEqualityComparer<T> comparer)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: ''
    content.vb: Public Sub New(collection As IEnumerable(Of T), comparer As IEqualityComparer(Of T))
  overload: Common.OrderedHashSet`1.#ctor*
  nameWithType.vb: OrderedHashSet(Of T).OrderedHashSet(IEnumerable(Of T), IEqualityComparer(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Common.OrderedHashSet(Of T).OrderedHashSet(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: OrderedHashSet(IEnumerable(Of T), IEqualityComparer(Of T))
- uid: Common.OrderedHashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:Common.OrderedHashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: OrderedHashSet(SerializationInfo, StreamingContext)
  nameWithType: OrderedHashSet<T>.OrderedHashSet(SerializationInfo, StreamingContext)
  fullName: Common.OrderedHashSet<T>.OrderedHashSet(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  type: Constructor
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: .ctor
    path: ../source/Common/OrderedHashSet.cs
    startLine: 519
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: protected OrderedHashSet(SerializationInfo info, StreamingContext context)
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
    - id: context
      type: System.Runtime.Serialization.StreamingContext
    content.vb: Protected Sub New(info As SerializationInfo, context As StreamingContext)
  overload: Common.OrderedHashSet`1.#ctor*
  nameWithType.vb: OrderedHashSet(Of T).OrderedHashSet(SerializationInfo, StreamingContext)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Common.OrderedHashSet(Of T).OrderedHashSet(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
- uid: Common.OrderedHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:Common.OrderedHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  isEii: true
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.IsReadOnly
  nameWithType: OrderedHashSet<T>.ICollection<T>.IsReadOnly
  fullName: Common.OrderedHashSet<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  type: Property
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: System.Collections.Generic.ICollection<T>.IsReadOnly
    path: ../source/Common/OrderedHashSet.cs
    startLine: 533
  assemblies:
  - Common
  namespace: Common
  summary: "\nWhether this is readonly\n"
  example: []
  syntax:
    content: bool ICollection<T>.IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<T>.IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly
  overload: Common.OrderedHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{{T}}.IsReadOnly
  nameWithType.vb: OrderedHashSet(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Common.OrderedHashSet(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: Common.OrderedHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  commentId: M:Common.OrderedHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  id: System#Collections#Generic#ICollection{T}#Add(`0)
  isEii: true
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Add(T)
  nameWithType: OrderedHashSet<T>.ICollection<T>.Add(T)
  fullName: Common.OrderedHashSet<T>.System.Collections.Generic.ICollection<T>.Add(T)
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: System.Collections.Generic.ICollection<T>.Add
    path: ../source/Common/OrderedHashSet.cs
    startLine: 541
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: void ICollection<T>.Add(T item)
    parameters:
    - id: item
      type: '{T}'
    content.vb: Sub System.Collections.Generic.ICollection<T>.Add(item As T) Implements ICollection(Of T).Add
  overload: Common.OrderedHashSet`1.System#Collections#Generic#ICollection{T}#Add*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Add({T})
  nameWithType.vb: OrderedHashSet(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  fullName.vb: Common.OrderedHashSet(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  name.vb: System.Collections.Generic.ICollection<T>.Add(T)
- uid: Common.OrderedHashSet`1.Clear
  commentId: M:Common.OrderedHashSet`1.Clear
  id: Clear
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: OrderedHashSet<T>.Clear()
  fullName: Common.OrderedHashSet<T>.Clear()
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Clear
    path: ../source/Common/OrderedHashSet.cs
    startLine: 550
  assemblies:
  - Common
  namespace: Common
  summary: "\nRemove all items from this set. This clears the elements but not the underlying\nbuckets and slots array. Follow this call by TrimExcess to release these.\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: Common.OrderedHashSet`1.Clear*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Clear
  nameWithType.vb: OrderedHashSet(Of T).Clear()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Common.OrderedHashSet(Of T).Clear()
- uid: Common.OrderedHashSet`1.Contains(`0)
  commentId: M:Common.OrderedHashSet`1.Contains(`0)
  id: Contains(`0)
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  nameWithType: OrderedHashSet<T>.Contains(T)
  fullName: Common.OrderedHashSet<T>.Contains(T)
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Contains
    path: ../source/Common/OrderedHashSet.cs
    startLine: 575
  assemblies:
  - Common
  namespace: Common
  summary: "\nChecks if this hashset contains the item\n"
  example: []
  syntax:
    content: public bool Contains(T item)
    parameters:
    - id: item
      type: '{T}'
      description: item to check for containment
    return:
      type: System.Boolean
      description: true if item contained; false if not
    content.vb: Public Function Contains(item As T) As Boolean
  overload: Common.OrderedHashSet`1.Contains*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Contains({T})
  nameWithType.vb: OrderedHashSet(Of T).Contains(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Common.OrderedHashSet(Of T).Contains(T)
- uid: Common.OrderedHashSet`1.CopyTo(`0[],System.Int32)
  commentId: M:Common.OrderedHashSet`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  nameWithType: OrderedHashSet<T>.CopyTo(T[], Int32)
  fullName: Common.OrderedHashSet<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: CopyTo
    path: ../source/Common/OrderedHashSet.cs
    startLine: 601
  assemblies:
  - Common
  namespace: Common
  summary: "\nCopy items in this hashset to array, starting at arrayIndex\n"
  example: []
  syntax:
    content: public void CopyTo(T[] array, int arrayIndex)
    parameters:
    - id: array
      type: '{T}[]'
      description: array to add items to
    - id: arrayIndex
      type: System.Int32
      description: index to start at
    content.vb: Public Sub CopyTo(array As T(), arrayIndex As Integer)
  overload: Common.OrderedHashSet`1.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  nameWithType.vb: OrderedHashSet(Of T).CopyTo(T(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Common.OrderedHashSet(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: Common.OrderedHashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Common.OrderedHashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  id: UnionWith(System.Collections.Generic.IEnumerable{`0})
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: UnionWith(IEnumerable<T>)
  nameWithType: OrderedHashSet<T>.UnionWith(IEnumerable<T>)
  fullName: Common.OrderedHashSet<T>.UnionWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: UnionWith
    path: ../source/Common/OrderedHashSet.cs
    startLine: 613
  assemblies:
  - Common
  namespace: Common
  summary: "\nTake the union of this HashSet with other. Modifies this set.\nImplementation note: GetSuggestedCapacity (to increase capacity in advance avoiding\nmultiple resizes ended up not being useful in practice; quickly gets to the\npoint where it&apos;s a wasteful check.\n"
  example: []
  syntax:
    content: public void UnionWith(IEnumerable<T> other)
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: enumerable with items to add
    content.vb: Public Sub UnionWith(other As IEnumerable(Of T))
  overload: Common.OrderedHashSet`1.UnionWith*
  nameWithType.vb: OrderedHashSet(Of T).UnionWith(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Common.OrderedHashSet(Of T).UnionWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: UnionWith(IEnumerable(Of T))
- uid: Common.OrderedHashSet`1.InternalIndexOf(`0)
  commentId: M:Common.OrderedHashSet`1.InternalIndexOf(`0)
  id: InternalIndexOf(`0)
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: InternalIndexOf(T)
  nameWithType: OrderedHashSet<T>.InternalIndexOf(T)
  fullName: Common.OrderedHashSet<T>.InternalIndexOf(T)
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: InternalIndexOf
    path: ../source/Common/OrderedHashSet.cs
    startLine: 626
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: int InternalIndexOf(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Int32
    content.vb: Function InternalIndexOf(item As T) As Integer
  overload: Common.OrderedHashSet`1.InternalIndexOf*
  nameWithType.vb: OrderedHashSet(Of T).InternalIndexOf(T)
  fullName.vb: Common.OrderedHashSet(Of T).InternalIndexOf(T)
- uid: Common.OrderedHashSet`1.Remove(`0)
  commentId: M:Common.OrderedHashSet`1.Remove(`0)
  id: Remove(`0)
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  nameWithType: OrderedHashSet<T>.Remove(T)
  fullName: Common.OrderedHashSet<T>.Remove(T)
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Remove
    path: ../source/Common/OrderedHashSet.cs
    startLine: 645
  assemblies:
  - Common
  namespace: Common
  summary: "\nRemove item from this hashset\n"
  example: []
  syntax:
    content: public bool Remove(T item)
    parameters:
    - id: item
      type: '{T}'
      description: item to remove
    return:
      type: System.Boolean
      description: true if removed; false if not (i.e. if the item wasn&apos;t in the HashSet)
    content.vb: Public Function Remove(item As T) As Boolean
  overload: Common.OrderedHashSet`1.Remove*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Remove({T})
  nameWithType.vb: OrderedHashSet(Of T).Remove(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Common.OrderedHashSet(Of T).Remove(T)
- uid: Common.OrderedHashSet`1.GetEnumerator
  commentId: M:Common.OrderedHashSet`1.GetEnumerator
  id: GetEnumerator
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: OrderedHashSet<T>.GetEnumerator()
  fullName: Common.OrderedHashSet<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: GetEnumerator
    path: ../source/Common/OrderedHashSet.cs
    startLine: 719
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: public OrderedHashSet<T>.Enumerator GetEnumerator()
    return:
      type: Common.OrderedHashSet`1.Enumerator
    content.vb: Public Function GetEnumerator As OrderedHashSet(Of T).Enumerator
  overload: Common.OrderedHashSet`1.GetEnumerator*
  nameWithType.vb: OrderedHashSet(Of T).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Common.OrderedHashSet(Of T).GetEnumerator()
- uid: Common.OrderedHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:Common.OrderedHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isEii: true
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: OrderedHashSet<T>.IEnumerable<T>.GetEnumerator()
  fullName: Common.OrderedHashSet<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    path: ../source/Common/OrderedHashSet.cs
    startLine: 724
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
    content.vb: Function System.Collections.Generic.IEnumerable<T>.GetEnumerator As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator
  overload: Common.OrderedHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  nameWithType.vb: OrderedHashSet(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: Common.OrderedHashSet(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
- uid: Common.OrderedHashSet`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Common.OrderedHashSet`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: OrderedHashSet<T>.IEnumerable.GetEnumerator()
  fullName: Common.OrderedHashSet<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../source/Common/OrderedHashSet.cs
    startLine: 729
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: Common.OrderedHashSet`1.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: OrderedHashSet(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: Common.OrderedHashSet(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: Common.OrderedHashSet`1.CopyTo(`0[])
  commentId: M:Common.OrderedHashSet`1.CopyTo(`0[])
  id: CopyTo(`0[])
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[])
  nameWithType: OrderedHashSet<T>.CopyTo(T[])
  fullName: Common.OrderedHashSet<T>.CopyTo(T[])
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: CopyTo
    path: ../source/Common/OrderedHashSet.cs
    startLine: 739
  assemblies:
  - Common
  namespace: Common
  summary: "\nCopies the elements to an array.\n"
  example: []
  syntax:
    content: public void CopyTo(T[] array)
    parameters:
    - id: array
      type: '{T}[]'
    content.vb: Public Sub CopyTo(array As T())
  overload: Common.OrderedHashSet`1.CopyTo*
  nameWithType.vb: OrderedHashSet(Of T).CopyTo(T())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Common.OrderedHashSet(Of T).CopyTo(T())
  name.vb: CopyTo(T())
- uid: Common.OrderedHashSet`1.CopyTo(`0[],System.Int32,System.Int32)
  commentId: M:Common.OrderedHashSet`1.CopyTo(`0[],System.Int32,System.Int32)
  id: CopyTo(`0[],System.Int32,System.Int32)
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32, Int32)
  nameWithType: OrderedHashSet<T>.CopyTo(T[], Int32, Int32)
  fullName: Common.OrderedHashSet<T>.CopyTo(T[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: CopyTo
    path: ../source/Common/OrderedHashSet.cs
    startLine: 747
  assemblies:
  - Common
  namespace: Common
  summary: "\nCopies the specified number of elements to an array, starting at the specified array index.\n"
  example: []
  syntax:
    content: public void CopyTo(T[] array, int arrayIndex, int count)
    parameters:
    - id: array
      type: '{T}[]'
    - id: arrayIndex
      type: System.Int32
    - id: count
      type: System.Int32
    content.vb: Public Sub CopyTo(array As T(), arrayIndex As Integer, count As Integer)
  overload: Common.OrderedHashSet`1.CopyTo*
  nameWithType.vb: OrderedHashSet(Of T).CopyTo(T(), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Common.OrderedHashSet(Of T).CopyTo(T(), System.Int32, System.Int32)
  name.vb: CopyTo(T(), Int32, Int32)
- uid: Common.OrderedHashSet`1.MoveFirst(`0)
  commentId: M:Common.OrderedHashSet`1.MoveFirst(`0)
  id: MoveFirst(`0)
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: MoveFirst(T)
  nameWithType: OrderedHashSet<T>.MoveFirst(T)
  fullName: Common.OrderedHashSet<T>.MoveFirst(T)
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: MoveFirst
    path: ../source/Common/OrderedHashSet.cs
    startLine: 786
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: public bool MoveFirst(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function MoveFirst(item As T) As Boolean
  overload: Common.OrderedHashSet`1.MoveFirst*
  nameWithType.vb: OrderedHashSet(Of T).MoveFirst(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Common.OrderedHashSet(Of T).MoveFirst(T)
- uid: Common.OrderedHashSet`1.MoveLast(`0)
  commentId: M:Common.OrderedHashSet`1.MoveLast(`0)
  id: MoveLast(`0)
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: MoveLast(T)
  nameWithType: OrderedHashSet<T>.MoveLast(T)
  fullName: Common.OrderedHashSet<T>.MoveLast(T)
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: MoveLast
    path: ../source/Common/OrderedHashSet.cs
    startLine: 820
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: public bool MoveLast(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function MoveLast(item As T) As Boolean
  overload: Common.OrderedHashSet`1.MoveLast*
  nameWithType.vb: OrderedHashSet(Of T).MoveLast(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Common.OrderedHashSet(Of T).MoveLast(T)
- uid: Common.OrderedHashSet`1.MoveBefore(`0,`0)
  commentId: M:Common.OrderedHashSet`1.MoveBefore(`0,`0)
  id: MoveBefore(`0,`0)
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: MoveBefore(T, T)
  nameWithType: OrderedHashSet<T>.MoveBefore(T, T)
  fullName: Common.OrderedHashSet<T>.MoveBefore(T, T)
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: MoveBefore
    path: ../source/Common/OrderedHashSet.cs
    startLine: 854
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: public bool MoveBefore(T itemToMove, T mark)
    parameters:
    - id: itemToMove
      type: '{T}'
    - id: mark
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function MoveBefore(itemToMove As T, mark As T) As Boolean
  overload: Common.OrderedHashSet`1.MoveBefore*
  nameWithType.vb: OrderedHashSet(Of T).MoveBefore(T, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Common.OrderedHashSet(Of T).MoveBefore(T, T)
- uid: Common.OrderedHashSet`1.MoveAfter(`0,`0)
  commentId: M:Common.OrderedHashSet`1.MoveAfter(`0,`0)
  id: MoveAfter(`0,`0)
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: MoveAfter(T, T)
  nameWithType: OrderedHashSet<T>.MoveAfter(T, T)
  fullName: Common.OrderedHashSet<T>.MoveAfter(T, T)
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: MoveAfter
    path: ../source/Common/OrderedHashSet.cs
    startLine: 901
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: public bool MoveAfter(T itemToMove, T mark)
    parameters:
    - id: itemToMove
      type: '{T}'
    - id: mark
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function MoveAfter(itemToMove As T, mark As T) As Boolean
  overload: Common.OrderedHashSet`1.MoveAfter*
  nameWithType.vb: OrderedHashSet(Of T).MoveAfter(T, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Common.OrderedHashSet(Of T).MoveAfter(T, T)
- uid: Common.OrderedHashSet`1.StartWith(`0)
  commentId: M:Common.OrderedHashSet`1.StartWith(`0)
  id: StartWith(`0)
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: StartWith(T)
  nameWithType: OrderedHashSet<T>.StartWith(T)
  fullName: Common.OrderedHashSet<T>.StartWith(T)
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: StartWith
    path: ../source/Common/OrderedHashSet.cs
    startLine: 953
  assemblies:
  - Common
  namespace: Common
  summary: "\nReturns enumeration which goes from <code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> to last element in the set\n(including both).\nWhen <code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> is not found, returns empty enumeration.\n"
  example: []
  syntax:
    content: public OrderedHashSet<T>.Range StartWith(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: Common.OrderedHashSet`1.Range
    content.vb: Public Function StartWith(item As T) As OrderedHashSet(Of T).Range
  overload: Common.OrderedHashSet`1.StartWith*
  nameWithType.vb: OrderedHashSet(Of T).StartWith(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Common.OrderedHashSet(Of T).StartWith(T)
- uid: Common.OrderedHashSet`1.StartWithReversed(`0)
  commentId: M:Common.OrderedHashSet`1.StartWithReversed(`0)
  id: StartWithReversed(`0)
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: StartWithReversed(T)
  nameWithType: OrderedHashSet<T>.StartWithReversed(T)
  fullName: Common.OrderedHashSet<T>.StartWithReversed(T)
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: StartWithReversed
    path: ../source/Common/OrderedHashSet.cs
    startLine: 963
  assemblies:
  - Common
  namespace: Common
  summary: "\nReturns enumeration which goes from <code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> to first element in the set\n(including both).\nWhen <code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> is not found, returns empty enumeration.\n"
  example: []
  syntax:
    content: public OrderedHashSet<T>.ReverseRange StartWithReversed(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: Common.OrderedHashSet`1.ReverseRange
    content.vb: Public Function StartWithReversed(item As T) As OrderedHashSet(Of T).ReverseRange
  overload: Common.OrderedHashSet`1.StartWithReversed*
  nameWithType.vb: OrderedHashSet(Of T).StartWithReversed(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Common.OrderedHashSet(Of T).StartWithReversed(T)
- uid: Common.OrderedHashSet`1.RemoveWhere(System.Predicate{`0})
  commentId: M:Common.OrderedHashSet`1.RemoveWhere(System.Predicate{`0})
  id: RemoveWhere(System.Predicate{`0})
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: RemoveWhere(Predicate<T>)
  nameWithType: OrderedHashSet<T>.RemoveWhere(Predicate<T>)
  fullName: Common.OrderedHashSet<T>.RemoveWhere(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: RemoveWhere
    path: ../source/Common/OrderedHashSet.cs
    startLine: 973
  assemblies:
  - Common
  namespace: Common
  summary: "\nRemove elements that match specified predicate. Returns the number of elements removed\n"
  example: []
  syntax:
    content: public int RemoveWhere(Predicate<T> match)
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function RemoveWhere(match As Predicate(Of T)) As Integer
  overload: Common.OrderedHashSet`1.RemoveWhere*
  nameWithType.vb: OrderedHashSet(Of T).RemoveWhere(Predicate(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Common.OrderedHashSet(Of T).RemoveWhere(System.Predicate(Of T))
  name.vb: RemoveWhere(Predicate(Of T))
- uid: Common.OrderedHashSet`1.RemoveRange(System.Int32,System.Int32)
  commentId: M:Common.OrderedHashSet`1.RemoveRange(System.Int32,System.Int32)
  id: RemoveRange(System.Int32,System.Int32)
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: RemoveRange(Int32, Int32)
  nameWithType: OrderedHashSet<T>.RemoveRange(Int32, Int32)
  fullName: Common.OrderedHashSet<T>.RemoveRange(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: RemoveRange
    path: ../source/Common/OrderedHashSet.cs
    startLine: 1001
  assemblies:
  - Common
  namespace: Common
  syntax:
    content: public void RemoveRange(int indexFrom, int indexTo)
    parameters:
    - id: indexFrom
      type: System.Int32
    - id: indexTo
      type: System.Int32
    content.vb: Public Sub RemoveRange(indexFrom As Integer, indexTo As Integer)
  overload: Common.OrderedHashSet`1.RemoveRange*
  nameWithType.vb: OrderedHashSet(Of T).RemoveRange(Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Common.OrderedHashSet(Of T).RemoveRange(System.Int32, System.Int32)
- uid: Common.OrderedHashSet`1.Comparer
  commentId: P:Common.OrderedHashSet`1.Comparer
  id: Comparer
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: Comparer
  nameWithType: OrderedHashSet<T>.Comparer
  fullName: Common.OrderedHashSet<T>.Comparer
  type: Property
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Comparer
    path: ../source/Common/OrderedHashSet.cs
    startLine: 1018
  assemblies:
  - Common
  namespace: Common
  summary: "\nGets the IEqualityComparer that is used to determine equality of keys for\nthe HashSet.\n"
  example: []
  syntax:
    content: public IEqualityComparer<T> Comparer { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEqualityComparer{{T}}
    content.vb: Public ReadOnly Property Comparer As IEqualityComparer(Of T)
  overload: Common.OrderedHashSet`1.Comparer*
  nameWithType.vb: OrderedHashSet(Of T).Comparer
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Common.OrderedHashSet(Of T).Comparer
- uid: Common.OrderedHashSet`1.TrimExcess
  commentId: M:Common.OrderedHashSet`1.TrimExcess
  id: TrimExcess
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: TrimExcess()
  nameWithType: OrderedHashSet<T>.TrimExcess()
  fullName: Common.OrderedHashSet<T>.TrimExcess()
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: TrimExcess
    path: ../source/Common/OrderedHashSet.cs
    startLine: 1029
  assemblies:
  - Common
  namespace: Common
  summary: "\nSets the capacity of this list to the size of the list (rounded up to nearest prime),\nunless count is 0, in which case we release references.\nThis method can be used to minimize a list&apos;s memory overhead once it is known that no\nnew elements will be added to the list. To completely clear a list and release all\nmemory referenced by the list, execute the following statements:\nClear();\nTrimExcess();\n"
  example: []
  syntax:
    content: public void TrimExcess()
    content.vb: Public Sub TrimExcess
  overload: Common.OrderedHashSet`1.TrimExcess*
  nameWithType.vb: OrderedHashSet(Of T).TrimExcess()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Common.OrderedHashSet(Of T).TrimExcess()
- uid: Common.OrderedHashSet`1.Initialize(System.Int32)
  commentId: M:Common.OrderedHashSet`1.Initialize(System.Int32)
  id: Initialize(System.Int32)
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: Initialize(Int32)
  nameWithType: OrderedHashSet<T>.Initialize(Int32)
  fullName: Common.OrderedHashSet<T>.Initialize(System.Int32)
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Initialize
    path: ../source/Common/OrderedHashSet.cs
    startLine: 1120
  assemblies:
  - Common
  namespace: Common
  summary: "\nInitializes buckets and slots arrays. Uses suggested capacity by finding next prime\ngreater than or equal to capacity.\n"
  example: []
  syntax:
    content: void Initialize(int capacity)
    parameters:
    - id: capacity
      type: System.Int32
      description: ''
    content.vb: Sub Initialize(capacity As Integer)
  overload: Common.OrderedHashSet`1.Initialize*
  nameWithType.vb: OrderedHashSet(Of T).Initialize(Int32)
  fullName.vb: Common.OrderedHashSet(Of T).Initialize(System.Int32)
- uid: Common.OrderedHashSet`1.IncreaseCapacity
  commentId: M:Common.OrderedHashSet`1.IncreaseCapacity
  id: IncreaseCapacity
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: IncreaseCapacity()
  nameWithType: OrderedHashSet<T>.IncreaseCapacity()
  fullName: Common.OrderedHashSet<T>.IncreaseCapacity()
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: IncreaseCapacity
    path: ../source/Common/OrderedHashSet.cs
    startLine: 1136
  assemblies:
  - Common
  namespace: Common
  summary: "\nExpand to new capacity. New capacity is next prime greater than or equal to suggested\nsize. This is called when the underlying array is filled. This performs no\ndefragmentation, allowing faster execution; note that this is reasonable since\nAddIfNotPresent attempts to insert new elements in re-opened spots.\n"
  example: []
  syntax:
    content: void IncreaseCapacity()
    content.vb: Sub IncreaseCapacity
  overload: Common.OrderedHashSet`1.IncreaseCapacity*
  nameWithType.vb: OrderedHashSet(Of T).IncreaseCapacity()
  fullName.vb: Common.OrderedHashSet(Of T).IncreaseCapacity()
- uid: Common.OrderedHashSet`1.Add(`0)
  commentId: M:Common.OrderedHashSet`1.Add(`0)
  id: Add(`0)
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: OrderedHashSet<T>.Add(T)
  fullName: Common.OrderedHashSet<T>.Add(T)
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Add
    path: ../source/Common/OrderedHashSet.cs
    startLine: 1181
  assemblies:
  - Common
  namespace: Common
  summary: "\nAdd item to this HashSet. Returns bool indicating whether item was added (won&apos;t be\nadded if already present)\n"
  example: []
  syntax:
    content: public bool Add(T value)
    parameters:
    - id: value
      type: '{T}'
    return:
      type: System.Boolean
      description: true if added, false if already present
    content.vb: Public Function Add(value As T) As Boolean
  overload: Common.OrderedHashSet`1.Add*
  nameWithType.vb: OrderedHashSet(Of T).Add(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Common.OrderedHashSet(Of T).Add(T)
- uid: Common.OrderedHashSet`1.InternalGetHashCode(`0)
  commentId: M:Common.OrderedHashSet`1.InternalGetHashCode(`0)
  id: InternalGetHashCode(`0)
  parent: Common.OrderedHashSet`1
  langs:
  - csharp
  - vb
  name: InternalGetHashCode(T)
  nameWithType: OrderedHashSet<T>.InternalGetHashCode(T)
  fullName: Common.OrderedHashSet<T>.InternalGetHashCode(T)
  type: Method
  source:
    remote:
      path: source/Common/OrderedHashSet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: InternalGetHashCode
    path: ../source/Common/OrderedHashSet.cs
    startLine: 1247
  assemblies:
  - Common
  namespace: Common
  summary: "\nWorkaround Comparers that throw ArgumentNullException for GetHashCode(null).\n"
  example: []
  syntax:
    content: int InternalGetHashCode(T item)
    parameters:
    - id: item
      type: '{T}'
      description: ''
    return:
      type: System.Int32
      description: hash code
    content.vb: Function InternalGetHashCode(item As T) As Integer
  overload: Common.OrderedHashSet`1.InternalGetHashCode*
  nameWithType.vb: OrderedHashSet(Of T).InternalGetHashCode(T)
  fullName.vb: Common.OrderedHashSet(Of T).InternalGetHashCode(T)
references:
- uid: Common.OrderedHashSet`1.MoveFirst(`0)
  commentId: M:Common.OrderedHashSet`1.MoveFirst(`0)
  isExternal: true
- uid: Common.OrderedHashSet`1.MoveLast(`0)
  commentId: M:Common.OrderedHashSet`1.MoveLast(`0)
  isExternal: true
- uid: Common.OrderedHashSet`1.MoveBefore(`0,`0)
  commentId: M:Common.OrderedHashSet`1.MoveBefore(`0,`0)
  isExternal: true
- uid: Common.OrderedHashSet`1.MoveAfter(`0,`0)
  commentId: M:Common.OrderedHashSet`1.MoveAfter(`0,`0)
  isExternal: true
- uid: Common
  commentId: N:Common
  name: Common
  nameWithType: Common
  fullName: Common
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Runtime.Serialization.ISerializable
  commentId: T:System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: true
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
- uid: System.Runtime.Serialization.IDeserializationCallback
  commentId: T:System.Runtime.Serialization.IDeserializationCallback
  parent: System.Runtime.Serialization
  isExternal: true
  name: IDeserializationCallback
  nameWithType: IDeserializationCallback
  fullName: System.Runtime.Serialization.IDeserializationCallback
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: true
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Runtime.Serialization.SerializationInfo
  commentId: T:System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: true
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: Common.OrderedHashSet`1.Slot[]
  isExternal: true
  name: OrderedHashSet.Slot<>[]
  nameWithType: OrderedHashSet.Slot<>[]
  fullName: Common.OrderedHashSet.Slot<>[]
  nameWithType.vb: OrderedHashSet.Slot(Of )()
  fullName.vb: Common.OrderedHashSet.Slot(Of )()
  name.vb: OrderedHashSet.Slot(Of )()
  spec.csharp:
  - uid: Common.OrderedHashSet`1.Slot
    name: OrderedHashSet.Slot
    nameWithType: OrderedHashSet.Slot
    fullName: Common.OrderedHashSet.Slot
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Common.OrderedHashSet`1.Slot
    name: OrderedHashSet.Slot
    nameWithType: OrderedHashSet.Slot
    fullName: Common.OrderedHashSet.Slot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Common.OrderedHashSet`1.Items*
  commentId: Overload:Common.OrderedHashSet`1.Items
  name: Items
  nameWithType: OrderedHashSet<T>.Items
  fullName: Common.OrderedHashSet<T>.Items
  nameWithType.vb: OrderedHashSet(Of T).Items
  fullName.vb: Common.OrderedHashSet(Of T).Items
- uid: Common.OrderedHashSet`1.Reader
  commentId: T:Common.OrderedHashSet`1.Reader
  parent: Common
  name: OrderedHashSet.Reader<>
  nameWithType: OrderedHashSet.Reader<>
  fullName: Common.OrderedHashSet.Reader<>
  nameWithType.vb: OrderedHashSet.Reader(Of )
  fullName.vb: Common.OrderedHashSet.Reader(Of )
  name.vb: OrderedHashSet.Reader(Of )
  spec.csharp:
  - uid: Common.OrderedHashSet`1.Reader
    name: OrderedHashSet.Reader
    nameWithType: OrderedHashSet.Reader
    fullName: Common.OrderedHashSet.Reader
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Common.OrderedHashSet`1.Reader
    name: OrderedHashSet.Reader
    nameWithType: OrderedHashSet.Reader
    fullName: Common.OrderedHashSet.Reader
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: Common.OrderedHashSet`1.Reversed*
  commentId: Overload:Common.OrderedHashSet`1.Reversed
  name: Reversed
  nameWithType: OrderedHashSet<T>.Reversed
  fullName: Common.OrderedHashSet<T>.Reversed
  nameWithType.vb: OrderedHashSet(Of T).Reversed
  fullName.vb: Common.OrderedHashSet(Of T).Reversed
- uid: Common.OrderedHashSet`1.ReverseReader
  commentId: T:Common.OrderedHashSet`1.ReverseReader
  parent: Common
  name: OrderedHashSet.ReverseReader<>
  nameWithType: OrderedHashSet.ReverseReader<>
  fullName: Common.OrderedHashSet.ReverseReader<>
  nameWithType.vb: OrderedHashSet.ReverseReader(Of )
  fullName.vb: Common.OrderedHashSet.ReverseReader(Of )
  name.vb: OrderedHashSet.ReverseReader(Of )
  spec.csharp:
  - uid: Common.OrderedHashSet`1.ReverseReader
    name: OrderedHashSet.ReverseReader
    nameWithType: OrderedHashSet.ReverseReader
    fullName: Common.OrderedHashSet.ReverseReader
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Common.OrderedHashSet`1.ReverseReader
    name: OrderedHashSet.ReverseReader
    nameWithType: OrderedHashSet.ReverseReader
    fullName: Common.OrderedHashSet.ReverseReader
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: Common.OrderedHashSet`1.Count*
  commentId: Overload:Common.OrderedHashSet`1.Count
  name: Count
  nameWithType: OrderedHashSet<T>.Count
  fullName: Common.OrderedHashSet<T>.Count
  nameWithType.vb: OrderedHashSet(Of T).Count
  fullName.vb: Common.OrderedHashSet(Of T).Count
- uid: System.Collections.Generic.ICollection{{T}}.Count
  commentId: P:System.Collections.Generic.ICollection{`0}.Count
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: Common.OrderedHashSet`1.OnDeserialization*
  commentId: Overload:Common.OrderedHashSet`1.OnDeserialization
  name: OnDeserialization
  nameWithType: OrderedHashSet<T>.OnDeserialization
  fullName: Common.OrderedHashSet<T>.OnDeserialization
  nameWithType.vb: OrderedHashSet(Of T).OnDeserialization
  fullName.vb: Common.OrderedHashSet(Of T).OnDeserialization
- uid: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)
  commentId: M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)
  parent: System.Runtime.Serialization.IDeserializationCallback
  isExternal: true
  name: OnDeserialization(Object)
  nameWithType: IDeserializationCallback.OnDeserialization(Object)
  fullName: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)
  spec.csharp:
  - uid: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)
    name: OnDeserialization
    nameWithType: IDeserializationCallback.OnDeserialization
    fullName: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)
    name: OnDeserialization
    nameWithType: IDeserializationCallback.OnDeserialization
    fullName: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Common.OrderedHashSet`1.GetObjectData*
  commentId: Overload:Common.OrderedHashSet`1.GetObjectData
  name: GetObjectData
  nameWithType: OrderedHashSet<T>.GetObjectData
  fullName: Common.OrderedHashSet<T>.GetObjectData
  nameWithType.vb: OrderedHashSet(Of T).GetObjectData
  fullName.vb: Common.OrderedHashSet(Of T).GetObjectData
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  isExternal: true
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: ISerializable.GetObjectData
    fullName: System.Runtime.Serialization.ISerializable.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: ISerializable.GetObjectData
    fullName: System.Runtime.Serialization.ISerializable.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.Serialization.StreamingContext
  commentId: T:System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: Common.OrderedHashSet`1.#ctor*
  commentId: Overload:Common.OrderedHashSet`1.#ctor
  name: OrderedHashSet
  nameWithType: OrderedHashSet<T>.OrderedHashSet
  fullName: Common.OrderedHashSet<T>.OrderedHashSet
  nameWithType.vb: OrderedHashSet(Of T).OrderedHashSet
  fullName.vb: Common.OrderedHashSet(Of T).OrderedHashSet
- uid: System.Collections.Generic.IEqualityComparer{{T}}
  commentId: T:System.Collections.Generic.IEqualityComparer{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Common.OrderedHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly*
  commentId: Overload:Common.OrderedHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  name: ICollection<T>.IsReadOnly
  nameWithType: OrderedHashSet<T>.ICollection<T>.IsReadOnly
  fullName: Common.OrderedHashSet<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: OrderedHashSet(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: Common.OrderedHashSet(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.ICollection{{T}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{`0}.IsReadOnly
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: Common.OrderedHashSet`1.System#Collections#Generic#ICollection{T}#Add*
  commentId: Overload:Common.OrderedHashSet`1.System#Collections#Generic#ICollection{T}#Add
  name: ICollection<T>.Add
  nameWithType: OrderedHashSet<T>.ICollection<T>.Add
  fullName: Common.OrderedHashSet<T>.System.Collections.Generic.ICollection<T>.Add
  nameWithType.vb: OrderedHashSet(Of T).System.Collections.Generic.ICollection<T>.Add
  fullName.vb: Common.OrderedHashSet(Of T).System.Collections.Generic.ICollection<T>.Add
  name.vb: System.Collections.Generic.ICollection<T>.Add
- uid: System.Collections.Generic.ICollection{{T}}.Add({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Add(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Common.OrderedHashSet`1.Clear*
  commentId: Overload:Common.OrderedHashSet`1.Clear
  name: Clear
  nameWithType: OrderedHashSet<T>.Clear
  fullName: Common.OrderedHashSet<T>.Clear
  nameWithType.vb: OrderedHashSet(Of T).Clear
  fullName.vb: Common.OrderedHashSet(Of T).Clear
- uid: System.Collections.Generic.ICollection{{T}}.Clear
  commentId: M:System.Collections.Generic.ICollection{`0}.Clear
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Common.OrderedHashSet`1.Contains*
  commentId: Overload:Common.OrderedHashSet`1.Contains
  name: Contains
  nameWithType: OrderedHashSet<T>.Contains
  fullName: Common.OrderedHashSet<T>.Contains
  nameWithType.vb: OrderedHashSet(Of T).Contains
  fullName.vb: Common.OrderedHashSet(Of T).Contains
- uid: System.Collections.Generic.ICollection{{T}}.Contains({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Contains(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Common.OrderedHashSet`1.CopyTo*
  commentId: Overload:Common.OrderedHashSet`1.CopyTo
  name: CopyTo
  nameWithType: OrderedHashSet<T>.CopyTo
  fullName: Common.OrderedHashSet<T>.CopyTo
  nameWithType.vb: OrderedHashSet(Of T).CopyTo
  fullName.vb: Common.OrderedHashSet(Of T).CopyTo
- uid: System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Common.OrderedHashSet`1.UnionWith*
  commentId: Overload:Common.OrderedHashSet`1.UnionWith
  name: UnionWith
  nameWithType: OrderedHashSet<T>.UnionWith
  fullName: Common.OrderedHashSet<T>.UnionWith
  nameWithType.vb: OrderedHashSet(Of T).UnionWith
  fullName.vb: Common.OrderedHashSet(Of T).UnionWith
- uid: Common.OrderedHashSet`1.InternalIndexOf*
  commentId: Overload:Common.OrderedHashSet`1.InternalIndexOf
  name: InternalIndexOf
  nameWithType: OrderedHashSet<T>.InternalIndexOf
  fullName: Common.OrderedHashSet<T>.InternalIndexOf
  nameWithType.vb: OrderedHashSet(Of T).InternalIndexOf
  fullName.vb: Common.OrderedHashSet(Of T).InternalIndexOf
- uid: Common.OrderedHashSet`1.Remove*
  commentId: Overload:Common.OrderedHashSet`1.Remove
  name: Remove
  nameWithType: OrderedHashSet<T>.Remove
  fullName: Common.OrderedHashSet<T>.Remove
  nameWithType.vb: OrderedHashSet(Of T).Remove
  fullName.vb: Common.OrderedHashSet(Of T).Remove
- uid: System.Collections.Generic.ICollection{{T}}.Remove({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Remove(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Common.OrderedHashSet`1.GetEnumerator*
  commentId: Overload:Common.OrderedHashSet`1.GetEnumerator
  name: GetEnumerator
  nameWithType: OrderedHashSet<T>.GetEnumerator
  fullName: Common.OrderedHashSet<T>.GetEnumerator
  nameWithType.vb: OrderedHashSet(Of T).GetEnumerator
  fullName.vb: Common.OrderedHashSet(Of T).GetEnumerator
- uid: Common.OrderedHashSet`1.Enumerator
  commentId: T:Common.OrderedHashSet`1.Enumerator
  parent: Common
  name: OrderedHashSet.Enumerator<>
  nameWithType: OrderedHashSet.Enumerator<>
  fullName: Common.OrderedHashSet.Enumerator<>
  nameWithType.vb: OrderedHashSet.Enumerator(Of )
  fullName.vb: Common.OrderedHashSet.Enumerator(Of )
  name.vb: OrderedHashSet.Enumerator(Of )
  spec.csharp:
  - uid: Common.OrderedHashSet`1.Enumerator
    name: OrderedHashSet.Enumerator
    nameWithType: OrderedHashSet.Enumerator
    fullName: Common.OrderedHashSet.Enumerator
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Common.OrderedHashSet`1.Enumerator
    name: OrderedHashSet.Enumerator
    nameWithType: OrderedHashSet.Enumerator
    fullName: Common.OrderedHashSet.Enumerator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: Common.OrderedHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator*
  commentId: Overload:Common.OrderedHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  name: IEnumerable<T>.GetEnumerator
  nameWithType: OrderedHashSet<T>.IEnumerable<T>.GetEnumerator
  fullName: Common.OrderedHashSet<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
  nameWithType.vb: OrderedHashSet(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
  fullName.vb: Common.OrderedHashSet(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Common.OrderedHashSet`1.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Common.OrderedHashSet`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: OrderedHashSet<T>.IEnumerable.GetEnumerator
  fullName: Common.OrderedHashSet<T>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: OrderedHashSet(Of T).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: Common.OrderedHashSet(Of T).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Common.OrderedHashSet`1.MoveFirst*
  commentId: Overload:Common.OrderedHashSet`1.MoveFirst
  name: MoveFirst
  nameWithType: OrderedHashSet<T>.MoveFirst
  fullName: Common.OrderedHashSet<T>.MoveFirst
  nameWithType.vb: OrderedHashSet(Of T).MoveFirst
  fullName.vb: Common.OrderedHashSet(Of T).MoveFirst
- uid: Common.OrderedHashSet`1.MoveLast*
  commentId: Overload:Common.OrderedHashSet`1.MoveLast
  name: MoveLast
  nameWithType: OrderedHashSet<T>.MoveLast
  fullName: Common.OrderedHashSet<T>.MoveLast
  nameWithType.vb: OrderedHashSet(Of T).MoveLast
  fullName.vb: Common.OrderedHashSet(Of T).MoveLast
- uid: Common.OrderedHashSet`1.MoveBefore*
  commentId: Overload:Common.OrderedHashSet`1.MoveBefore
  name: MoveBefore
  nameWithType: OrderedHashSet<T>.MoveBefore
  fullName: Common.OrderedHashSet<T>.MoveBefore
  nameWithType.vb: OrderedHashSet(Of T).MoveBefore
  fullName.vb: Common.OrderedHashSet(Of T).MoveBefore
- uid: Common.OrderedHashSet`1.MoveAfter*
  commentId: Overload:Common.OrderedHashSet`1.MoveAfter
  name: MoveAfter
  nameWithType: OrderedHashSet<T>.MoveAfter
  fullName: Common.OrderedHashSet<T>.MoveAfter
  nameWithType.vb: OrderedHashSet(Of T).MoveAfter
  fullName.vb: Common.OrderedHashSet(Of T).MoveAfter
- uid: Common.OrderedHashSet`1.StartWith*
  commentId: Overload:Common.OrderedHashSet`1.StartWith
  name: StartWith
  nameWithType: OrderedHashSet<T>.StartWith
  fullName: Common.OrderedHashSet<T>.StartWith
  nameWithType.vb: OrderedHashSet(Of T).StartWith
  fullName.vb: Common.OrderedHashSet(Of T).StartWith
- uid: Common.OrderedHashSet`1.Range
  commentId: T:Common.OrderedHashSet`1.Range
  parent: Common
  name: OrderedHashSet.Range<>
  nameWithType: OrderedHashSet.Range<>
  fullName: Common.OrderedHashSet.Range<>
  nameWithType.vb: OrderedHashSet.Range(Of )
  fullName.vb: Common.OrderedHashSet.Range(Of )
  name.vb: OrderedHashSet.Range(Of )
  spec.csharp:
  - uid: Common.OrderedHashSet`1.Range
    name: OrderedHashSet.Range
    nameWithType: OrderedHashSet.Range
    fullName: Common.OrderedHashSet.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Common.OrderedHashSet`1.Range
    name: OrderedHashSet.Range
    nameWithType: OrderedHashSet.Range
    fullName: Common.OrderedHashSet.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: Common.OrderedHashSet`1.StartWithReversed*
  commentId: Overload:Common.OrderedHashSet`1.StartWithReversed
  name: StartWithReversed
  nameWithType: OrderedHashSet<T>.StartWithReversed
  fullName: Common.OrderedHashSet<T>.StartWithReversed
  nameWithType.vb: OrderedHashSet(Of T).StartWithReversed
  fullName.vb: Common.OrderedHashSet(Of T).StartWithReversed
- uid: Common.OrderedHashSet`1.ReverseRange
  commentId: T:Common.OrderedHashSet`1.ReverseRange
  parent: Common
  name: OrderedHashSet.ReverseRange<>
  nameWithType: OrderedHashSet.ReverseRange<>
  fullName: Common.OrderedHashSet.ReverseRange<>
  nameWithType.vb: OrderedHashSet.ReverseRange(Of )
  fullName.vb: Common.OrderedHashSet.ReverseRange(Of )
  name.vb: OrderedHashSet.ReverseRange(Of )
  spec.csharp:
  - uid: Common.OrderedHashSet`1.ReverseRange
    name: OrderedHashSet.ReverseRange
    nameWithType: OrderedHashSet.ReverseRange
    fullName: Common.OrderedHashSet.ReverseRange
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Common.OrderedHashSet`1.ReverseRange
    name: OrderedHashSet.ReverseRange
    nameWithType: OrderedHashSet.ReverseRange
    fullName: Common.OrderedHashSet.ReverseRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: Common.OrderedHashSet`1.RemoveWhere*
  commentId: Overload:Common.OrderedHashSet`1.RemoveWhere
  name: RemoveWhere
  nameWithType: OrderedHashSet<T>.RemoveWhere
  fullName: Common.OrderedHashSet<T>.RemoveWhere
  nameWithType.vb: OrderedHashSet(Of T).RemoveWhere
  fullName.vb: Common.OrderedHashSet(Of T).RemoveWhere
- uid: System.Predicate{{T}}
  commentId: T:System.Predicate{`0}
  parent: System
  definition: System.Predicate`1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Common.OrderedHashSet`1.RemoveRange*
  commentId: Overload:Common.OrderedHashSet`1.RemoveRange
  name: RemoveRange
  nameWithType: OrderedHashSet<T>.RemoveRange
  fullName: Common.OrderedHashSet<T>.RemoveRange
  nameWithType.vb: OrderedHashSet(Of T).RemoveRange
  fullName.vb: Common.OrderedHashSet(Of T).RemoveRange
- uid: Common.OrderedHashSet`1.Comparer*
  commentId: Overload:Common.OrderedHashSet`1.Comparer
  name: Comparer
  nameWithType: OrderedHashSet<T>.Comparer
  fullName: Common.OrderedHashSet<T>.Comparer
  nameWithType.vb: OrderedHashSet(Of T).Comparer
  fullName.vb: Common.OrderedHashSet(Of T).Comparer
- uid: Common.OrderedHashSet`1.TrimExcess*
  commentId: Overload:Common.OrderedHashSet`1.TrimExcess
  name: TrimExcess
  nameWithType: OrderedHashSet<T>.TrimExcess
  fullName: Common.OrderedHashSet<T>.TrimExcess
  nameWithType.vb: OrderedHashSet(Of T).TrimExcess
  fullName.vb: Common.OrderedHashSet(Of T).TrimExcess
- uid: Common.OrderedHashSet`1.Initialize*
  commentId: Overload:Common.OrderedHashSet`1.Initialize
  name: Initialize
  nameWithType: OrderedHashSet<T>.Initialize
  fullName: Common.OrderedHashSet<T>.Initialize
  nameWithType.vb: OrderedHashSet(Of T).Initialize
  fullName.vb: Common.OrderedHashSet(Of T).Initialize
- uid: Common.OrderedHashSet`1.IncreaseCapacity*
  commentId: Overload:Common.OrderedHashSet`1.IncreaseCapacity
  name: IncreaseCapacity
  nameWithType: OrderedHashSet<T>.IncreaseCapacity
  fullName: Common.OrderedHashSet<T>.IncreaseCapacity
  nameWithType.vb: OrderedHashSet(Of T).IncreaseCapacity
  fullName.vb: Common.OrderedHashSet(Of T).IncreaseCapacity
- uid: Common.OrderedHashSet`1.Add*
  commentId: Overload:Common.OrderedHashSet`1.Add
  name: Add
  nameWithType: OrderedHashSet<T>.Add
  fullName: Common.OrderedHashSet<T>.Add
  nameWithType.vb: OrderedHashSet(Of T).Add
  fullName.vb: Common.OrderedHashSet(Of T).Add
- uid: Common.OrderedHashSet`1.InternalGetHashCode*
  commentId: Overload:Common.OrderedHashSet`1.InternalGetHashCode
  name: InternalGetHashCode
  nameWithType: OrderedHashSet<T>.InternalGetHashCode
  fullName: Common.OrderedHashSet<T>.InternalGetHashCode
  nameWithType.vb: OrderedHashSet(Of T).InternalGetHashCode
  fullName.vb: Common.OrderedHashSet(Of T).InternalGetHashCode
