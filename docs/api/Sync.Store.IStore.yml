### YamlMime:ManagedReference
items:
- uid: Sync.Store.IStore
  commentId: T:Sync.Store.IStore
  id: IStore
  parent: Sync.Store
  children:
  - Sync.Store.IStore.Data
  - Sync.Store.IStore.Insert(System.Object)
  - Sync.Store.IStore.Remove(Sync.Store.ObjectId)
  langs:
  - csharp
  - vb
  name: IStore
  nameWithType: IStore
  fullName: Sync.Store.IStore
  type: Interface
  source:
    remote:
      path: source/Sync/Store/IStore.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: IStore
    path: ../source/Sync/Store/IStore.cs
    startLine: 38
  assemblies:
  - Sync
  namespace: Sync.Store
  syntax:
    content: public interface IStore
    content.vb: Public Interface IStore
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sync.Store.IStore.Data
  commentId: P:Sync.Store.IStore.Data
  id: Data
  parent: Sync.Store.IStore
  langs:
  - csharp
  - vb
  name: Data
  nameWithType: IStore.Data
  fullName: Sync.Store.IStore.Data
  type: Property
  source:
    remote:
      path: source/Sync/Store/IStore.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Data
    path: ../source/Sync/Store/IStore.cs
    startLine: 40
  assemblies:
  - Sync
  namespace: Sync.Store
  syntax:
    content: IReadOnlyDictionary<ObjectId, object> Data { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyDictionary{Sync.Store.ObjectId,System.Object}
    content.vb: ReadOnly Property Data As IReadOnlyDictionary(Of ObjectId, Object)
  overload: Sync.Store.IStore.Data*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sync.Store.IStore.Insert(System.Object)
  commentId: M:Sync.Store.IStore.Insert(System.Object)
  id: Insert(System.Object)
  parent: Sync.Store.IStore
  langs:
  - csharp
  - vb
  name: Insert(Object)
  nameWithType: IStore.Insert(Object)
  fullName: Sync.Store.IStore.Insert(System.Object)
  type: Method
  source:
    remote:
      path: source/Sync/Store/IStore.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Insert
    path: ../source/Sync/Store/IStore.cs
    startLine: 41
  assemblies:
  - Sync
  namespace: Sync.Store
  syntax:
    content: ObjectId Insert(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: Sync.Store.ObjectId
    content.vb: Function Insert(obj As Object) As ObjectId
  overload: Sync.Store.IStore.Insert*
- uid: Sync.Store.IStore.Remove(Sync.Store.ObjectId)
  commentId: M:Sync.Store.IStore.Remove(Sync.Store.ObjectId)
  id: Remove(Sync.Store.ObjectId)
  parent: Sync.Store.IStore
  langs:
  - csharp
  - vb
  name: Remove(ObjectId)
  nameWithType: IStore.Remove(ObjectId)
  fullName: Sync.Store.IStore.Remove(Sync.Store.ObjectId)
  type: Method
  source:
    remote:
      path: source/Sync/Store/IStore.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Remove
    path: ../source/Sync/Store/IStore.cs
    startLine: 42
  assemblies:
  - Sync
  namespace: Sync.Store
  syntax:
    content: bool Remove(ObjectId id)
    parameters:
    - id: id
      type: Sync.Store.ObjectId
    return:
      type: System.Boolean
    content.vb: Function Remove(id As ObjectId) As Boolean
  overload: Sync.Store.IStore.Remove*
references:
- uid: Sync.Store
  commentId: N:Sync.Store
  name: Sync.Store
  nameWithType: Sync.Store
  fullName: Sync.Store
- uid: Sync.Store.IStore.Data*
  commentId: Overload:Sync.Store.IStore.Data
  name: Data
  nameWithType: IStore.Data
  fullName: Sync.Store.IStore.Data
- uid: System.Collections.Generic.IReadOnlyDictionary{Sync.Store.ObjectId,System.Object}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{Sync.Store.ObjectId,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<ObjectId, Object>
  nameWithType: IReadOnlyDictionary<ObjectId, Object>
  fullName: System.Collections.Generic.IReadOnlyDictionary<Sync.Store.ObjectId, System.Object>
  nameWithType.vb: IReadOnlyDictionary(Of ObjectId, Object)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of Sync.Store.ObjectId, System.Object)
  name.vb: IReadOnlyDictionary(Of ObjectId, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sync.Store.ObjectId
    name: ObjectId
    nameWithType: ObjectId
    fullName: Sync.Store.ObjectId
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sync.Store.ObjectId
    name: ObjectId
    nameWithType: ObjectId
    fullName: Sync.Store.ObjectId
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sync.Store.IStore.Insert*
  commentId: Overload:Sync.Store.IStore.Insert
  name: Insert
  nameWithType: IStore.Insert
  fullName: Sync.Store.IStore.Insert
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Sync.Store.ObjectId
  commentId: T:Sync.Store.ObjectId
  parent: Sync.Store
  name: ObjectId
  nameWithType: ObjectId
  fullName: Sync.Store.ObjectId
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sync.Store.IStore.Remove*
  commentId: Overload:Sync.Store.IStore.Remove
  name: Remove
  nameWithType: IStore.Remove
  fullName: Sync.Store.IStore.Remove
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
