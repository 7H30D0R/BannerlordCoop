### YamlMime:ManagedReference
items:
- uid: Sync.PropertyPatch
  commentId: T:Sync.PropertyPatch
  id: PropertyPatch
  parent: Sync
  children:
  - Sync.PropertyPatch.#ctor(System.Type,Sync.EPatchBehaviour)
  - Sync.PropertyPatch.Getters
  - Sync.PropertyPatch.InterceptGetter(System.Reflection.PropertyInfo)
  - Sync.PropertyPatch.InterceptGetter(System.String)
  - Sync.PropertyPatch.InterceptSetter(System.Reflection.PropertyInfo)
  - Sync.PropertyPatch.InterceptSetter(System.String)
  - Sync.PropertyPatch.m_Behaviour
  - Sync.PropertyPatch.m_Declaring
  - Sync.PropertyPatch.m_GetterPatch
  - Sync.PropertyPatch.m_SetterPatch
  - Sync.PropertyPatch.Setters
  langs:
  - csharp
  - vb
  name: PropertyPatch
  nameWithType: PropertyPatch
  fullName: Sync.PropertyPatch
  type: Class
  source:
    remote:
      path: source/Sync/PropertyPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: PropertyPatch
    path: ../source/Sync/PropertyPatch.cs
    startLine: 11
  assemblies:
  - Sync
  namespace: Sync
  summary: "\nPatch generator for properties.\n"
  example: []
  syntax:
    content: public class PropertyPatch
    content.vb: Public Class PropertyPatch
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sync.PropertyPatch.m_Behaviour
  commentId: F:Sync.PropertyPatch.m_Behaviour
  id: m_Behaviour
  parent: Sync.PropertyPatch
  langs:
  - csharp
  - vb
  name: m_Behaviour
  nameWithType: PropertyPatch.m_Behaviour
  fullName: Sync.PropertyPatch.m_Behaviour
  type: Field
  source:
    remote:
      path: source/Sync/PropertyPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: m_Behaviour
    path: ../source/Sync/PropertyPatch.cs
    startLine: 13
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: readonly EPatchBehaviour m_Behaviour
    return:
      type: Sync.EPatchBehaviour
    content.vb: ReadOnly m_Behaviour As EPatchBehaviour
  modifiers.csharp:
  - readonly
  modifiers.vb:
  - ReadOnly
- uid: Sync.PropertyPatch.m_Declaring
  commentId: F:Sync.PropertyPatch.m_Declaring
  id: m_Declaring
  parent: Sync.PropertyPatch
  langs:
  - csharp
  - vb
  name: m_Declaring
  nameWithType: PropertyPatch.m_Declaring
  fullName: Sync.PropertyPatch.m_Declaring
  type: Field
  source:
    remote:
      path: source/Sync/PropertyPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: m_Declaring
    path: ../source/Sync/PropertyPatch.cs
    startLine: 14
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: readonly Type m_Declaring
    return:
      type: System.Type
    content.vb: ReadOnly m_Declaring As Type
  modifiers.csharp:
  - readonly
  modifiers.vb:
  - ReadOnly
- uid: Sync.PropertyPatch.m_GetterPatch
  commentId: F:Sync.PropertyPatch.m_GetterPatch
  id: m_GetterPatch
  parent: Sync.PropertyPatch
  langs:
  - csharp
  - vb
  name: m_GetterPatch
  nameWithType: PropertyPatch.m_GetterPatch
  fullName: Sync.PropertyPatch.m_GetterPatch
  type: Field
  source:
    remote:
      path: source/Sync/PropertyPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: m_GetterPatch
    path: ../source/Sync/PropertyPatch.cs
    startLine: 15
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: readonly MethodPatch m_GetterPatch
    return:
      type: Sync.MethodPatch
    content.vb: ReadOnly m_GetterPatch As MethodPatch
  modifiers.csharp:
  - readonly
  modifiers.vb:
  - ReadOnly
- uid: Sync.PropertyPatch.m_SetterPatch
  commentId: F:Sync.PropertyPatch.m_SetterPatch
  id: m_SetterPatch
  parent: Sync.PropertyPatch
  langs:
  - csharp
  - vb
  name: m_SetterPatch
  nameWithType: PropertyPatch.m_SetterPatch
  fullName: Sync.PropertyPatch.m_SetterPatch
  type: Field
  source:
    remote:
      path: source/Sync/PropertyPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: m_SetterPatch
    path: ../source/Sync/PropertyPatch.cs
    startLine: 16
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: readonly MethodPatch m_SetterPatch
    return:
      type: Sync.MethodPatch
    content.vb: ReadOnly m_SetterPatch As MethodPatch
  modifiers.csharp:
  - readonly
  modifiers.vb:
  - ReadOnly
- uid: Sync.PropertyPatch.#ctor(System.Type,Sync.EPatchBehaviour)
  commentId: M:Sync.PropertyPatch.#ctor(System.Type,Sync.EPatchBehaviour)
  id: '#ctor(System.Type,Sync.EPatchBehaviour)'
  parent: Sync.PropertyPatch
  langs:
  - csharp
  - vb
  name: PropertyPatch(Type, EPatchBehaviour)
  nameWithType: PropertyPatch.PropertyPatch(Type, EPatchBehaviour)
  fullName: Sync.PropertyPatch.PropertyPatch(System.Type, Sync.EPatchBehaviour)
  type: Constructor
  source:
    remote:
      path: source/Sync/PropertyPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: .ctor
    path: ../source/Sync/PropertyPatch.cs
    startLine: 18
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: public PropertyPatch([NotNull] Type declaringType, EPatchBehaviour eBehaviour = EPatchBehaviour.AlwaysCallOriginal)
    parameters:
    - id: declaringType
      type: System.Type
      attributes:
      - type: JetBrains.Annotations.NotNullAttribute
        ctor: JetBrains.Annotations.NotNullAttribute.#ctor
        arguments: []
    - id: eBehaviour
      type: Sync.EPatchBehaviour
    content.vb: Public Sub New(declaringType As Type, eBehaviour As EPatchBehaviour = EPatchBehaviour.AlwaysCallOriginal)
  overload: Sync.PropertyPatch.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sync.PropertyPatch.Setters
  commentId: P:Sync.PropertyPatch.Setters
  id: Setters
  parent: Sync.PropertyPatch
  langs:
  - csharp
  - vb
  name: Setters
  nameWithType: PropertyPatch.Setters
  fullName: Sync.PropertyPatch.Setters
  type: Property
  source:
    remote:
      path: source/Sync/PropertyPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Setters
    path: ../source/Sync/PropertyPatch.cs
    startLine: 28
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: public IEnumerable<MethodAccess> Setters { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Sync.MethodAccess}
    content.vb: Public ReadOnly Property Setters As IEnumerable(Of MethodAccess)
  overload: Sync.PropertyPatch.Setters*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sync.PropertyPatch.Getters
  commentId: P:Sync.PropertyPatch.Getters
  id: Getters
  parent: Sync.PropertyPatch
  langs:
  - csharp
  - vb
  name: Getters
  nameWithType: PropertyPatch.Getters
  fullName: Sync.PropertyPatch.Getters
  type: Property
  source:
    remote:
      path: source/Sync/PropertyPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Getters
    path: ../source/Sync/PropertyPatch.cs
    startLine: 29
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: public IEnumerable<MethodAccess> Getters { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Sync.MethodAccess}
    content.vb: Public ReadOnly Property Getters As IEnumerable(Of MethodAccess)
  overload: Sync.PropertyPatch.Getters*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sync.PropertyPatch.InterceptSetter(System.Reflection.PropertyInfo)
  commentId: M:Sync.PropertyPatch.InterceptSetter(System.Reflection.PropertyInfo)
  id: InterceptSetter(System.Reflection.PropertyInfo)
  parent: Sync.PropertyPatch
  langs:
  - csharp
  - vb
  name: InterceptSetter(PropertyInfo)
  nameWithType: PropertyPatch.InterceptSetter(PropertyInfo)
  fullName: Sync.PropertyPatch.InterceptSetter(System.Reflection.PropertyInfo)
  type: Method
  source:
    remote:
      path: source/Sync/PropertyPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: InterceptSetter
    path: ../source/Sync/PropertyPatch.cs
    startLine: 31
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: public PropertyPatch InterceptSetter([NotNull] PropertyInfo property)
    parameters:
    - id: property
      type: System.Reflection.PropertyInfo
      attributes:
      - type: JetBrains.Annotations.NotNullAttribute
        ctor: JetBrains.Annotations.NotNullAttribute.#ctor
        arguments: []
    return:
      type: Sync.PropertyPatch
    content.vb: Public Function InterceptSetter(property As PropertyInfo) As PropertyPatch
  overload: Sync.PropertyPatch.InterceptSetter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sync.PropertyPatch.InterceptSetter(System.String)
  commentId: M:Sync.PropertyPatch.InterceptSetter(System.String)
  id: InterceptSetter(System.String)
  parent: Sync.PropertyPatch
  langs:
  - csharp
  - vb
  name: InterceptSetter(String)
  nameWithType: PropertyPatch.InterceptSetter(String)
  fullName: Sync.PropertyPatch.InterceptSetter(System.String)
  type: Method
  source:
    remote:
      path: source/Sync/PropertyPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: InterceptSetter
    path: ../source/Sync/PropertyPatch.cs
    startLine: 40
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: public PropertyPatch InterceptSetter(string sProperty)
    parameters:
    - id: sProperty
      type: System.String
    return:
      type: Sync.PropertyPatch
    content.vb: Public Function InterceptSetter(sProperty As String) As PropertyPatch
  overload: Sync.PropertyPatch.InterceptSetter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sync.PropertyPatch.InterceptGetter(System.Reflection.PropertyInfo)
  commentId: M:Sync.PropertyPatch.InterceptGetter(System.Reflection.PropertyInfo)
  id: InterceptGetter(System.Reflection.PropertyInfo)
  parent: Sync.PropertyPatch
  langs:
  - csharp
  - vb
  name: InterceptGetter(PropertyInfo)
  nameWithType: PropertyPatch.InterceptGetter(PropertyInfo)
  fullName: Sync.PropertyPatch.InterceptGetter(System.Reflection.PropertyInfo)
  type: Method
  source:
    remote:
      path: source/Sync/PropertyPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: InterceptGetter
    path: ../source/Sync/PropertyPatch.cs
    startLine: 49
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: public PropertyPatch InterceptGetter([NotNull] PropertyInfo property)
    parameters:
    - id: property
      type: System.Reflection.PropertyInfo
      attributes:
      - type: JetBrains.Annotations.NotNullAttribute
        ctor: JetBrains.Annotations.NotNullAttribute.#ctor
        arguments: []
    return:
      type: Sync.PropertyPatch
    content.vb: Public Function InterceptGetter(property As PropertyInfo) As PropertyPatch
  overload: Sync.PropertyPatch.InterceptGetter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sync.PropertyPatch.InterceptGetter(System.String)
  commentId: M:Sync.PropertyPatch.InterceptGetter(System.String)
  id: InterceptGetter(System.String)
  parent: Sync.PropertyPatch
  langs:
  - csharp
  - vb
  name: InterceptGetter(String)
  nameWithType: PropertyPatch.InterceptGetter(String)
  fullName: Sync.PropertyPatch.InterceptGetter(System.String)
  type: Method
  source:
    remote:
      path: source/Sync/PropertyPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: InterceptGetter
    path: ../source/Sync/PropertyPatch.cs
    startLine: 58
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: public PropertyPatch InterceptGetter(string sProperty)
    parameters:
    - id: sProperty
      type: System.String
    return:
      type: Sync.PropertyPatch
    content.vb: Public Function InterceptGetter(sProperty As String) As PropertyPatch
  overload: Sync.PropertyPatch.InterceptGetter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Sync
  commentId: N:Sync
  name: Sync
  nameWithType: Sync
  fullName: Sync
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sync.EPatchBehaviour
  commentId: T:Sync.EPatchBehaviour
  parent: Sync
  name: EPatchBehaviour
  nameWithType: EPatchBehaviour
  fullName: Sync.EPatchBehaviour
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Sync.MethodPatch
  commentId: T:Sync.MethodPatch
  parent: Sync
  name: MethodPatch
  nameWithType: MethodPatch
  fullName: Sync.MethodPatch
- uid: Sync.PropertyPatch.#ctor*
  commentId: Overload:Sync.PropertyPatch.#ctor
  name: PropertyPatch
  nameWithType: PropertyPatch.PropertyPatch
  fullName: Sync.PropertyPatch.PropertyPatch
- uid: Sync.PropertyPatch.Setters*
  commentId: Overload:Sync.PropertyPatch.Setters
  name: Setters
  nameWithType: PropertyPatch.Setters
  fullName: Sync.PropertyPatch.Setters
- uid: System.Collections.Generic.IEnumerable{Sync.MethodAccess}
  commentId: T:System.Collections.Generic.IEnumerable{Sync.MethodAccess}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<MethodAccess>
  nameWithType: IEnumerable<MethodAccess>
  fullName: System.Collections.Generic.IEnumerable<Sync.MethodAccess>
  nameWithType.vb: IEnumerable(Of MethodAccess)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Sync.MethodAccess)
  name.vb: IEnumerable(Of MethodAccess)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sync.MethodAccess
    name: MethodAccess
    nameWithType: MethodAccess
    fullName: Sync.MethodAccess
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sync.MethodAccess
    name: MethodAccess
    nameWithType: MethodAccess
    fullName: Sync.MethodAccess
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sync.PropertyPatch.Getters*
  commentId: Overload:Sync.PropertyPatch.Getters
  name: Getters
  nameWithType: PropertyPatch.Getters
  fullName: Sync.PropertyPatch.Getters
- uid: Sync.PropertyPatch.InterceptSetter*
  commentId: Overload:Sync.PropertyPatch.InterceptSetter
  name: InterceptSetter
  nameWithType: PropertyPatch.InterceptSetter
  fullName: Sync.PropertyPatch.InterceptSetter
- uid: System.Reflection.PropertyInfo
  commentId: T:System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: Sync.PropertyPatch
  commentId: T:Sync.PropertyPatch
  parent: Sync
  name: PropertyPatch
  nameWithType: PropertyPatch
  fullName: Sync.PropertyPatch
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sync.PropertyPatch.InterceptGetter*
  commentId: Overload:Sync.PropertyPatch.InterceptGetter
  name: InterceptGetter
  nameWithType: PropertyPatch.InterceptGetter
  fullName: Sync.PropertyPatch.InterceptGetter
