### YamlMime:ManagedReference
items:
- uid: Sync.MethodPatch
  commentId: T:Sync.MethodPatch
  id: MethodPatch
  parent: Sync
  children:
  - Sync.MethodPatch.#ctor(System.Type)
  - Sync.MethodPatch.All
  - Sync.MethodPatch.DispatchPrefixExecution(Sync.MethodAccess,System.Object,System.Object[])
  - Sync.MethodPatch.Finalize
  - Sync.MethodPatch.Intercept(System.Reflection.MethodInfo,Sync.EMethodPatchFlag,Sync.EPatchBehaviour)
  - Sync.MethodPatch.Intercept(System.String,Sync.EMethodPatchFlag,Sync.EPatchBehaviour,System.Reflection.BindingFlags)
  - Sync.MethodPatch.InterceptAll(System.Reflection.BindingFlags,Sync.EMethodPatchFlag,Sync.EPatchBehaviour)
  - Sync.MethodPatch.InterceptGeneric(System.String,System.Type[],Sync.EMethodPatchFlag,Sync.EPatchBehaviour,System.Reflection.BindingFlags)
  - Sync.MethodPatch.m_Access
  - Sync.MethodPatch.m_Declaring
  - Sync.MethodPatch.Methods
  - Sync.MethodPatch.PatchPrefix(System.Reflection.MethodInfo,Sync.EMethodPatchFlag,Sync.EPatchBehaviour)
  - Sync.MethodPatch.TryGetMethod(System.Reflection.MethodInfo,Sync.MethodAccess@)
  - Sync.MethodPatch.TryGetMethod(System.String,Sync.MethodAccess@)
  - Sync.MethodPatch.TryGetMethod(System.String,System.Type[],Sync.MethodAccess@)
  langs:
  - csharp
  - vb
  name: MethodPatch
  nameWithType: MethodPatch
  fullName: Sync.MethodPatch
  type: Class
  source:
    remote:
      path: source/Sync/MethodPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: MethodPatch
    path: ../source/Sync/MethodPatch.cs
    startLine: 12
  assemblies:
  - Sync
  namespace: Sync
  summary: "\nPatch generator for method calls.\n"
  example: []
  syntax:
    content: public class MethodPatch
    content.vb: Public Class MethodPatch
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sync.MethodPatch.All
  commentId: F:Sync.MethodPatch.All
  id: All
  parent: Sync.MethodPatch
  langs:
  - csharp
  - vb
  name: All
  nameWithType: MethodPatch.All
  fullName: Sync.MethodPatch.All
  type: Field
  source:
    remote:
      path: source/Sync/MethodPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: All
    path: ../source/Sync/MethodPatch.cs
    startLine: 14
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: const BindingFlags All = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.GetField | BindingFlags.SetField | BindingFlags.GetProperty | BindingFlags.SetProperty
    return:
      type: System.Reflection.BindingFlags
    content.vb: Const All As BindingFlags = BindingFlags.Instance Or BindingFlags.Static Or BindingFlags.Public Or BindingFlags.NonPublic Or BindingFlags.GetField Or BindingFlags.SetField Or BindingFlags.GetProperty Or BindingFlags.SetProperty
  modifiers.csharp:
  - const
  modifiers.vb:
  - Const
- uid: Sync.MethodPatch.m_Access
  commentId: F:Sync.MethodPatch.m_Access
  id: m_Access
  parent: Sync.MethodPatch
  langs:
  - csharp
  - vb
  name: m_Access
  nameWithType: MethodPatch.m_Access
  fullName: Sync.MethodPatch.m_Access
  type: Field
  source:
    remote:
      path: source/Sync/MethodPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: m_Access
    path: ../source/Sync/MethodPatch.cs
    startLine: 22
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: readonly List<MethodAccess> m_Access
    return:
      type: System.Collections.Generic.List{Sync.MethodAccess}
    content.vb: ReadOnly m_Access As List(Of MethodAccess)
  modifiers.csharp:
  - readonly
  modifiers.vb:
  - ReadOnly
- uid: Sync.MethodPatch.m_Declaring
  commentId: F:Sync.MethodPatch.m_Declaring
  id: m_Declaring
  parent: Sync.MethodPatch
  langs:
  - csharp
  - vb
  name: m_Declaring
  nameWithType: MethodPatch.m_Declaring
  fullName: Sync.MethodPatch.m_Declaring
  type: Field
  source:
    remote:
      path: source/Sync/MethodPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: m_Declaring
    path: ../source/Sync/MethodPatch.cs
    startLine: 23
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: readonly Type m_Declaring
    return:
      type: System.Type
    content.vb: ReadOnly m_Declaring As Type
  modifiers.csharp:
  - readonly
  modifiers.vb:
  - ReadOnly
- uid: Sync.MethodPatch.#ctor(System.Type)
  commentId: M:Sync.MethodPatch.#ctor(System.Type)
  id: '#ctor(System.Type)'
  parent: Sync.MethodPatch
  langs:
  - csharp
  - vb
  name: MethodPatch(Type)
  nameWithType: MethodPatch.MethodPatch(Type)
  fullName: Sync.MethodPatch.MethodPatch(System.Type)
  type: Constructor
  source:
    remote:
      path: source/Sync/MethodPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: .ctor
    path: ../source/Sync/MethodPatch.cs
    startLine: 25
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: public MethodPatch([NotNull] Type declaringClass)
    parameters:
    - id: declaringClass
      type: System.Type
      attributes:
      - type: JetBrains.Annotations.NotNullAttribute
        ctor: JetBrains.Annotations.NotNullAttribute.#ctor
        arguments: []
    content.vb: Public Sub New(declaringClass As Type)
  overload: Sync.MethodPatch.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sync.MethodPatch.Methods
  commentId: P:Sync.MethodPatch.Methods
  id: Methods
  parent: Sync.MethodPatch
  langs:
  - csharp
  - vb
  name: Methods
  nameWithType: MethodPatch.Methods
  fullName: Sync.MethodPatch.Methods
  type: Property
  source:
    remote:
      path: source/Sync/MethodPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Methods
    path: ../source/Sync/MethodPatch.cs
    startLine: 30
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: public IEnumerable<MethodAccess> Methods { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Sync.MethodAccess}
    content.vb: Public ReadOnly Property Methods As IEnumerable(Of MethodAccess)
  overload: Sync.MethodPatch.Methods*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sync.MethodPatch.Finalize
  commentId: M:Sync.MethodPatch.Finalize
  id: Finalize
  parent: Sync.MethodPatch
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: MethodPatch.Finalize()
  fullName: Sync.MethodPatch.Finalize()
  type: Method
  source:
    remote:
      path: source/Sync/MethodPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Finalize
    path: ../source/Sync/MethodPatch.cs
    startLine: 32
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: Sync.MethodPatch.Finalize*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Sync.MethodPatch.InterceptAll(System.Reflection.BindingFlags,Sync.EMethodPatchFlag,Sync.EPatchBehaviour)
  commentId: M:Sync.MethodPatch.InterceptAll(System.Reflection.BindingFlags,Sync.EMethodPatchFlag,Sync.EPatchBehaviour)
  id: InterceptAll(System.Reflection.BindingFlags,Sync.EMethodPatchFlag,Sync.EPatchBehaviour)
  parent: Sync.MethodPatch
  langs:
  - csharp
  - vb
  name: InterceptAll(BindingFlags, EMethodPatchFlag, EPatchBehaviour)
  nameWithType: MethodPatch.InterceptAll(BindingFlags, EMethodPatchFlag, EPatchBehaviour)
  fullName: Sync.MethodPatch.InterceptAll(System.Reflection.BindingFlags, Sync.EMethodPatchFlag, Sync.EPatchBehaviour)
  type: Method
  source:
    remote:
      path: source/Sync/MethodPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: InterceptAll
    path: ../source/Sync/MethodPatch.cs
    startLine: 40
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: public MethodPatch InterceptAll(BindingFlags eBindingFlags = BindingFlags.DeclaredOnly | BindingFlags.Static | BindingFlags.Public, EMethodPatchFlag eFlags = EMethodPatchFlag.None, EPatchBehaviour eBehaviour = EPatchBehaviour.NeverCallOriginal)
    parameters:
    - id: eBindingFlags
      type: System.Reflection.BindingFlags
    - id: eFlags
      type: Sync.EMethodPatchFlag
    - id: eBehaviour
      type: Sync.EPatchBehaviour
    return:
      type: Sync.MethodPatch
    content.vb: Public Function InterceptAll(eBindingFlags As BindingFlags = BindingFlags.DeclaredOnly Or BindingFlags.Static Or BindingFlags.Public, eFlags As EMethodPatchFlag = EMethodPatchFlag.None, eBehaviour As EPatchBehaviour = EPatchBehaviour.NeverCallOriginal) As MethodPatch
  overload: Sync.MethodPatch.InterceptAll*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sync.MethodPatch.Intercept(System.Reflection.MethodInfo,Sync.EMethodPatchFlag,Sync.EPatchBehaviour)
  commentId: M:Sync.MethodPatch.Intercept(System.Reflection.MethodInfo,Sync.EMethodPatchFlag,Sync.EPatchBehaviour)
  id: Intercept(System.Reflection.MethodInfo,Sync.EMethodPatchFlag,Sync.EPatchBehaviour)
  parent: Sync.MethodPatch
  langs:
  - csharp
  - vb
  name: Intercept(MethodInfo, EMethodPatchFlag, EPatchBehaviour)
  nameWithType: MethodPatch.Intercept(MethodInfo, EMethodPatchFlag, EPatchBehaviour)
  fullName: Sync.MethodPatch.Intercept(System.Reflection.MethodInfo, Sync.EMethodPatchFlag, Sync.EPatchBehaviour)
  type: Method
  source:
    remote:
      path: source/Sync/MethodPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Intercept
    path: ../source/Sync/MethodPatch.cs
    startLine: 66
  assemblies:
  - Sync
  namespace: Sync
  summary: "\nCreates a <xref href=\"Sync.MethodAccess\" data-throw-if-not-resolved=\"false\"></xref> and patches in a prefix that relays all calls to\n<xref href=\"Sync.MethodAccess.InvokeOnBeforeCallHandler(System.Object%2cSystem.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public MethodPatch Intercept(MethodInfo method, EMethodPatchFlag eFlags = EMethodPatchFlag.None, EPatchBehaviour eBehaviour = EPatchBehaviour.NeverCallOriginal)
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: Method to track.
    - id: eFlags
      type: Sync.EMethodPatchFlag
      description: Flags for the generated interceptor.
    - id: eBehaviour
      type: Sync.EPatchBehaviour
      description: ''
    return:
      type: Sync.MethodPatch
      description: this
    content.vb: Public Function Intercept(method As MethodInfo, eFlags As EMethodPatchFlag = EMethodPatchFlag.None, eBehaviour As EPatchBehaviour = EPatchBehaviour.NeverCallOriginal) As MethodPatch
  overload: Sync.MethodPatch.Intercept*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf the method is not declared in class\n<xref href=\"Sync.MethodPatch.m_Declaring\" data-throw-if-not-resolved=\"false\"></xref>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sync.MethodPatch.Intercept(System.String,Sync.EMethodPatchFlag,Sync.EPatchBehaviour,System.Reflection.BindingFlags)
  commentId: M:Sync.MethodPatch.Intercept(System.String,Sync.EMethodPatchFlag,Sync.EPatchBehaviour,System.Reflection.BindingFlags)
  id: Intercept(System.String,Sync.EMethodPatchFlag,Sync.EPatchBehaviour,System.Reflection.BindingFlags)
  parent: Sync.MethodPatch
  langs:
  - csharp
  - vb
  name: Intercept(String, EMethodPatchFlag, EPatchBehaviour, BindingFlags)
  nameWithType: MethodPatch.Intercept(String, EMethodPatchFlag, EPatchBehaviour, BindingFlags)
  fullName: Sync.MethodPatch.Intercept(System.String, Sync.EMethodPatchFlag, Sync.EPatchBehaviour, System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: source/Sync/MethodPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Intercept
    path: ../source/Sync/MethodPatch.cs
    startLine: 91
  assemblies:
  - Sync
  namespace: Sync
  summary: "\nCreates a <xref href=\"Sync.MethodAccess\" data-throw-if-not-resolved=\"false\"></xref> and patches in a prefix that relays all calls to\n<xref href=\"Sync.MethodAccess.InvokeOnBeforeCallHandler(System.Object%2cSystem.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public MethodPatch Intercept(string sMethodName, EMethodPatchFlag eFlags = EMethodPatchFlag.None, EPatchBehaviour eBehaviour = EPatchBehaviour.NeverCallOriginal, BindingFlags eBindingFlags = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.GetField | BindingFlags.SetField | BindingFlags.GetProperty | BindingFlags.SetProperty)
    parameters:
    - id: sMethodName
      type: System.String
      description: Name of the method
    - id: eFlags
      type: Sync.EMethodPatchFlag
      description: Flags for the generated interceptor.
    - id: eBehaviour
      type: Sync.EPatchBehaviour
      description: ''
    - id: eBindingFlags
      type: System.Reflection.BindingFlags
    return:
      type: Sync.MethodPatch
      description: ''
    content.vb: Public Function Intercept(sMethodName As String, eFlags As EMethodPatchFlag = EMethodPatchFlag.None, eBehaviour As EPatchBehaviour = EPatchBehaviour.NeverCallOriginal, eBindingFlags As BindingFlags = BindingFlags.Instance Or BindingFlags.Static Or BindingFlags.Public Or BindingFlags.NonPublic Or BindingFlags.GetField Or BindingFlags.SetField Or BindingFlags.GetProperty Or BindingFlags.SetProperty) As MethodPatch
  overload: Sync.MethodPatch.Intercept*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If no method with that name exists.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sync.MethodPatch.InterceptGeneric(System.String,System.Type[],Sync.EMethodPatchFlag,Sync.EPatchBehaviour,System.Reflection.BindingFlags)
  commentId: M:Sync.MethodPatch.InterceptGeneric(System.String,System.Type[],Sync.EMethodPatchFlag,Sync.EPatchBehaviour,System.Reflection.BindingFlags)
  id: InterceptGeneric(System.String,System.Type[],Sync.EMethodPatchFlag,Sync.EPatchBehaviour,System.Reflection.BindingFlags)
  parent: Sync.MethodPatch
  langs:
  - csharp
  - vb
  name: InterceptGeneric(String, Type[], EMethodPatchFlag, EPatchBehaviour, BindingFlags)
  nameWithType: MethodPatch.InterceptGeneric(String, Type[], EMethodPatchFlag, EPatchBehaviour, BindingFlags)
  fullName: Sync.MethodPatch.InterceptGeneric(System.String, System.Type[], Sync.EMethodPatchFlag, Sync.EPatchBehaviour, System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: source/Sync/MethodPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: InterceptGeneric
    path: ../source/Sync/MethodPatch.cs
    startLine: 117
  assemblies:
  - Sync
  namespace: Sync
  summary: "\nDo not use, generics cannot be reliably patched as of right now. See\nhttps://github.com/pardeike/Harmony/issues/320\n"
  example: []
  syntax:
    content: >-
      [Obsolete]

      public MethodPatch InterceptGeneric(string sMethodName, Type[] genericInstantiations, EMethodPatchFlag eFlags = EMethodPatchFlag.None, EPatchBehaviour eBehaviour = EPatchBehaviour.NeverCallOriginal, BindingFlags eBindingFlags = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.GetField | BindingFlags.SetField | BindingFlags.GetProperty | BindingFlags.SetProperty)
    parameters:
    - id: sMethodName
      type: System.String
      description: ''
    - id: genericInstantiations
      type: System.Type[]
      description: ''
    - id: eFlags
      type: Sync.EMethodPatchFlag
      description: ''
    - id: eBehaviour
      type: Sync.EPatchBehaviour
      description: ''
    - id: eBindingFlags
      type: System.Reflection.BindingFlags
    return:
      type: Sync.MethodPatch
      description: ''
    content.vb: >-
      <Obsolete>

      Public Function InterceptGeneric(sMethodName As String, genericInstantiations As Type(), eFlags As EMethodPatchFlag = EMethodPatchFlag.None, eBehaviour As EPatchBehaviour = EPatchBehaviour.NeverCallOriginal, eBindingFlags As BindingFlags = BindingFlags.Instance Or BindingFlags.Static Or BindingFlags.Public Or BindingFlags.NonPublic Or BindingFlags.GetField Or BindingFlags.SetField Or BindingFlags.GetProperty Or BindingFlags.SetProperty) As MethodPatch
  overload: Sync.MethodPatch.InterceptGeneric*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor
    arguments: []
  nameWithType.vb: MethodPatch.InterceptGeneric(String, Type(), EMethodPatchFlag, EPatchBehaviour, BindingFlags)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sync.MethodPatch.InterceptGeneric(System.String, System.Type(), Sync.EMethodPatchFlag, Sync.EPatchBehaviour, System.Reflection.BindingFlags)
  name.vb: InterceptGeneric(String, Type(), EMethodPatchFlag, EPatchBehaviour, BindingFlags)
- uid: Sync.MethodPatch.TryGetMethod(System.String,Sync.MethodAccess@)
  commentId: M:Sync.MethodPatch.TryGetMethod(System.String,Sync.MethodAccess@)
  id: TryGetMethod(System.String,Sync.MethodAccess@)
  parent: Sync.MethodPatch
  langs:
  - csharp
  - vb
  name: TryGetMethod(String, out MethodAccess)
  nameWithType: MethodPatch.TryGetMethod(String, out MethodAccess)
  fullName: Sync.MethodPatch.TryGetMethod(System.String, out Sync.MethodAccess)
  type: Method
  source:
    remote:
      path: source/Sync/MethodPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: TryGetMethod
    path: ../source/Sync/MethodPatch.cs
    startLine: 139
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: public bool TryGetMethod(string sMethodName, out MethodAccess methodAccess)
    parameters:
    - id: sMethodName
      type: System.String
    - id: methodAccess
      type: Sync.MethodAccess
    return:
      type: System.Boolean
    content.vb: Public Function TryGetMethod(sMethodName As String, ByRef methodAccess As MethodAccess) As Boolean
  overload: Sync.MethodPatch.TryGetMethod*
  nameWithType.vb: MethodPatch.TryGetMethod(String, ByRef MethodAccess)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sync.MethodPatch.TryGetMethod(System.String, ByRef Sync.MethodAccess)
  name.vb: TryGetMethod(String, ByRef MethodAccess)
- uid: Sync.MethodPatch.TryGetMethod(System.String,System.Type[],Sync.MethodAccess@)
  commentId: M:Sync.MethodPatch.TryGetMethod(System.String,System.Type[],Sync.MethodAccess@)
  id: TryGetMethod(System.String,System.Type[],Sync.MethodAccess@)
  parent: Sync.MethodPatch
  langs:
  - csharp
  - vb
  name: TryGetMethod(String, Type[], out MethodAccess)
  nameWithType: MethodPatch.TryGetMethod(String, Type[], out MethodAccess)
  fullName: Sync.MethodPatch.TryGetMethod(System.String, System.Type[], out Sync.MethodAccess)
  type: Method
  source:
    remote:
      path: source/Sync/MethodPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: TryGetMethod
    path: ../source/Sync/MethodPatch.cs
    startLine: 152
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: public bool TryGetMethod(string sMethodName, Type[] genericArguments, out MethodAccess methodAccess)
    parameters:
    - id: sMethodName
      type: System.String
    - id: genericArguments
      type: System.Type[]
    - id: methodAccess
      type: Sync.MethodAccess
    return:
      type: System.Boolean
    content.vb: Public Function TryGetMethod(sMethodName As String, genericArguments As Type(), ByRef methodAccess As MethodAccess) As Boolean
  overload: Sync.MethodPatch.TryGetMethod*
  nameWithType.vb: MethodPatch.TryGetMethod(String, Type(), ByRef MethodAccess)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sync.MethodPatch.TryGetMethod(System.String, System.Type(), ByRef Sync.MethodAccess)
  name.vb: TryGetMethod(String, Type(), ByRef MethodAccess)
- uid: Sync.MethodPatch.TryGetMethod(System.Reflection.MethodInfo,Sync.MethodAccess@)
  commentId: M:Sync.MethodPatch.TryGetMethod(System.Reflection.MethodInfo,Sync.MethodAccess@)
  id: TryGetMethod(System.Reflection.MethodInfo,Sync.MethodAccess@)
  parent: Sync.MethodPatch
  langs:
  - csharp
  - vb
  name: TryGetMethod(MethodInfo, out MethodAccess)
  nameWithType: MethodPatch.TryGetMethod(MethodInfo, out MethodAccess)
  fullName: Sync.MethodPatch.TryGetMethod(System.Reflection.MethodInfo, out Sync.MethodAccess)
  type: Method
  source:
    remote:
      path: source/Sync/MethodPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: TryGetMethod
    path: ../source/Sync/MethodPatch.cs
    startLine: 172
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: public bool TryGetMethod(MethodInfo methodInfo, out MethodAccess methodAccess)
    parameters:
    - id: methodInfo
      type: System.Reflection.MethodInfo
    - id: methodAccess
      type: Sync.MethodAccess
    return:
      type: System.Boolean
    content.vb: Public Function TryGetMethod(methodInfo As MethodInfo, ByRef methodAccess As MethodAccess) As Boolean
  overload: Sync.MethodPatch.TryGetMethod*
  nameWithType.vb: MethodPatch.TryGetMethod(MethodInfo, ByRef MethodAccess)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sync.MethodPatch.TryGetMethod(System.Reflection.MethodInfo, ByRef Sync.MethodAccess)
  name.vb: TryGetMethod(MethodInfo, ByRef MethodAccess)
- uid: Sync.MethodPatch.PatchPrefix(System.Reflection.MethodInfo,Sync.EMethodPatchFlag,Sync.EPatchBehaviour)
  commentId: M:Sync.MethodPatch.PatchPrefix(System.Reflection.MethodInfo,Sync.EMethodPatchFlag,Sync.EPatchBehaviour)
  id: PatchPrefix(System.Reflection.MethodInfo,Sync.EMethodPatchFlag,Sync.EPatchBehaviour)
  parent: Sync.MethodPatch
  langs:
  - csharp
  - vb
  name: PatchPrefix(MethodInfo, EMethodPatchFlag, EPatchBehaviour)
  nameWithType: MethodPatch.PatchPrefix(MethodInfo, EMethodPatchFlag, EPatchBehaviour)
  fullName: Sync.MethodPatch.PatchPrefix(System.Reflection.MethodInfo, Sync.EMethodPatchFlag, Sync.EPatchBehaviour)
  type: Method
  source:
    remote:
      path: source/Sync/MethodPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: PatchPrefix
    path: ../source/Sync/MethodPatch.cs
    startLine: 178
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: void PatchPrefix(MethodInfo original, EMethodPatchFlag eFlags, EPatchBehaviour eBehaviour)
    parameters:
    - id: original
      type: System.Reflection.MethodInfo
    - id: eFlags
      type: Sync.EMethodPatchFlag
    - id: eBehaviour
      type: Sync.EPatchBehaviour
    content.vb: Sub PatchPrefix(original As MethodInfo, eFlags As EMethodPatchFlag, eBehaviour As EPatchBehaviour)
  overload: Sync.MethodPatch.PatchPrefix*
- uid: Sync.MethodPatch.DispatchPrefixExecution(Sync.MethodAccess,System.Object,System.Object[])
  commentId: M:Sync.MethodPatch.DispatchPrefixExecution(Sync.MethodAccess,System.Object,System.Object[])
  id: DispatchPrefixExecution(Sync.MethodAccess,System.Object,System.Object[])
  parent: Sync.MethodPatch
  langs:
  - csharp
  - vb
  name: DispatchPrefixExecution(MethodAccess, Object, Object[])
  nameWithType: MethodPatch.DispatchPrefixExecution(MethodAccess, Object, Object[])
  fullName: Sync.MethodPatch.DispatchPrefixExecution(Sync.MethodAccess, System.Object, System.Object[])
  type: Method
  source:
    remote:
      path: source/Sync/MethodPatch.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: DispatchPrefixExecution
    path: ../source/Sync/MethodPatch.cs
    startLine: 191
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: static bool DispatchPrefixExecution(MethodAccess methodAccess, object instance, params object[] args)
    parameters:
    - id: methodAccess
      type: Sync.MethodAccess
    - id: instance
      type: System.Object
    - id: args
      type: System.Object[]
    return:
      type: System.Boolean
    content.vb: Shared Function DispatchPrefixExecution(methodAccess As MethodAccess, instance As Object, ParamArray args As Object()) As Boolean
  overload: Sync.MethodPatch.DispatchPrefixExecution*
  nameWithType.vb: MethodPatch.DispatchPrefixExecution(MethodAccess, Object, Object())
  modifiers.csharp:
  - static
  modifiers.vb:
  - Shared
  fullName.vb: Sync.MethodPatch.DispatchPrefixExecution(Sync.MethodAccess, System.Object, System.Object())
  name.vb: DispatchPrefixExecution(MethodAccess, Object, Object())
references:
- uid: Sync
  commentId: N:Sync
  name: Sync
  nameWithType: Sync
  fullName: Sync
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Reflection.BindingFlags
  commentId: T:System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: true
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Collections.Generic.List{Sync.MethodAccess}
  commentId: T:System.Collections.Generic.List{Sync.MethodAccess}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<MethodAccess>
  nameWithType: List<MethodAccess>
  fullName: System.Collections.Generic.List<Sync.MethodAccess>
  nameWithType.vb: List(Of MethodAccess)
  fullName.vb: System.Collections.Generic.List(Of Sync.MethodAccess)
  name.vb: List(Of MethodAccess)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sync.MethodAccess
    name: MethodAccess
    nameWithType: MethodAccess
    fullName: Sync.MethodAccess
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sync.MethodAccess
    name: MethodAccess
    nameWithType: MethodAccess
    fullName: Sync.MethodAccess
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Sync.MethodPatch.#ctor*
  commentId: Overload:Sync.MethodPatch.#ctor
  name: MethodPatch
  nameWithType: MethodPatch.MethodPatch
  fullName: Sync.MethodPatch.MethodPatch
- uid: Sync.MethodPatch.Methods*
  commentId: Overload:Sync.MethodPatch.Methods
  name: Methods
  nameWithType: MethodPatch.Methods
  fullName: Sync.MethodPatch.Methods
- uid: System.Collections.Generic.IEnumerable{Sync.MethodAccess}
  commentId: T:System.Collections.Generic.IEnumerable{Sync.MethodAccess}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<MethodAccess>
  nameWithType: IEnumerable<MethodAccess>
  fullName: System.Collections.Generic.IEnumerable<Sync.MethodAccess>
  nameWithType.vb: IEnumerable(Of MethodAccess)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Sync.MethodAccess)
  name.vb: IEnumerable(Of MethodAccess)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sync.MethodAccess
    name: MethodAccess
    nameWithType: MethodAccess
    fullName: Sync.MethodAccess
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sync.MethodAccess
    name: MethodAccess
    nameWithType: MethodAccess
    fullName: Sync.MethodAccess
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sync.MethodPatch.Finalize*
  commentId: Overload:Sync.MethodPatch.Finalize
  name: Finalize
  nameWithType: MethodPatch.Finalize
  fullName: Sync.MethodPatch.Finalize
- uid: Sync.MethodPatch.InterceptAll*
  commentId: Overload:Sync.MethodPatch.InterceptAll
  name: InterceptAll
  nameWithType: MethodPatch.InterceptAll
  fullName: Sync.MethodPatch.InterceptAll
- uid: Sync.EMethodPatchFlag
  commentId: T:Sync.EMethodPatchFlag
  parent: Sync
  name: EMethodPatchFlag
  nameWithType: EMethodPatchFlag
  fullName: Sync.EMethodPatchFlag
- uid: Sync.EPatchBehaviour
  commentId: T:Sync.EPatchBehaviour
  parent: Sync
  name: EPatchBehaviour
  nameWithType: EPatchBehaviour
  fullName: Sync.EPatchBehaviour
- uid: Sync.MethodPatch
  commentId: T:Sync.MethodPatch
  parent: Sync
  name: MethodPatch
  nameWithType: MethodPatch
  fullName: Sync.MethodPatch
- uid: Sync.MethodAccess
  commentId: T:Sync.MethodAccess
  parent: Sync
  name: MethodAccess
  nameWithType: MethodAccess
  fullName: Sync.MethodAccess
- uid: Sync.MethodAccess.InvokeOnBeforeCallHandler(System.Object,System.Object[])
  commentId: M:Sync.MethodAccess.InvokeOnBeforeCallHandler(System.Object,System.Object[])
  isExternal: true
- uid: Sync.MethodPatch.m_Declaring
  commentId: F:Sync.MethodPatch.m_Declaring
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: Sync.MethodPatch.Intercept*
  commentId: Overload:Sync.MethodPatch.Intercept
  name: Intercept
  nameWithType: MethodPatch.Intercept
  fullName: Sync.MethodPatch.Intercept
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sync.MethodPatch.InterceptGeneric*
  commentId: Overload:Sync.MethodPatch.InterceptGeneric
  name: InterceptGeneric
  nameWithType: MethodPatch.InterceptGeneric
  fullName: Sync.MethodPatch.InterceptGeneric
- uid: System.Type[]
  isExternal: true
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Sync.MethodPatch.TryGetMethod*
  commentId: Overload:Sync.MethodPatch.TryGetMethod
  name: TryGetMethod
  nameWithType: MethodPatch.TryGetMethod
  fullName: Sync.MethodPatch.TryGetMethod
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sync.MethodPatch.PatchPrefix*
  commentId: Overload:Sync.MethodPatch.PatchPrefix
  name: PatchPrefix
  nameWithType: MethodPatch.PatchPrefix
  fullName: Sync.MethodPatch.PatchPrefix
- uid: Sync.MethodPatch.DispatchPrefixExecution*
  commentId: Overload:Sync.MethodPatch.DispatchPrefixExecution
  name: DispatchPrefixExecution
  nameWithType: MethodPatch.DispatchPrefixExecution
  fullName: Sync.MethodPatch.DispatchPrefixExecution
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
