### YamlMime:ManagedReference
items:
- uid: Sync.ValueAccess
  commentId: T:Sync.ValueAccess
  id: ValueAccess
  parent: Sync
  children:
  - Sync.ValueAccess.Get(System.Object)
  - Sync.ValueAccess.Set(System.Object,System.Object)
  langs:
  - csharp
  - vb
  name: ValueAccess
  nameWithType: ValueAccess
  fullName: Sync.ValueAccess
  type: Class
  source:
    remote:
      path: source/Sync/ValueAccess.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: ValueAccess
    path: ../source/Sync/ValueAccess.cs
    startLine: 7
  assemblies:
  - Sync
  namespace: Sync
  summary: "\nType-erased interface for setting and getting a value from an instance.\n"
  example: []
  syntax:
    content: 'public abstract class ValueAccess : Tracker'
    content.vb: >-
      Public MustInherit Class ValueAccess

          Inherits Tracker
  inheritance:
  - System.Object
  - Sync.Tracker
  derivedClasses:
  - Sync.FieldAccess
  - Sync.FieldAccessGroup`2
  inheritedMembers:
  - Sync.Tracker.m_InstanceSpecificHandlers
  - Sync.Tracker.GlobalHandler
  - Sync.Tracker.InstanceSpecificHandlers
  - Sync.Tracker.SetHandler(System.Object,System.Action{System.Object})
  - Sync.Tracker.GetHandler(System.Object)
  - Sync.Tracker.RemoveHandler(System.Object)
  - Sync.Tracker.SetGlobalHandler(System.Action{System.Object,System.Object})
  - Sync.Tracker.RemoveGlobalHandler
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Sync.ValueAccess.Sync.FieldChangeBuffer.OnBeforeExpectedChange(System.Object)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Sync.ValueAccess.Get(System.Object)
  commentId: M:Sync.ValueAccess.Get(System.Object)
  id: Get(System.Object)
  parent: Sync.ValueAccess
  langs:
  - csharp
  - vb
  name: Get(Object)
  nameWithType: ValueAccess.Get(Object)
  fullName: Sync.ValueAccess.Get(System.Object)
  type: Method
  source:
    remote:
      path: source/Sync/ValueAccess.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Get
    path: ../source/Sync/ValueAccess.cs
    startLine: 15
  assemblies:
  - Sync
  namespace: Sync
  summary: "\nReturns the current value of an instance of this <xref href=\"Sync.ValueAccess\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract object Get(object target)
    parameters:
    - id: target
      type: System.Object
      description: Instance to get the value from.
    return:
      type: System.Object
      description: Value
    content.vb: Public MustOverride Function Get(target As Object) As Object
  overload: Sync.ValueAccess.Get*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the target or value are not of the expected type.
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Sync.ValueAccess.Set(System.Object,System.Object)
  commentId: M:Sync.ValueAccess.Set(System.Object,System.Object)
  id: Set(System.Object,System.Object)
  parent: Sync.ValueAccess
  langs:
  - csharp
  - vb
  name: Set(Object, Object)
  nameWithType: ValueAccess.Set(Object, Object)
  fullName: Sync.ValueAccess.Set(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: source/Sync/ValueAccess.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Set
    path: ../source/Sync/ValueAccess.cs
    startLine: 23
  assemblies:
  - Sync
  namespace: Sync
  summary: "\nSets the current value of an instance of this <xref href=\"Sync.ValueAccess\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract void Set(object target, object value)
    parameters:
    - id: target
      type: System.Object
      description: Instance to set the value on.
    - id: value
      type: System.Object
      description: Value to set.
    content.vb: Public MustOverride Sub Set(target As Object, value As Object)
  overload: Sync.ValueAccess.Set*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the target or value are not of the expected type.
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: Sync
  commentId: N:Sync
  name: Sync
  nameWithType: Sync
  fullName: Sync
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Sync.Tracker
  commentId: T:Sync.Tracker
  parent: Sync
  name: Tracker
  nameWithType: Tracker
  fullName: Sync.Tracker
- uid: Sync.Tracker.m_InstanceSpecificHandlers
  commentId: F:Sync.Tracker.m_InstanceSpecificHandlers
  parent: Sync.Tracker
  name: m_InstanceSpecificHandlers
  nameWithType: Tracker.m_InstanceSpecificHandlers
  fullName: Sync.Tracker.m_InstanceSpecificHandlers
- uid: Sync.Tracker.GlobalHandler
  commentId: P:Sync.Tracker.GlobalHandler
  parent: Sync.Tracker
  name: GlobalHandler
  nameWithType: Tracker.GlobalHandler
  fullName: Sync.Tracker.GlobalHandler
- uid: Sync.Tracker.InstanceSpecificHandlers
  commentId: P:Sync.Tracker.InstanceSpecificHandlers
  parent: Sync.Tracker
  name: InstanceSpecificHandlers
  nameWithType: Tracker.InstanceSpecificHandlers
  fullName: Sync.Tracker.InstanceSpecificHandlers
- uid: Sync.Tracker.SetHandler(System.Object,System.Action{System.Object})
  commentId: M:Sync.Tracker.SetHandler(System.Object,System.Action{System.Object})
  parent: Sync.Tracker
  isExternal: true
  name: SetHandler(Object, Action<Object>)
  nameWithType: Tracker.SetHandler(Object, Action<Object>)
  fullName: Sync.Tracker.SetHandler(System.Object, System.Action<System.Object>)
  nameWithType.vb: Tracker.SetHandler(Object, Action(Of Object))
  fullName.vb: Sync.Tracker.SetHandler(System.Object, System.Action(Of System.Object))
  name.vb: SetHandler(Object, Action(Of Object))
  spec.csharp:
  - uid: Sync.Tracker.SetHandler(System.Object,System.Action{System.Object})
    name: SetHandler
    nameWithType: Tracker.SetHandler
    fullName: Sync.Tracker.SetHandler
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sync.Tracker.SetHandler(System.Object,System.Action{System.Object})
    name: SetHandler
    nameWithType: Tracker.SetHandler
    fullName: Sync.Tracker.SetHandler
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sync.Tracker.GetHandler(System.Object)
  commentId: M:Sync.Tracker.GetHandler(System.Object)
  parent: Sync.Tracker
  isExternal: true
  name: GetHandler(Object)
  nameWithType: Tracker.GetHandler(Object)
  fullName: Sync.Tracker.GetHandler(System.Object)
  spec.csharp:
  - uid: Sync.Tracker.GetHandler(System.Object)
    name: GetHandler
    nameWithType: Tracker.GetHandler
    fullName: Sync.Tracker.GetHandler
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sync.Tracker.GetHandler(System.Object)
    name: GetHandler
    nameWithType: Tracker.GetHandler
    fullName: Sync.Tracker.GetHandler
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sync.Tracker.RemoveHandler(System.Object)
  commentId: M:Sync.Tracker.RemoveHandler(System.Object)
  parent: Sync.Tracker
  isExternal: true
  name: RemoveHandler(Object)
  nameWithType: Tracker.RemoveHandler(Object)
  fullName: Sync.Tracker.RemoveHandler(System.Object)
  spec.csharp:
  - uid: Sync.Tracker.RemoveHandler(System.Object)
    name: RemoveHandler
    nameWithType: Tracker.RemoveHandler
    fullName: Sync.Tracker.RemoveHandler
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sync.Tracker.RemoveHandler(System.Object)
    name: RemoveHandler
    nameWithType: Tracker.RemoveHandler
    fullName: Sync.Tracker.RemoveHandler
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sync.Tracker.SetGlobalHandler(System.Action{System.Object,System.Object})
  commentId: M:Sync.Tracker.SetGlobalHandler(System.Action{System.Object,System.Object})
  parent: Sync.Tracker
  isExternal: true
  name: SetGlobalHandler(Action<Object, Object>)
  nameWithType: Tracker.SetGlobalHandler(Action<Object, Object>)
  fullName: Sync.Tracker.SetGlobalHandler(System.Action<System.Object, System.Object>)
  nameWithType.vb: Tracker.SetGlobalHandler(Action(Of Object, Object))
  fullName.vb: Sync.Tracker.SetGlobalHandler(System.Action(Of System.Object, System.Object))
  name.vb: SetGlobalHandler(Action(Of Object, Object))
  spec.csharp:
  - uid: Sync.Tracker.SetGlobalHandler(System.Action{System.Object,System.Object})
    name: SetGlobalHandler
    nameWithType: Tracker.SetGlobalHandler
    fullName: Sync.Tracker.SetGlobalHandler
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sync.Tracker.SetGlobalHandler(System.Action{System.Object,System.Object})
    name: SetGlobalHandler
    nameWithType: Tracker.SetGlobalHandler
    fullName: Sync.Tracker.SetGlobalHandler
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sync.Tracker.RemoveGlobalHandler
  commentId: M:Sync.Tracker.RemoveGlobalHandler
  parent: Sync.Tracker
  name: RemoveGlobalHandler()
  nameWithType: Tracker.RemoveGlobalHandler()
  fullName: Sync.Tracker.RemoveGlobalHandler()
  spec.csharp:
  - uid: Sync.Tracker.RemoveGlobalHandler
    name: RemoveGlobalHandler
    nameWithType: Tracker.RemoveGlobalHandler
    fullName: Sync.Tracker.RemoveGlobalHandler
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sync.Tracker.RemoveGlobalHandler
    name: RemoveGlobalHandler
    nameWithType: Tracker.RemoveGlobalHandler
    fullName: Sync.Tracker.RemoveGlobalHandler
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sync.ValueAccess.Sync.FieldChangeBuffer.OnBeforeExpectedChange(System.Object)
  commentId: M:Sync.FieldChangeBuffer.OnBeforeExpectedChange(Sync.ValueAccess,System.Object)
  parent: Sync.FieldChangeBuffer
  definition: Sync.FieldChangeBuffer.OnBeforeExpectedChange(Sync.ValueAccess,System.Object)
  name: OnBeforeExpectedChange(Object)
  nameWithType: FieldChangeBuffer.OnBeforeExpectedChange(Object)
  fullName: Sync.FieldChangeBuffer.OnBeforeExpectedChange(System.Object)
  spec.csharp:
  - uid: Sync.FieldChangeBuffer.OnBeforeExpectedChange(System.Object)
    name: OnBeforeExpectedChange
    nameWithType: FieldChangeBuffer.OnBeforeExpectedChange
    fullName: Sync.FieldChangeBuffer.OnBeforeExpectedChange
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sync.FieldChangeBuffer.OnBeforeExpectedChange(System.Object)
    name: OnBeforeExpectedChange
    nameWithType: FieldChangeBuffer.OnBeforeExpectedChange
    fullName: Sync.FieldChangeBuffer.OnBeforeExpectedChange
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sync.FieldChangeBuffer.OnBeforeExpectedChange(Sync.ValueAccess,System.Object)
  commentId: M:Sync.FieldChangeBuffer.OnBeforeExpectedChange(Sync.ValueAccess,System.Object)
  isExternal: true
  name: OnBeforeExpectedChange(ValueAccess, Object)
  nameWithType: FieldChangeBuffer.OnBeforeExpectedChange(ValueAccess, Object)
  fullName: Sync.FieldChangeBuffer.OnBeforeExpectedChange(Sync.ValueAccess, System.Object)
  spec.csharp:
  - uid: Sync.FieldChangeBuffer.OnBeforeExpectedChange(Sync.ValueAccess,System.Object)
    name: OnBeforeExpectedChange
    nameWithType: FieldChangeBuffer.OnBeforeExpectedChange
    fullName: Sync.FieldChangeBuffer.OnBeforeExpectedChange
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sync.ValueAccess
    name: ValueAccess
    nameWithType: ValueAccess
    fullName: Sync.ValueAccess
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sync.FieldChangeBuffer.OnBeforeExpectedChange(Sync.ValueAccess,System.Object)
    name: OnBeforeExpectedChange
    nameWithType: FieldChangeBuffer.OnBeforeExpectedChange
    fullName: Sync.FieldChangeBuffer.OnBeforeExpectedChange
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sync.ValueAccess
    name: ValueAccess
    nameWithType: ValueAccess
    fullName: Sync.ValueAccess
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sync.FieldChangeBuffer
  commentId: T:Sync.FieldChangeBuffer
  parent: Sync
  name: FieldChangeBuffer
  nameWithType: FieldChangeBuffer
  fullName: Sync.FieldChangeBuffer
- uid: Sync.ValueAccess
  commentId: T:Sync.ValueAccess
  parent: Sync
  name: ValueAccess
  nameWithType: ValueAccess
  fullName: Sync.ValueAccess
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: Sync.ValueAccess.Get*
  commentId: Overload:Sync.ValueAccess.Get
  name: Get
  nameWithType: ValueAccess.Get
  fullName: Sync.ValueAccess.Get
- uid: Sync.ValueAccess.Set*
  commentId: Overload:Sync.ValueAccess.Set
  name: Set
  nameWithType: ValueAccess.Set
  fullName: Sync.ValueAccess.Set
