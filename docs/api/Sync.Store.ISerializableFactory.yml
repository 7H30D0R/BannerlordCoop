### YamlMime:ManagedReference
items:
- uid: Sync.Store.ISerializableFactory
  commentId: T:Sync.Store.ISerializableFactory
  id: ISerializableFactory
  parent: Sync.Store
  children:
  - Sync.Store.ISerializableFactory.Unwrap(System.Object)
  - Sync.Store.ISerializableFactory.Wrap(System.Object)
  langs:
  - csharp
  - vb
  name: ISerializableFactory
  nameWithType: ISerializableFactory
  fullName: Sync.Store.ISerializableFactory
  type: Interface
  source:
    remote:
      path: source/Sync/Store/ISerializableFactory.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: ISerializableFactory
    path: ../source/Sync/Store/ISerializableFactory.cs
    startLine: 2
  assemblies:
  - Sync
  namespace: Sync.Store
  syntax:
    content: public interface ISerializableFactory
    content.vb: Public Interface ISerializableFactory
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sync.Store.ISerializableFactory.Wrap(System.Object)
  commentId: M:Sync.Store.ISerializableFactory.Wrap(System.Object)
  id: Wrap(System.Object)
  parent: Sync.Store.ISerializableFactory
  langs:
  - csharp
  - vb
  name: Wrap(Object)
  nameWithType: ISerializableFactory.Wrap(Object)
  fullName: Sync.Store.ISerializableFactory.Wrap(System.Object)
  type: Method
  source:
    remote:
      path: source/Sync/Store/ISerializableFactory.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Wrap
    path: ../source/Sync/Store/ISerializableFactory.cs
    startLine: 9
  assemblies:
  - Sync
  namespace: Sync.Store
  summary: "\nWraps an object to make it serializable. Returns <code data-dev-comment-type=\"paramref\" class=\"paramref\">obj</code> if no wrapper is\nnecessary.\n"
  example: []
  syntax:
    content: object Wrap(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: Object that may be wrapped.
    return:
      type: System.Object
    content.vb: Function Wrap(obj As Object) As Object
  overload: Sync.Store.ISerializableFactory.Wrap*
- uid: Sync.Store.ISerializableFactory.Unwrap(System.Object)
  commentId: M:Sync.Store.ISerializableFactory.Unwrap(System.Object)
  id: Unwrap(System.Object)
  parent: Sync.Store.ISerializableFactory
  langs:
  - csharp
  - vb
  name: Unwrap(Object)
  nameWithType: ISerializableFactory.Unwrap(Object)
  fullName: Sync.Store.ISerializableFactory.Unwrap(System.Object)
  type: Method
  source:
    remote:
      path: source/Sync/Store/ISerializableFactory.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Unwrap
    path: ../source/Sync/Store/ISerializableFactory.cs
    startLine: 17
  assemblies:
  - Sync
  namespace: Sync.Store
  summary: "\nUnwraps an object from the serializer wrapper. Returns <code data-dev-comment-type=\"paramref\" class=\"paramref\">obj</code> if it is not\nwrapped.\n"
  example: []
  syntax:
    content: object Unwrap(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: Object to unwrap.
    return:
      type: System.Object
      description: ''
    content.vb: Function Unwrap(obj As Object) As Object
  overload: Sync.Store.ISerializableFactory.Unwrap*
references:
- uid: Sync.Store
  commentId: N:Sync.Store
  name: Sync.Store
  nameWithType: Sync.Store
  fullName: Sync.Store
- uid: Sync.Store.ISerializableFactory.Wrap*
  commentId: Overload:Sync.Store.ISerializableFactory.Wrap
  name: Wrap
  nameWithType: ISerializableFactory.Wrap
  fullName: Sync.Store.ISerializableFactory.Wrap
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sync.Store.ISerializableFactory.Unwrap*
  commentId: Overload:Sync.Store.ISerializableFactory.Unwrap
  name: Unwrap
  nameWithType: ISerializableFactory.Unwrap
  fullName: Sync.Store.ISerializableFactory.Unwrap
