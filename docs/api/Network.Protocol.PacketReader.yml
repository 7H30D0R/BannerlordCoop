### YamlMime:ManagedReference
items:
- uid: Network.Protocol.PacketReader
  commentId: T:Network.Protocol.PacketReader
  id: PacketReader
  parent: Network.Protocol
  children:
  - Network.Protocol.PacketReader.DecodePacketType(System.Byte)
  - Network.Protocol.PacketReader.Done
  - Network.Protocol.PacketReader.m_FragmentedBuffer
  - Network.Protocol.PacketReader.m_FragmentedStream
  - Network.Protocol.PacketReader.Read(Network.ByteReader)
  langs:
  - csharp
  - vb
  name: PacketReader
  nameWithType: PacketReader
  fullName: Network.Protocol.PacketReader
  type: Class
  source:
    remote:
      path: source/Network/Protocol/Packet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: PacketReader
    path: ../source/Network/Protocol/Packet.cs
    startLine: 137
  assemblies:
  - Network
  namespace: Network.Protocol
  syntax:
    content: public class PacketReader
    content.vb: Public Class PacketReader
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Network.Protocol.PacketReader.m_FragmentedBuffer
  commentId: F:Network.Protocol.PacketReader.m_FragmentedBuffer
  id: m_FragmentedBuffer
  parent: Network.Protocol.PacketReader
  langs:
  - csharp
  - vb
  name: m_FragmentedBuffer
  nameWithType: PacketReader.m_FragmentedBuffer
  fullName: Network.Protocol.PacketReader.m_FragmentedBuffer
  type: Field
  source:
    remote:
      path: source/Network/Protocol/Packet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: m_FragmentedBuffer
    path: ../source/Network/Protocol/Packet.cs
    startLine: 139
  assemblies:
  - Network
  namespace: Network.Protocol
  syntax:
    content: BinaryWriter m_FragmentedBuffer
    return:
      type: System.IO.BinaryWriter
    content.vb: m_FragmentedBuffer As BinaryWriter
- uid: Network.Protocol.PacketReader.m_FragmentedStream
  commentId: F:Network.Protocol.PacketReader.m_FragmentedStream
  id: m_FragmentedStream
  parent: Network.Protocol.PacketReader
  langs:
  - csharp
  - vb
  name: m_FragmentedStream
  nameWithType: PacketReader.m_FragmentedStream
  fullName: Network.Protocol.PacketReader.m_FragmentedStream
  type: Field
  source:
    remote:
      path: source/Network/Protocol/Packet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: m_FragmentedStream
    path: ../source/Network/Protocol/Packet.cs
    startLine: 141
  assemblies:
  - Network
  namespace: Network.Protocol
  syntax:
    content: MemoryStream m_FragmentedStream
    return:
      type: System.IO.MemoryStream
    content.vb: m_FragmentedStream As MemoryStream
- uid: Network.Protocol.PacketReader.Done
  commentId: P:Network.Protocol.PacketReader.Done
  id: Done
  parent: Network.Protocol.PacketReader
  langs:
  - csharp
  - vb
  name: Done
  nameWithType: PacketReader.Done
  fullName: Network.Protocol.PacketReader.Done
  type: Property
  source:
    remote:
      path: source/Network/Protocol/Packet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Done
    path: ../source/Network/Protocol/Packet.cs
    startLine: 146
  assemblies:
  - Network
  namespace: Network.Protocol
  summary: "\nWas the whole payload of the package serialized?\n"
  example: []
  syntax:
    content: public bool Done { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Done As Boolean
  overload: Network.Protocol.PacketReader.Done*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Network.Protocol.PacketReader.DecodePacketType(System.Byte)
  commentId: M:Network.Protocol.PacketReader.DecodePacketType(System.Byte)
  id: DecodePacketType(System.Byte)
  parent: Network.Protocol.PacketReader
  langs:
  - csharp
  - vb
  name: DecodePacketType(Byte)
  nameWithType: PacketReader.DecodePacketType(Byte)
  fullName: Network.Protocol.PacketReader.DecodePacketType(System.Byte)
  type: Method
  source:
    remote:
      path: source/Network/Protocol/Packet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: DecodePacketType
    path: ../source/Network/Protocol/Packet.cs
    startLine: 148
  assemblies:
  - Network
  namespace: Network.Protocol
  syntax:
    content: public static EPacket DecodePacketType(byte header)
    parameters:
    - id: header
      type: System.Byte
    return:
      type: Network.Protocol.EPacket
    content.vb: Public Shared Function DecodePacketType(header As Byte) As EPacket
  overload: Network.Protocol.PacketReader.DecodePacketType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Network.Protocol.PacketReader.Read(Network.ByteReader)
  commentId: M:Network.Protocol.PacketReader.Read(Network.ByteReader)
  id: Read(Network.ByteReader)
  parent: Network.Protocol.PacketReader
  langs:
  - csharp
  - vb
  name: Read(ByteReader)
  nameWithType: PacketReader.Read(ByteReader)
  fullName: Network.Protocol.PacketReader.Read(Network.ByteReader)
  type: Method
  source:
    remote:
      path: source/Network/Protocol/Packet.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Read
    path: ../source/Network/Protocol/Packet.cs
    startLine: 159
  assemblies:
  - Network
  namespace: Network.Protocol
  summary: "\nReads a <xref href=\"Network.Protocol.Packet\" data-throw-if-not-resolved=\"false\"></xref> from the given reader. Returns null if the packet is fragmented and\nparts are still missing.\n"
  example: []
  syntax:
    content: public Packet Read(ByteReader reader)
    parameters:
    - id: reader
      type: Network.ByteReader
      description: ''
    return:
      type: Network.Protocol.Packet
      description: Serialized packet or null if the packet is fragmented and not yet complete.
    content.vb: Public Function Read(reader As ByteReader) As Packet
  overload: Network.Protocol.PacketReader.Read*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Network.Protocol
  commentId: N:Network.Protocol
  name: Network.Protocol
  nameWithType: Network.Protocol
  fullName: Network.Protocol
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IO.BinaryWriter
  commentId: T:System.IO.BinaryWriter
  parent: System.IO
  isExternal: true
  name: BinaryWriter
  nameWithType: BinaryWriter
  fullName: System.IO.BinaryWriter
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: System.IO.MemoryStream
  commentId: T:System.IO.MemoryStream
  parent: System.IO
  isExternal: true
  name: MemoryStream
  nameWithType: MemoryStream
  fullName: System.IO.MemoryStream
- uid: Network.Protocol.PacketReader.Done*
  commentId: Overload:Network.Protocol.PacketReader.Done
  name: Done
  nameWithType: PacketReader.Done
  fullName: Network.Protocol.PacketReader.Done
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Network.Protocol.PacketReader.DecodePacketType*
  commentId: Overload:Network.Protocol.PacketReader.DecodePacketType
  name: DecodePacketType
  nameWithType: PacketReader.DecodePacketType
  fullName: Network.Protocol.PacketReader.DecodePacketType
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: Network.Protocol.EPacket
  commentId: T:Network.Protocol.EPacket
  parent: Network.Protocol
  name: EPacket
  nameWithType: EPacket
  fullName: Network.Protocol.EPacket
- uid: Network.Protocol.Packet
  commentId: T:Network.Protocol.Packet
  parent: Network.Protocol
  name: Packet
  nameWithType: Packet
  fullName: Network.Protocol.Packet
- uid: Network.Protocol.PacketReader.Read*
  commentId: Overload:Network.Protocol.PacketReader.Read
  name: Read
  nameWithType: PacketReader.Read
  fullName: Network.Protocol.PacketReader.Read
- uid: Network.ByteReader
  commentId: T:Network.ByteReader
  parent: Network
  name: ByteReader
  nameWithType: ByteReader
  fullName: Network.ByteReader
- uid: Network
  commentId: N:Network
  name: Network
  nameWithType: Network
  fullName: Network
