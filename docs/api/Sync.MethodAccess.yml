### YamlMime:ManagedReference
items:
- uid: Sync.MethodAccess
  commentId: T:Sync.MethodAccess
  id: MethodAccess
  parent: Sync
  children:
  - Sync.MethodAccess.#ctor(System.Reflection.MethodInfo)
  - Sync.MethodAccess.AddFlags(Sync.EMethodPatchFlag)
  - Sync.MethodAccess.CallOriginal(System.Object,System.Object[])
  - Sync.MethodAccess.Condition
  - Sync.MethodAccess.Flags
  - Sync.MethodAccess.Id
  - Sync.MethodAccess.InitOriginal(System.Reflection.Emit.DynamicMethod)
  - Sync.MethodAccess.InvokeOnBeforeCallHandler(System.Object,System.Object[])
  - Sync.MethodAccess.m_Call
  - Sync.MethodAccess.m_CallStatic
  - Sync.MethodAccess.m_StandIn
  - Sync.MethodAccess.MemberInfo
  - Sync.MethodAccess.ToString
  langs:
  - csharp
  - vb
  name: MethodAccess
  nameWithType: MethodAccess
  fullName: Sync.MethodAccess
  type: Class
  source:
    remote:
      path: source/Sync/MethodAccess.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: MethodAccess
    path: ../source/Sync/MethodAccess.cs
    startLine: 14
  assemblies:
  - Sync
  namespace: Sync
  summary: "\nType erased invocation wrapper for patched methods. On creation, a snapshot of the IL\nrepresentation of the method is stored internally. The snapshot includes all patches\nto the function already applied. The snapshot can be called using <xref href=\"Sync.MethodAccess.CallOriginal(System.Object%2cSystem.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class MethodAccess : Tracker'
    content.vb: >-
      Public Class MethodAccess

          Inherits Tracker
  inheritance:
  - System.Object
  - Sync.Tracker
  inheritedMembers:
  - Sync.Tracker.m_InstanceSpecificHandlers
  - Sync.Tracker.GlobalHandler
  - Sync.Tracker.InstanceSpecificHandlers
  - Sync.Tracker.SetHandler(System.Object,System.Action{System.Object})
  - Sync.Tracker.GetHandler(System.Object)
  - Sync.Tracker.RemoveHandler(System.Object)
  - Sync.Tracker.SetGlobalHandler(System.Action{System.Object,System.Object})
  - Sync.Tracker.RemoveGlobalHandler
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sync.MethodAccess.m_Call
  commentId: F:Sync.MethodAccess.m_Call
  id: m_Call
  parent: Sync.MethodAccess
  langs:
  - csharp
  - vb
  name: m_Call
  nameWithType: MethodAccess.m_Call
  fullName: Sync.MethodAccess.m_Call
  type: Field
  source:
    remote:
      path: source/Sync/MethodAccess.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: m_Call
    path: ../source/Sync/MethodAccess.cs
    startLine: 16
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: >-
      [CanBeNull]

      readonly Action<object, object[]> m_Call
    return:
      type: System.Action{System.Object,System.Object[]}
    content.vb: >-
      <CanBeNull>

      ReadOnly m_Call As Action(Of Object, Object())
  attributes:
  - type: JetBrains.Annotations.CanBeNullAttribute
    ctor: JetBrains.Annotations.CanBeNullAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - readonly
  modifiers.vb:
  - ReadOnly
- uid: Sync.MethodAccess.m_CallStatic
  commentId: F:Sync.MethodAccess.m_CallStatic
  id: m_CallStatic
  parent: Sync.MethodAccess
  langs:
  - csharp
  - vb
  name: m_CallStatic
  nameWithType: MethodAccess.m_CallStatic
  fullName: Sync.MethodAccess.m_CallStatic
  type: Field
  source:
    remote:
      path: source/Sync/MethodAccess.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: m_CallStatic
    path: ../source/Sync/MethodAccess.cs
    startLine: 17
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: >-
      [CanBeNull]

      readonly Action<object[]> m_CallStatic
    return:
      type: System.Action{System.Object[]}
    content.vb: >-
      <CanBeNull>

      ReadOnly m_CallStatic As Action(Of Object())
  attributes:
  - type: JetBrains.Annotations.CanBeNullAttribute
    ctor: JetBrains.Annotations.CanBeNullAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - readonly
  modifiers.vb:
  - ReadOnly
- uid: Sync.MethodAccess.m_StandIn
  commentId: F:Sync.MethodAccess.m_StandIn
  id: m_StandIn
  parent: Sync.MethodAccess
  langs:
  - csharp
  - vb
  name: m_StandIn
  nameWithType: MethodAccess.m_StandIn
  fullName: Sync.MethodAccess.m_StandIn
  type: Field
  source:
    remote:
      path: source/Sync/MethodAccess.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: m_StandIn
    path: ../source/Sync/MethodAccess.cs
    startLine: 19
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: readonly DynamicMethod m_StandIn
    return:
      type: System.Reflection.Emit.DynamicMethod
    content.vb: ReadOnly m_StandIn As DynamicMethod
  modifiers.csharp:
  - readonly
  modifiers.vb:
  - ReadOnly
- uid: Sync.MethodAccess.#ctor(System.Reflection.MethodInfo)
  commentId: M:Sync.MethodAccess.#ctor(System.Reflection.MethodInfo)
  id: '#ctor(System.Reflection.MethodInfo)'
  parent: Sync.MethodAccess
  langs:
  - csharp
  - vb
  name: MethodAccess(MethodInfo)
  nameWithType: MethodAccess.MethodAccess(MethodInfo)
  fullName: Sync.MethodAccess.MethodAccess(System.Reflection.MethodInfo)
  type: Constructor
  source:
    remote:
      path: source/Sync/MethodAccess.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: .ctor
    path: ../source/Sync/MethodAccess.cs
    startLine: 21
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: public MethodAccess([NotNull] MethodInfo info)
    parameters:
    - id: info
      type: System.Reflection.MethodInfo
      attributes:
      - type: JetBrains.Annotations.NotNullAttribute
        ctor: JetBrains.Annotations.NotNullAttribute.#ctor
        arguments: []
    content.vb: Public Sub New(info As MethodInfo)
  overload: Sync.MethodAccess.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sync.MethodAccess.Flags
  commentId: P:Sync.MethodAccess.Flags
  id: Flags
  parent: Sync.MethodAccess
  langs:
  - csharp
  - vb
  name: Flags
  nameWithType: MethodAccess.Flags
  fullName: Sync.MethodAccess.Flags
  type: Property
  source:
    remote:
      path: source/Sync/MethodAccess.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Flags
    path: ../source/Sync/MethodAccess.cs
    startLine: 37
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: public EMethodPatchFlag Flags { get; }
    parameters: []
    return:
      type: Sync.EMethodPatchFlag
    content.vb: Public ReadOnly Property Flags As EMethodPatchFlag
  overload: Sync.MethodAccess.Flags*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sync.MethodAccess.Condition
  commentId: P:Sync.MethodAccess.Condition
  id: Condition
  parent: Sync.MethodAccess
  langs:
  - csharp
  - vb
  name: Condition
  nameWithType: MethodAccess.Condition
  fullName: Sync.MethodAccess.Condition
  type: Property
  source:
    remote:
      path: source/Sync/MethodAccess.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Condition
    path: ../source/Sync/MethodAccess.cs
    startLine: 43
  assemblies:
  - Sync
  namespace: Sync
  summary: "\nIf set, this function will be called before invoking any onBeforeCall handlers. If the\nfunction evaluates to false, the onBeforeCall handlers will not be called.\n"
  example: []
  syntax:
    content: >-
      [CanBeNull]

      public Func<object, bool> Condition { get; set; }
    parameters: []
    return:
      type: System.Func{System.Object,System.Boolean}
    content.vb: >-
      <CanBeNull>

      Public Property Condition As Func(Of Object, Boolean)
  overload: Sync.MethodAccess.Condition*
  attributes:
  - type: JetBrains.Annotations.CanBeNullAttribute
    ctor: JetBrains.Annotations.CanBeNullAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sync.MethodAccess.Id
  commentId: P:Sync.MethodAccess.Id
  id: Id
  parent: Sync.MethodAccess
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: MethodAccess.Id
  fullName: Sync.MethodAccess.Id
  type: Property
  source:
    remote:
      path: source/Sync/MethodAccess.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: Id
    path: ../source/Sync/MethodAccess.cs
    startLine: 46
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: public MethodId Id { get; }
    parameters: []
    return:
      type: Sync.MethodId
    content.vb: Public ReadOnly Property Id As MethodId
  overload: Sync.MethodAccess.Id*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sync.MethodAccess.MemberInfo
  commentId: P:Sync.MethodAccess.MemberInfo
  id: MemberInfo
  parent: Sync.MethodAccess
  langs:
  - csharp
  - vb
  name: MemberInfo
  nameWithType: MethodAccess.MemberInfo
  fullName: Sync.MethodAccess.MemberInfo
  type: Property
  source:
    remote:
      path: source/Sync/MethodAccess.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: MemberInfo
    path: ../source/Sync/MethodAccess.cs
    startLine: 48
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: public MethodInfo MemberInfo { get; }
    parameters: []
    return:
      type: System.Reflection.MethodInfo
    content.vb: Public ReadOnly Property MemberInfo As MethodInfo
  overload: Sync.MethodAccess.MemberInfo*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sync.MethodAccess.AddFlags(Sync.EMethodPatchFlag)
  commentId: M:Sync.MethodAccess.AddFlags(Sync.EMethodPatchFlag)
  id: AddFlags(Sync.EMethodPatchFlag)
  parent: Sync.MethodAccess
  langs:
  - csharp
  - vb
  name: AddFlags(EMethodPatchFlag)
  nameWithType: MethodAccess.AddFlags(EMethodPatchFlag)
  fullName: Sync.MethodAccess.AddFlags(Sync.EMethodPatchFlag)
  type: Method
  source:
    remote:
      path: source/Sync/MethodAccess.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: AddFlags
    path: ../source/Sync/MethodAccess.cs
    startLine: 50
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: public void AddFlags(EMethodPatchFlag flag)
    parameters:
    - id: flag
      type: Sync.EMethodPatchFlag
    content.vb: Public Sub AddFlags(flag As EMethodPatchFlag)
  overload: Sync.MethodAccess.AddFlags*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sync.MethodAccess.InitOriginal(System.Reflection.Emit.DynamicMethod)
  commentId: M:Sync.MethodAccess.InitOriginal(System.Reflection.Emit.DynamicMethod)
  id: InitOriginal(System.Reflection.Emit.DynamicMethod)
  parent: Sync.MethodAccess
  langs:
  - csharp
  - vb
  name: InitOriginal(DynamicMethod)
  nameWithType: MethodAccess.InitOriginal(DynamicMethod)
  fullName: Sync.MethodAccess.InitOriginal(System.Reflection.Emit.DynamicMethod)
  type: Method
  source:
    remote:
      path: source/Sync/MethodAccess.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: InitOriginal
    path: ../source/Sync/MethodAccess.cs
    startLine: 55
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: void InitOriginal(DynamicMethod toPatch)
    parameters:
    - id: toPatch
      type: System.Reflection.Emit.DynamicMethod
    content.vb: Sub InitOriginal(toPatch As DynamicMethod)
  overload: Sync.MethodAccess.InitOriginal*
- uid: Sync.MethodAccess.CallOriginal(System.Object,System.Object[])
  commentId: M:Sync.MethodAccess.CallOriginal(System.Object,System.Object[])
  id: CallOriginal(System.Object,System.Object[])
  parent: Sync.MethodAccess
  langs:
  - csharp
  - vb
  name: CallOriginal(Object, Object[])
  nameWithType: MethodAccess.CallOriginal(Object, Object[])
  fullName: Sync.MethodAccess.CallOriginal(System.Object, System.Object[])
  type: Method
  source:
    remote:
      path: source/Sync/MethodAccess.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: CallOriginal
    path: ../source/Sync/MethodAccess.cs
    startLine: 77
  assemblies:
  - Sync
  namespace: Sync
  summary: "\nInvokes the original method as it was at the time of creation of this\n<xref href=\"Sync.MethodAccess\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void CallOriginal([CanBeNull] object target, [CanBeNull] object[] args)
    parameters:
    - id: target
      type: System.Object
      description: ''
      attributes:
      - type: JetBrains.Annotations.CanBeNullAttribute
        ctor: JetBrains.Annotations.CanBeNullAttribute.#ctor
        arguments: []
    - id: args
      type: System.Object[]
      description: ''
      attributes:
      - type: JetBrains.Annotations.CanBeNullAttribute
        ctor: JetBrains.Annotations.CanBeNullAttribute.#ctor
        arguments: []
    content.vb: Public Sub CallOriginal(target As Object, args As Object())
  overload: Sync.MethodAccess.CallOriginal*
  nameWithType.vb: MethodAccess.CallOriginal(Object, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sync.MethodAccess.CallOriginal(System.Object, System.Object())
  name.vb: CallOriginal(Object, Object())
- uid: Sync.MethodAccess.InvokeOnBeforeCallHandler(System.Object,System.Object[])
  commentId: M:Sync.MethodAccess.InvokeOnBeforeCallHandler(System.Object,System.Object[])
  id: InvokeOnBeforeCallHandler(System.Object,System.Object[])
  parent: Sync.MethodAccess
  langs:
  - csharp
  - vb
  name: InvokeOnBeforeCallHandler(Object, Object[])
  nameWithType: MethodAccess.InvokeOnBeforeCallHandler(Object, Object[])
  fullName: Sync.MethodAccess.InvokeOnBeforeCallHandler(System.Object, System.Object[])
  type: Method
  source:
    remote:
      path: source/Sync/MethodAccess.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: InvokeOnBeforeCallHandler
    path: ../source/Sync/MethodAccess.cs
    startLine: 89
  assemblies:
  - Sync
  namespace: Sync
  summary: "\nInvokes registered handlers for the given instance.\n"
  example: []
  syntax:
    content: public bool InvokeOnBeforeCallHandler([CanBeNull] object instance, params object[] args)
    parameters:
    - id: instance
      type: System.Object
      description: ''
      attributes:
      - type: JetBrains.Annotations.CanBeNullAttribute
        ctor: JetBrains.Annotations.CanBeNullAttribute.#ctor
        arguments: []
    - id: args
      type: System.Object[]
      description: ''
    return:
      type: System.Boolean
      description: true if a handler was invoked. False otherwise.
    content.vb: Public Function InvokeOnBeforeCallHandler(instance As Object, ParamArray args As Object()) As Boolean
  overload: Sync.MethodAccess.InvokeOnBeforeCallHandler*
  nameWithType.vb: MethodAccess.InvokeOnBeforeCallHandler(Object, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sync.MethodAccess.InvokeOnBeforeCallHandler(System.Object, System.Object())
  name.vb: InvokeOnBeforeCallHandler(Object, Object())
- uid: Sync.MethodAccess.ToString
  commentId: M:Sync.MethodAccess.ToString
  id: ToString
  parent: Sync.MethodAccess
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: MethodAccess.ToString()
  fullName: Sync.MethodAccess.ToString()
  type: Method
  source:
    remote:
      path: source/Sync/MethodAccess.cs
      branch: readthedocs
      repo: https://github.com/Bannerlord-Coop-Team/BannerlordCoop.git
    id: ToString
    path: ../source/Sync/MethodAccess.cs
    startLine: 98
  assemblies:
  - Sync
  namespace: Sync
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Sync.MethodAccess.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Sync.MethodAccess.CallOriginal(System.Object,System.Object[])
  commentId: M:Sync.MethodAccess.CallOriginal(System.Object,System.Object[])
  isExternal: true
- uid: Sync
  commentId: N:Sync
  name: Sync
  nameWithType: Sync
  fullName: Sync
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Sync.Tracker
  commentId: T:Sync.Tracker
  parent: Sync
  name: Tracker
  nameWithType: Tracker
  fullName: Sync.Tracker
- uid: Sync.Tracker.m_InstanceSpecificHandlers
  commentId: F:Sync.Tracker.m_InstanceSpecificHandlers
  parent: Sync.Tracker
  name: m_InstanceSpecificHandlers
  nameWithType: Tracker.m_InstanceSpecificHandlers
  fullName: Sync.Tracker.m_InstanceSpecificHandlers
- uid: Sync.Tracker.GlobalHandler
  commentId: P:Sync.Tracker.GlobalHandler
  parent: Sync.Tracker
  name: GlobalHandler
  nameWithType: Tracker.GlobalHandler
  fullName: Sync.Tracker.GlobalHandler
- uid: Sync.Tracker.InstanceSpecificHandlers
  commentId: P:Sync.Tracker.InstanceSpecificHandlers
  parent: Sync.Tracker
  name: InstanceSpecificHandlers
  nameWithType: Tracker.InstanceSpecificHandlers
  fullName: Sync.Tracker.InstanceSpecificHandlers
- uid: Sync.Tracker.SetHandler(System.Object,System.Action{System.Object})
  commentId: M:Sync.Tracker.SetHandler(System.Object,System.Action{System.Object})
  parent: Sync.Tracker
  isExternal: true
  name: SetHandler(Object, Action<Object>)
  nameWithType: Tracker.SetHandler(Object, Action<Object>)
  fullName: Sync.Tracker.SetHandler(System.Object, System.Action<System.Object>)
  nameWithType.vb: Tracker.SetHandler(Object, Action(Of Object))
  fullName.vb: Sync.Tracker.SetHandler(System.Object, System.Action(Of System.Object))
  name.vb: SetHandler(Object, Action(Of Object))
  spec.csharp:
  - uid: Sync.Tracker.SetHandler(System.Object,System.Action{System.Object})
    name: SetHandler
    nameWithType: Tracker.SetHandler
    fullName: Sync.Tracker.SetHandler
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sync.Tracker.SetHandler(System.Object,System.Action{System.Object})
    name: SetHandler
    nameWithType: Tracker.SetHandler
    fullName: Sync.Tracker.SetHandler
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sync.Tracker.GetHandler(System.Object)
  commentId: M:Sync.Tracker.GetHandler(System.Object)
  parent: Sync.Tracker
  isExternal: true
  name: GetHandler(Object)
  nameWithType: Tracker.GetHandler(Object)
  fullName: Sync.Tracker.GetHandler(System.Object)
  spec.csharp:
  - uid: Sync.Tracker.GetHandler(System.Object)
    name: GetHandler
    nameWithType: Tracker.GetHandler
    fullName: Sync.Tracker.GetHandler
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sync.Tracker.GetHandler(System.Object)
    name: GetHandler
    nameWithType: Tracker.GetHandler
    fullName: Sync.Tracker.GetHandler
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sync.Tracker.RemoveHandler(System.Object)
  commentId: M:Sync.Tracker.RemoveHandler(System.Object)
  parent: Sync.Tracker
  isExternal: true
  name: RemoveHandler(Object)
  nameWithType: Tracker.RemoveHandler(Object)
  fullName: Sync.Tracker.RemoveHandler(System.Object)
  spec.csharp:
  - uid: Sync.Tracker.RemoveHandler(System.Object)
    name: RemoveHandler
    nameWithType: Tracker.RemoveHandler
    fullName: Sync.Tracker.RemoveHandler
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sync.Tracker.RemoveHandler(System.Object)
    name: RemoveHandler
    nameWithType: Tracker.RemoveHandler
    fullName: Sync.Tracker.RemoveHandler
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sync.Tracker.SetGlobalHandler(System.Action{System.Object,System.Object})
  commentId: M:Sync.Tracker.SetGlobalHandler(System.Action{System.Object,System.Object})
  parent: Sync.Tracker
  isExternal: true
  name: SetGlobalHandler(Action<Object, Object>)
  nameWithType: Tracker.SetGlobalHandler(Action<Object, Object>)
  fullName: Sync.Tracker.SetGlobalHandler(System.Action<System.Object, System.Object>)
  nameWithType.vb: Tracker.SetGlobalHandler(Action(Of Object, Object))
  fullName.vb: Sync.Tracker.SetGlobalHandler(System.Action(Of System.Object, System.Object))
  name.vb: SetGlobalHandler(Action(Of Object, Object))
  spec.csharp:
  - uid: Sync.Tracker.SetGlobalHandler(System.Action{System.Object,System.Object})
    name: SetGlobalHandler
    nameWithType: Tracker.SetGlobalHandler
    fullName: Sync.Tracker.SetGlobalHandler
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sync.Tracker.SetGlobalHandler(System.Action{System.Object,System.Object})
    name: SetGlobalHandler
    nameWithType: Tracker.SetGlobalHandler
    fullName: Sync.Tracker.SetGlobalHandler
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sync.Tracker.RemoveGlobalHandler
  commentId: M:Sync.Tracker.RemoveGlobalHandler
  parent: Sync.Tracker
  name: RemoveGlobalHandler()
  nameWithType: Tracker.RemoveGlobalHandler()
  fullName: Sync.Tracker.RemoveGlobalHandler()
  spec.csharp:
  - uid: Sync.Tracker.RemoveGlobalHandler
    name: RemoveGlobalHandler
    nameWithType: Tracker.RemoveGlobalHandler
    fullName: Sync.Tracker.RemoveGlobalHandler
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sync.Tracker.RemoveGlobalHandler
    name: RemoveGlobalHandler
    nameWithType: Tracker.RemoveGlobalHandler
    fullName: Sync.Tracker.RemoveGlobalHandler
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Action{System.Object,System.Object[]}
  commentId: T:System.Action{System.Object,System.Object[]}
  parent: System
  definition: System.Action`2
  name: Action<Object, Object[]>
  nameWithType: Action<Object, Object[]>
  fullName: System.Action<System.Object, System.Object[]>
  nameWithType.vb: Action(Of Object, Object())
  fullName.vb: System.Action(Of System.Object, System.Object())
  name.vb: Action(Of Object, Object())
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.Object[]}
  commentId: T:System.Action{System.Object[]}
  parent: System
  definition: System.Action`1
  name: Action<Object[]>
  nameWithType: Action<Object[]>
  fullName: System.Action<System.Object[]>
  nameWithType.vb: Action(Of Object())
  fullName.vb: System.Action(Of System.Object())
  name.vb: Action(Of Object())
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Emit.DynamicMethod
  commentId: T:System.Reflection.Emit.DynamicMethod
  parent: System.Reflection.Emit
  isExternal: true
  name: DynamicMethod
  nameWithType: DynamicMethod
  fullName: System.Reflection.Emit.DynamicMethod
- uid: System.Reflection.Emit
  commentId: N:System.Reflection.Emit
  isExternal: true
  name: System.Reflection.Emit
  nameWithType: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: Sync.MethodAccess.#ctor*
  commentId: Overload:Sync.MethodAccess.#ctor
  name: MethodAccess
  nameWithType: MethodAccess.MethodAccess
  fullName: Sync.MethodAccess.MethodAccess
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: Sync.MethodAccess.Flags*
  commentId: Overload:Sync.MethodAccess.Flags
  name: Flags
  nameWithType: MethodAccess.Flags
  fullName: Sync.MethodAccess.Flags
- uid: Sync.EMethodPatchFlag
  commentId: T:Sync.EMethodPatchFlag
  parent: Sync
  name: EMethodPatchFlag
  nameWithType: EMethodPatchFlag
  fullName: Sync.EMethodPatchFlag
- uid: Sync.MethodAccess.Condition*
  commentId: Overload:Sync.MethodAccess.Condition
  name: Condition
  nameWithType: MethodAccess.Condition
  fullName: Sync.MethodAccess.Condition
- uid: System.Func{System.Object,System.Boolean}
  commentId: T:System.Func{System.Object,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<Object, Boolean>
  nameWithType: Func<Object, Boolean>
  fullName: System.Func<System.Object, System.Boolean>
  nameWithType.vb: Func(Of Object, Boolean)
  fullName.vb: System.Func(Of System.Object, System.Boolean)
  name.vb: Func(Of Object, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Sync.MethodAccess.Id*
  commentId: Overload:Sync.MethodAccess.Id
  name: Id
  nameWithType: MethodAccess.Id
  fullName: Sync.MethodAccess.Id
- uid: Sync.MethodId
  commentId: T:Sync.MethodId
  parent: Sync
  name: MethodId
  nameWithType: MethodId
  fullName: Sync.MethodId
- uid: Sync.MethodAccess.MemberInfo*
  commentId: Overload:Sync.MethodAccess.MemberInfo
  name: MemberInfo
  nameWithType: MethodAccess.MemberInfo
  fullName: Sync.MethodAccess.MemberInfo
- uid: Sync.MethodAccess.AddFlags*
  commentId: Overload:Sync.MethodAccess.AddFlags
  name: AddFlags
  nameWithType: MethodAccess.AddFlags
  fullName: Sync.MethodAccess.AddFlags
- uid: Sync.MethodAccess.InitOriginal*
  commentId: Overload:Sync.MethodAccess.InitOriginal
  name: InitOriginal
  nameWithType: MethodAccess.InitOriginal
  fullName: Sync.MethodAccess.InitOriginal
- uid: Sync.MethodAccess
  commentId: T:Sync.MethodAccess
  parent: Sync
  name: MethodAccess
  nameWithType: MethodAccess
  fullName: Sync.MethodAccess
- uid: Sync.MethodAccess.CallOriginal*
  commentId: Overload:Sync.MethodAccess.CallOriginal
  name: CallOriginal
  nameWithType: MethodAccess.CallOriginal
  fullName: Sync.MethodAccess.CallOriginal
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Sync.MethodAccess.InvokeOnBeforeCallHandler*
  commentId: Overload:Sync.MethodAccess.InvokeOnBeforeCallHandler
  name: InvokeOnBeforeCallHandler
  nameWithType: MethodAccess.InvokeOnBeforeCallHandler
  fullName: Sync.MethodAccess.InvokeOnBeforeCallHandler
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sync.MethodAccess.ToString*
  commentId: Overload:Sync.MethodAccess.ToString
  name: ToString
  nameWithType: MethodAccess.ToString
  fullName: Sync.MethodAccess.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
